{"version":3,"sources":["components/App.js","components/AppDemoPosterlens.js","components/InputImage.js","components/InputData.js","components/EditObject2.js","components/ListObjects.js","components/Widgets.js","helpers.js","components/ObjectInfo.js","components/AppEditPosterlens.js","index.js"],"names":["App","useEffect","console","log","window","PANOLENS","THREE","eval","stopAllAnimations","isAppAsWidget","appAsWidget","isEditModeDefault","location","hash","useState","setAppAsWidget","appMode","setAppMode","data","AppDemoPosterlens","refContainer","createRef","retrievedOptions","JSON","parse","localStorage","getItem","worlds","error","pl","document","querySelector","posterlens","viewer","panorama","addEventListener","panolensPanoInstance","scene","getScene","createViewer","className","onDoubleClick","onClick","id","ref","InputImage","p","infoAttr","setInfoAttr","pickupImageMode","setPickupImageMode","handlePickupImg","e","target","src","value","wrapperUpdateObjectSingleData","removeEventListener","handleCancelPickupImage","setTimeout","event","keyCode","InputGroup","Prepend","Text","input","label","Append","option","Button","variant","getOptionsByObject3D","currentObject3D","Input","theValue","deleteIfValue","fieldPair","scale","x","updateObjectSingleData","name","type","extensions","dims","minWidth","maxWidth","minHeight","maxHeight","onChange","base64","imgPath","onError","errMsg","alert","onSubmit","preventDefault","currentTarget","FormControl","as","defaultValue","Form","Check","step","Group","defaultChecked","checkedValue","checked","uncheckedValue","key","options","Object","keys","map","viewInput","EditObject2","plImgPath","setImgPath","refImgPathInput","v","renderer","domElement","handlerPickupObject","selectedObj","newPos","reactGetMouse3Dposition","Vector3","normalize","multiplyScalar","distance","y","z","setObjectPos","handlerDropObject","handlerScaleRotateObject","plOptions","isEditMode","shiftIsPressed","intersects","raycaster","intersectObject","theObj","object","startsWith","camera","position","distanceTo","OrbitControls","enabled","originalPos","selectObject","singleObject3DToParams","lastSelectedObj","ctrlKey","set","editParams","SCALE_FACTOR","rotation","ROTATE_DEG","z_move","constructor","setInfo","setCurrentObject3D","waitSave","clearTimeout","object3D","direction","offset","clone","warn","panoList","forEach","world","inputs","active","Container","style","marginTop","role","aria-label","current","Row","inputsCol","col_i","Col","sm","i","includes","width","basePath","ListObjects","init","setInit","getCurrentPanoramaParams","hotspots","element","getObjectByName","isExpertMode","Fragment","getCameraDirection","join","Math","round","fov","currentMouse3DPosition","objectsToPopupWhenVisible","k","min","max","Widgets","el","classList","add","isWidgetsInit","setIsWidgetsInit","Array","from","appendControlItem","backgroundImage","float","onTap","initNewObject","newObj","objectData","group","justCreatedBtn","countResets","params","floor","random","pos","values","getWorldDirection","image","defaultPosterImg","posterSphere","text","fontFamily","callbackFn","mesh","createNewObjectFromParams","worldParams","push","newPlOptions","plOptionsReplaceWorldParams","setPlOptions","round2","fl","numb","toFixed","ObjectInfo","isOpen","setIsOpen","currentObjectOptions","find","ht","alwaysLookatCamera","objectOptions","lines","stringify","split","jsx","line","currentObjectOptionsJSX","AppEditPosterlens","setIsEditMode","POSTERLENS_CONTAINER_ID","AUTO_START_EDIT_MODE","expertMode","setEditParams","countRestarts","setCountRestarts","info","refContainerParent","setItem","length","point","getWorldPosition","sub","currentMP","assign","posterlensConfig","o","lso","selObj","restartViewer","innerHTML","currentWorldOptions","w","getCurrentPanoramaParamsIndex","findIndex","newOptions","plOptionsReplaceWorldParamsHotspot","currentWorldParams","getHotspotIndex","newHotspots","syncPlOptionsAndLocalStorage","exportStr","onSavePlOptionsCallback","objectCurrentParams","objectNewParams","rot","defaults","mapParams","emissive","transparent","color","obFields","currentField","field","replace","hasOwnProperty","editMode","textA","createElement","textContent","height","Modal","exportToTextarea","currentWorldOptionsIndex","newPlOptionsHotspots","hotspotIndex","splice","newO","remove","getChildByName","onMouseMove","fields","regenerate","objectHotspotIndex","newObject","querySelectorAll","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4393dc49.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport AppDemoPosterlens from './AppDemoPosterlens';\nimport AppEditPosterlens from './AppEditPosterlens';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default function App() {\n  \n  /* Retrieving possible variables from outside the App */\n  /* ------------------------ --------------------------- */\n  useEffect( () => {\n    console.log(`THREE and PANOLENS: ${window.PANOLENS}`,window.THREE);\n    window.THREE = eval('THREE');\n    window.PANOLENS = eval('PANOLENS');\n    window.stopAllAnimations = window.stopAllAnimations;\n  }, []);\n\n  const isAppAsWidget       = window.appAsWidget? true : false; // when we use it in Wordpress, in a page, then it's a widget app\n  const isEditModeDefault = window.location.hash === '#edit' || isAppAsWidget;\n  const [appAsWidget, setAppAsWidget] = useState(isAppAsWidget);\n  const [appMode, setAppMode] = useState(isEditModeDefault? 'edit' : 'demo');\n  \n  var data = window.data; // defined outside react, in the html calling this app\n  /* ------------------------ --------------------------- */\n\n  return appMode === 'edit' ?  <AppEditPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} /> : \n                               <AppDemoPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} />;\n  \n}","import React, {useEffect, createRef} from 'react'\n\nfunction AppDemoPosterlens( { data, setAppMode, appAsWidget } ) {\n    \n    var refContainer = createRef();\n\n    useEffect(() => {\n        console.log('hello from useEffect in App');\n        // create the interactive 3d viewer with posterlens\n        createViewer(data);\n      }, []);\n\n    // CALL to posTERLENS\n    function createViewer(data) {\n        var posterlensConfig = {}\n        if (!data) console.log('data variable not found.')\n        else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n            \n        // load from cache by default\n        var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n\n        data = (retrievedOptions?.worlds) ? retrievedOptions : data;\n        if (!data) {\n        console.error('No data loaded. Cant initialize');\n        return;\n        }\n\n        // CALL POSTERLENS\n        window.pl = document.querySelector('#posterlens-container').posterlens( data );\n        window.pl.viewer.panorama.addEventListener('load', (panolensPanoInstance) => {\n            console.log(`🎉🎉🎉🎉🎉🎉🎉🎉`, panolensPanoInstance);\n        });\n        window.scene = window.pl.viewer.getScene();\n    }\n\n\n\n    return (\n        <div className='container'>\n            <h1 onDoubleClick={()=> setAppMode('edit')} >Demo  \n                { appAsWidget? \n                    <button className='btn btn-sm btn-primary' onClick={ ()=> setAppMode('edit') }>Back</button>\n                    : null }\n            </h1> \n            <div className='posterlens-container' id='posterlens-container' ref={refContainer}></div>\n        </div>\n    )\n}\n\nexport default AppDemoPosterlens\n","import React, {useState, useEffect} from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction InputImage( p ) {\n\n    // p : the props obj. \n    // @p.input (option, label)\n\n    // Local State\n    const [infoAttr, setInfoAttr] = useState(''); // a little message saying \"updating\", \"saved\" to the user\n    \n    // tool to fillup an image input by selecting an image in the screen.\n    const [pickupImageMode, setPickupImageMode] = useState(false);\n\n    // watch the activation of the mode \"pickup image in screen\"\n    useEffect(() => {\n        if (! pickupImageMode) return;\n        setInfoAttr('Pick up an image in the screen');\n        const handlePickupImg = (e) => {\n            if (e.target?.src) {\n                const value = e.target.src; // I tried using refs but here it doesnt read them\n                p.wrapperUpdateObjectSingleData(value);\n\n                // remove events to normal\n                setPickupImageMode(false);\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n                setInfoAttr(\"Image selected\"); setTimeout( () => setInfoAttr(''), 3000 );\n            }\n        };\n        const handleCancelPickupImage = function(event) {\n            if(event.keyCode === 27){ // clicking ESC\n                setPickupImageMode(false);\n                setInfoAttr(\"Cancelled\"); setTimeout( () => setInfoAttr(''), 3000 );\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n           }\n        };\n        document.addEventListener('click', handlePickupImg, 'pickupImg' );\n        document.addEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );\n        \n    }, [pickupImageMode]);\n    \n\n    \n\n  return (\n    \n        <InputGroup>\n\n            <InputGroup.Prepend>\n                <InputGroup.Text>\n                    { p.input.label }\n                </InputGroup.Text>\n            </InputGroup.Prepend>\n            <InputGroup.Append onClick={ (e) => { setPickupImageMode(p.input.option) } }>\n                <InputGroup.Text>\n                    { pickupImageMode? 'select an image' : <Button variant=\"primary\">Pick image</Button> }\n                </InputGroup.Text>\n            </InputGroup.Append>\n\n                <InputGroup.Append>\n                    <InputGroup.Text>\n                        {p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                    </InputGroup.Text>\n                </InputGroup.Append>\n                <span className=\"text-light bg-dark\">{ infoAttr }</span>\n        </InputGroup>\n\n  );\n}\n\nexport default InputImage;\n","import React from 'react'\n\nimport Button from 'react-bootstrap/Button';\n\nimport InputImage from './InputImage';\nimport { FilePicker } from 'react-file-picker'\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\n\nexport default function Input(p) {\n\n    // udpated fied p.input.option with the value. Some fields have special treatment\n    const wrapperUpdateObjectSingleData = function (value) {\n        let theValue = value === p.input.deleteIfValue ? null : value; // with this we will remove the option from the params.\n        const fieldPair = { [p.input.option] : theValue };\n        // special fields that need special treatment\n        if ( p.input.option === 'background' && theValue === '' ) fieldPair[p.input.option] = 'transparent'; // no bg color => background: 'transparent'\n        if ( p.input.option === 'sprite' && theValue === true ) fieldPair.scale = p.currentObject3D.scale.x * 10; // if we convert into sprite we better scale or it will look tiny\n        if ( p.input.option === 'sprite' && !theValue ) fieldPair.scale = p.currentObject3D.scale.x / 10; // the other way as well.\n        p.updateObjectSingleData( p.currentObject3D.name, fieldPair);\n    }\n\n    const viewInput = function() {\n        switch (p.input.type) {\n            case \"image-pick\":\n                return <InputImage input={p.input} currentObject3D={p.currentObject3D} getOptionsByObject3D={p.getOptionsByObject3D}\n                                    wrapperUpdateObjectSingleData={wrapperUpdateObjectSingleData} />\n            break;\n            case \"image\":\n                return <InputGroup >\n                    <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FilePicker \n                extensions={['jpg', 'jpeg', 'png', 'gif', 'svg']}\n                dims={{minWidth: 100, maxWidth: 2500, minHeight: 100, maxHeight: 2500}}\n                onChange={base64 => p.updateObjectSingleData( p.currentObject3D.name, { [p.input.option]: p.imgPath+base64.name}) }\n                onError={ errMsg => alert(errMsg) }\n            >\n                <Button variant='primary'>\n                Select image\n                </Button >\n                </FilePicker>\n                <Button variant='danger' onClick={ (e) => { wrapperUpdateObjectSingleData(null) } }>\n                    Clear\n                </Button >\n                <InputGroup.Append> <InputGroup.Text>{p.getOptionsByObject3D(p.currentObject3D, p.input.option)}</InputGroup.Text></InputGroup.Append>\n                </InputGroup>\n            case \"input\":\n                return <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n>\n                    <InputGroup>\n                        <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                        <FormControl as='input' defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)}  />\n                        <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                    </InputGroup>\n                </form>\n            case \"number\":\n                return  <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                                >\n                            <InputGroup>\n                                <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                                <Form.Check type=\"number\" step={ p.input.step?? 1 }\n                                    defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)} />\n                                <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                            </InputGroup>\n                        </form>\n            case \"checkbox\":\n                return <Form.Group >\n                <Form.Check type=\"checkbox\" label={p.input.label + `(${p.getOptionsByObject3D(p.currentObject3D, p.input.option)})`}\n                            defaultChecked={p.getOptionsByObject3D(p.currentObject3D, p.input.option) === p.input.checkedValue() || p.input.deleteIfValue === p.input.checkedValue() }\n                                onChange={ (e) => {\n                                    const value = e.currentTarget.checked? p.input.checkedValue(p.currentObject3D) : p.input.uncheckedValue(p.currentObject3D) ;\n                                    wrapperUpdateObjectSingleData(value);                                            \n                                } } />\n                </Form.Group>\n            case \"select\":\n                return <InputGroup>\n                     <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FormControl as='select' defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                                        onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) }>\n                                <option key='nothing' value='' >---</option>\n                                {   \n                                    (typeof p.input.options === 'object') ? Object.keys(p.input.options)?.map( option => { \n                                        return <option key={option} value={ p.input.options[option] } >{ option }</option>\n                                    }) : null\n                                }\n                    </FormControl>\n                    <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n            default:\n            break;\n        }\n    }\n\n    return viewInput();\n}\n","import React, {useEffect, useState, createRef} from 'react';\n\n// the <inputs ...\nimport InputData from './InputData';\n\n// bootstrap 4 elements\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction EditObject2( p ) {\n\n    const [imgPath, setImgPath] = useState( window.plImgPath?? 'resources/'); // imgs for 3d textures\n    const refImgPathInput = createRef();\n\n    // Important note. Inside a new EventListener, we can't access to updated props. The props will always have the initial value\n    // That's why I use window.selectedObj instead of p.currentObject3D, to access to the lastest Position.\n\n    // triggered on load, only once.\n    useEffect(() => { \n        if (!window.pl) return;\n        console.log('pl updated in edit', window.pl);\n        const v = window.pl.viewer;\n        v.renderer.domElement.addEventListener('mousedown', (event) => { handlerPickupObject(event) });\n\n        // --- move object \n        v.renderer.domElement.addEventListener('mousemove', function (event) {\n            if (!window.selectedObj) return;\n            let newPos = p.reactGetMouse3Dposition(event, window.pl);\n            if (!newPos) return;\n            const v = new window.THREE.Vector3(...newPos).normalize().multiplyScalar(window.selectedObj.distance);\n            newPos = [v.x, v.y, v.z];\n            window.pl.setObjectPos(window.selectedObj, newPos);\n        });\n        v.renderer.domElement.addEventListener('mouseup', (event) => { handlerDropObject(event) });\n        document.addEventListener('keydown', (event) => { handlerScaleRotateObject(event) } );\n        \n    }, [p.plOptions] );\n\n    // --- pickup object \n    const handlerPickupObject = (event) => {\n        if ( !p.isEditMode ) return;\n        if (window.pl.shiftIsPressed) return;\n\n        const v = window.pl.viewer;\n        \n        const intersects = v.raycaster.intersectObject( v.panorama, true );\n        const theObj = intersects[0]? intersects[0].object : null ;\n        if (!theObj.type?.startsWith('pl_')) return;\n\n        theObj.distance = v.camera.position.distanceTo(theObj.position);\n        window.selectedObj = theObj;\n        console.log('Edit Object cLicked', window.selectedObj.name);\n        \n        v.OrbitControls.enabled = false;\n        window.selectedObj.originalPos = window.selectedObj.position;                \n        \n        // State: assign lastSelectedObj and update state currentObject3D\n        p.selectObject(theObj);\n    }\n\n    // --- drop object \n    const handlerDropObject = (event) => {  \n        if ( !p.isEditMode || !window.selectedObj) return;\n        if (!window.selectedObj.type.startsWith('pl_')) return;\n        const v = window.pl.viewer;\n        v.OrbitControls.enabled = true;\n        // p.singleObject3DToParams(window.selectedObj);\n        p.singleObject3DToParams(window.selectedObj);\n        window.selectedObj = null;\n    };\n\n    const handlerScaleRotateObject = function(event) {\n        // we cant use the state currentObject3D, because it will not get the latest value. It will be initialzied to the time of creation og this handler\n        if (!window.lastSelectedObj) return;\n        if (event.ctrlKey) {\n            switch (event.key) {\n                case '+': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z * p.editParams.SCALE_FACTOR );      break;\n                case '-': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z / p.editParams.SCALE_FACTOR );      break;\n                case 'r': window.lastSelectedObj.rotation.z += p.editParams.ROTATE_DEG;  break;\n                case 't': window.lastSelectedObj.rotation.z -= p.editParams.ROTATE_DEG;  break;\n                case 'f': window.lastSelectedObj.rotation.y += p.editParams.ROTATE_DEG;  break;\n                case 'g': window.lastSelectedObj.rotation.y -= p.editParams.ROTATE_DEG;  break;\n                case 'v': window.lastSelectedObj.rotation.x += p.editParams.ROTATE_DEG;  break;\n                case 'b': window.lastSelectedObj.rotation.x -= p.editParams.ROTATE_DEG;  break;\n                case '4': z_move(window.lastSelectedObj, 'close'); break;\n                case '5': z_move(window.lastSelectedObj, 'far'); break;\n                default:\n                    break;\n            }\n            if (event.key === 'r' || event.key === 't' || event.key === 'f' || event.key === 'g' || event.key === 'v' || event.key === 'b') {\n                if (window.lastSelectedObj.constructor.name === 'Infospot') // deprecated\n                    p.setInfo('Sprite object cannot be rotated'); \n            }\n            p.setCurrentObject3D(window.lastSelectedObj);\n            if (window.waitSave) {\n                clearTimeout(window.waitSave);\n                window.waitSave = setTimeout( () => {\n                    p.singleObject3DToParams(window.lastSelectedObj);\n                    clearTimeout(window.waitSave);\n                    p.setInfo('updated');\n                }, 500);\n            }\n            \n        }\n    }\n\n    // move an object closer or farther from the camera.\n    function z_move(object3D, direction = 'close'){\n        let offset = 1.02;\n        if (direction === 'close') offset = 1/offset;\n                    \n        var newPos = object3D.position.clone();\n        newPos.x *= offset; newPos.y *= offset; newPos.z *= offset;\n        const distance = window.pl.viewer.camera.position.distanceTo(newPos);\n        if ( (direction !== 'close' && distance > 500) || (direction === 'close' && distance < 40)) {\n            console.warn('we cant move that limit. Its out of 40 - 500m');\n            return\n        }\n        window.pl.setObjectPos(object3D, [newPos.x, newPos.y, newPos.z]);\n    }\n\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n    p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );\n    const inputs = [\n        [\n            { option: 'image', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Img', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'alpha', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Alpha', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'text', type: 'input', label:'Text', active: [ 'pl_text-2d', 'pl_text-3d'] },\n            \n            { option: 'background', type: 'input', label:'bg color (#ffffff)', active: [ 'pl_text-2d' ] },\n            { option: 'alwaysLookatCamera', type: 'checkbox', label:'alwaysLookatCamera', checkedValue: () => true, uncheckedValue: () => false, active: [ 'pl_text-2d', 'pl_text-3d', 'pl_poster3d' ], deleteIfValue: true },\n            { option: 'sprite', type: 'checkbox', label:'sprite 2D', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'posterSphere', type: 'checkbox', label:'is sphere', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'link', type: 'select', options: panoList, label:'Go to pano', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n            { option: 'modal', type: 'input', label:'modal', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'], deleteIfValue:'' },\n            { option: 'opacity', type: 'number', step: 0.05, label:'Opacity', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '1' },\n        ],\n        [\n        { option: 'animatedMap', type: 'number', label:'frames animation map', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'animatedMapSpeed', type: 'number', label:'speed', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'rotationX', type: 'number', label:'Rotate anim X', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationY', type: 'number', label:'Rotate anim Y', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationZ', type: 'number', label:'Rotate anim Z', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'animated', type: 'select', label:'Glow animation', options: { 'always' : 'always', 'only on hover' : 'hover' }, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'popupWhenVisible', type: 'number', step: 10, label:'Pops up when in camera', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        ]\n    ];\n    return (\n      <Container>\n        {p.currentObject3D? \n        <div className=\"position-absolute\" style={{ marginTop: '-30px'}}>\n            <span role=\"img\" aria-label='c'>⬆️</span>\n            { p.getOptionsByObject3D(p.currentObject3D, 'name') } <small>{p.getOptionsByObject3D(p.currentObject3D, 'type')}</small>\n            <form className='float-left' onSubmit={ (e)=> { \n                e.preventDefault();\n                const value = e.currentTarget.querySelector('input').value;\n                p.updateObjectSingleData( p.currentObject3D.name, { name: value} );\n                }}>\n            <FormControl as='input' defaultValue={ p.getOptionsByObject3D(p.currentObject3D, 'name') } />\n            </form>\n        </div> : null }\n\n        { !p.appAsWidget?\n        <InputGroup>\n            <InputGroup.Prepend> <InputGroup.Text>imgs path</InputGroup.Text></InputGroup.Prepend>\n            <FormControl as='input' defaultValue={imgPath} ref={refImgPathInput} \n                        onChange={ (e) => refImgPathInput.current? setImgPath(refImgPathInput.current.value) : null } />\n            <InputGroup.Append><InputGroup.Text> {imgPath} </InputGroup.Text> </InputGroup.Append>\n        </InputGroup> : null }\n\n        <Row>\n            {\n                inputs.map( (inputsCol, col_i) => {\n                    return <Col sm='6' key={'column-'+col_i}>\n                        { \n                            inputsCol.map( (input, i) => {\n                                if ( !p.currentObject3D ) return null;\n                                if ( !input.active.includes(p.currentObject3D.type) ) return null;\n                                return <InputData   input={input} imgPath={imgPath} key={'input-'+i}\n                                                    updateObjectSingleData={p.updateObjectSingleData} \n                                                    currentObject3D={p.currentObject3D}\n                                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                            } )\n                        }\n                    </Col>\n                })\n            }\n        </Row>\n        \n        <img width='50' src={ window.basePath+'resources/arboles.png' } />\n      </Container>        \n  );\n}\n\nexport default EditObject2;\n","import React, {useState, useEffect} from 'react'\n\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\n\nexport default function ListObjects(p) {\n    const [init, setInit] = useState(null);\n    useEffect(() => {\n        console.log('🚴🏼‍♀️Hello from ListObjects')\n        setInit(p.getCurrentPanoramaParams());\n    }, [p.plOptions])\n\n    const getObjectsShowWhenVisible = function() {\n        if (!window.pl) return 'not loaded';\n        if (!window.pl.viewer.panorama.objectsToPopupWhenVisible) return 'none';\n        const jsx = <div> {Object.keys(window.pl.viewer.panorama.objectsToPopupWhenVisible).map( k=>{\n            const [min,max] = window.pl.viewer.panorama.objectsToPopupWhenVisible[k];\n            return <p key={k}>{k} : {min}º, {max}º</p>;\n        })} </div>\n        return jsx;\n    }\n    return (\n        <Col className='list-objects' sm='2'>\n            List Hotposts in Pano Options\n            {init && p.plOptions?.worlds ? \n            <ul>\n                { init.hotspots.map((element,i) => {\n                    return <li key={i} onClick={ () => {\n                        // get object 3d\n                        const theObj = window.pl.getObjectByName(element.name);\n                        p.selectObject(theObj);\n                    }} className={ (p.currentObject3D?.name === element.name )? 'active' : '' }>\n                        {element.name} <small>{element.type}</small>\n                    </li>\n                })}\n            </ul>\n            : null }\n\n           <br/> { /** curiously this works, I dont need to use any State, it works ok with the pl object fn. \n                    *    It is because of the mousemove event in App.js. It makes recalculate this component aparently\n                    */}\n            { p.editParams.isExpertMode? <React.Fragment>\n                Camera: { window.pl? window.pl.getCameraDirection('lookatPoint').join(', ')  : null }\n                <br/>\n                Angle: { window.pl? Math.round(window.pl.getCameraDirection('rad') * 100)/100 : null }\n                    rad :: { window.pl? Math.round(window.pl.getCameraDirection('deg')) : null }º\n                    <br/>\n                    Fov: { window.pl? window.pl.viewer.camera.fov : null }\n                    <br/>\n                    MousePos: { p.editParams.currentMouse3DPosition.join(', ') }\n                    <br/>\n                    <br/>\n                    <i>panorama.objectsToPopupWhenVisible:</i> { init? getObjectsShowWhenVisible() : null }\n            </React.Fragment> : null }\n        </Col>\n    )\n}\n","import {useEffect, useState} from 'react';\n\n\nfunction Widgets( p ) {\n\n    const v = window.pl?.viewer;\n    if (window.pl?.el)\n        window.pl.el.querySelector('div:last-child').classList.add('pl-widgets');\n\n    const [isWidgetsInit, setIsWidgetsInit ] = useState(false);\n    const initWidgets = function() {\n        if (isWidgetsInit) return;\n        setIsWidgetsInit(true);\n        if (typeof window.basePath === 'undefined') window.basePath = './';\n        // Widgets\n        // Create poster buttons. One for every type.\n        Array.from([ /*'link', */\n                    // 'poster-sprite', // type poster3d + sprite = true\n                    'poster3d',\n                    'poster3d-sphere', // type poster3d + posterSphere = true\n                    'text-3d', // doesnt work\n                    'text-2d',\n                   // 'text-2d-sprite' // type text-2d + sprite = true \n            ] ).forEach( type => {\n                v.appendControlItem({\n                    id: 'edit-controls',\n                    style: {\n                        backgroundImage: 'url('+window.basePath+'resources/widget-'+type+'.png)',\n                        float: 'left'\n                    },    \n                    onTap: () => { \n                        const { newObj, objectData } = initNewObject( type );\n                        console.log('Created new obj: ', { newObj, objectData })\n                    },\n                    group: 'editmode'\n                });\n                //shabby way to add a class to this btn. (panolens doesnt do it)\n                const justCreatedBtn = window.pl.el? window.pl.el.querySelector('.pl-widgets > span:last-child') : null;\n                if (justCreatedBtn) justCreatedBtn.classList.add('widget-btn-'+type);\n                \n        })\n    }\n    useEffect(() => {\n        console.log('Hellow from widgets');\n        if (window.pl && p.isEditMode) \n            //if (!p.pl.viewer.widget) \n                initWidgets() // TODO: if deactivate and reactivate the editmode, the widgets are created again (duplicated)\n                // we can use pl.viewer.widget.barElement.remove() when deactivated to delete the previous ones. But ideally we could avoid calling this init if they exist.\n    }, [p.countResets]);\n\n\n\n    const initNewObject = function(type = 'poster3d') {\n        // get Scene by name:\n        const params = {\n            name:  `new_${type}_` + Math.floor(Math.random() * 10000),\n            type: type,\n            pos: Object.values(v.camera.getWorldDirection(new window.THREE.Vector3()).multiplyScalar(300)), // this normalizes but not to unitary, but to 300 long\n        }\n        switch (type) {\n            // case 'link': break;\n            case 'poster3d':    // with window.defaultPosterImg we can set up a default img on creation, from outside react.\n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n            break;\n            case 'poster3d-sphere': \n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n                params.type = 'poster3d';\n                params.posterSphere = true;\n            break;\n            //  case 'poster-sprite': \n            //     params.type = 'poster3d';\n            //     params.sprite = true; \n            //     break;\n            case 'text-2d': \n                params.text = \"New text\"; \n                break;\n            // case 'text-2d-sprite': \n            //     params.type = 'text-2d';\n            //     params.sprite = true; \n            //     params.text = \"New text\"; \n            //     break;\n            case 'text-3d': // doesnt work\n                params.type = 'text-3d';\n                params.fontFamily = window.basePath+'resources/fonts/Century_Gothic_Regular.js';\n                params.text = \"New text\";\n                break;\n            default: break;\n        }\n\n        // posterlens fn\n        // update states object 3d in viewer & object params for posterlens\n        params.callbackFn = mesh => p.setCurrentObject3D(mesh);        \n        window.pl.createNewObjectFromParams(v.panorama, params);\n\n        \n        // update the option settings\n        let worldParams = p.getCurrentPanoramaParams();\n        worldParams.hotspots.push(params);\n        const newPlOptions = p.plOptionsReplaceWorldParams(worldParams);\n        p.setPlOptions(newPlOptions);\n        \n        \n        \n        return params;\n    }\n\n  // its all vanilla js, connecting with panolens. No HTML\n  return (\n    null\n  );\n}\n\nexport default Widgets;\n","export function round2(fl) { \n    var numb = fl;\n    if (typeof numb === 'number')\n     numb = numb.toFixed(2);\n    return numb;\n    //return 0.001;\n }\n","import React, {useState} from 'react'\nimport {round2} from '../helpers';\nexport default function ObjectInfo(p) {\n\n    // State\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n\n    // info in a panel of the object. Gets updated when the currentObject3D updates. It means , when it's clicked for instance.\n    function currentObjectOptions() {\n        if (!p.currentObject3D) return;\n        const worldParams = p.getCurrentPanoramaParams();\n        let objectOptions = worldParams.hotspots.find( ht => ht.name === p.currentObject3D?.name );\n        return objectOptions;\n    }\n    function currentObjectOptionsJSX() {\n        const objectOptions = currentObjectOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <h4>{p.currentObject3D?.name}<small> ({p.currentObject3D?.type})</small></h4>\n\n            <div className={ isOpen? 'd-block' : 'd-none' }>\n                \n                Pos: {round2(p.currentObject3D?.position.x)} {round2(p.currentObject3D?.position.y)} {round2(p.currentObject3D?.position.z)}\n                <br/>\n                Rot: x {round2(p.currentObject3D?.rotation.x)} / y {round2(p.currentObject3D?.rotation.y)} / z {round2(p.currentObject3D?.rotation.z)}\n                { currentObjectOptions()?.alwaysLookatCamera? '(alwayslookatcamera)' : null }\n                <br/>\n                Scale: {round2(p.currentObject3D?.scale.x)} {round2(p.currentObject3D?.scale.y)} {round2(p.currentObject3D?.scale.z)}\n            \n            \n                <React.Fragment>\n                <br/>\n                <b>Object Info in options:</b> <br/>\n                {currentObjectOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n}\n","import React, {useState, useEffect, createRef} from 'react';\nimport EditObject2 from './EditObject2';\nimport ListObjects from './ListObjects';\nimport Widgets from './Widgets';\nimport ObjectInfo from './ObjectInfo';\nimport {round2} from '../helpers';\n\n// Bootstrap 4\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport default function AppEditPosterlens( { data, setAppMode, appAsWidget } ) {\n  \n  // React states and refs\n  const [plOptions, setPlOptions] = useState(); // IMPORTANT. The goal of all this app is to generate these options. With them we can call posterlens to createa  tour.\n  const [currentObject3D, setCurrentObject3D] = useState(null); // The current THREEjs selected object. Sometimes we use pl.lastSelectedObj, because there are events outside REACT that can't use the State\n  const [isEditMode, setIsEditMode] = useState(false); // In this app, it's always true\n  \n  const [editParams, setEditParams] = useState( {\n    POSTERLENS_CONTAINER_ID: 'posterlens-container',\n    SCALE_FACTOR : 1.01,\n    ROTATE_DEG : 0.05, // radians. 3.1416 is 180 deg.\n    currentMouse3DPosition: [0,0,0],\n    AUTO_START_EDIT_MODE : 1,\n    isExpertMode: (typeof window.expertMode !== 'undefined')? window.expertMode : true\n  } );\n  const [countRestarts, setCountRestarts] = useState(0); // not important\n  const [info, setInfo] = useState('');\n\n  var refContainer = createRef();\n  var refContainerParent = createRef();\n\n  \n\n\n\n  // React Life cycle. INIT\n  \n  useEffect(() => {\n    console.log('hello from useEffect in App');\n    // create the interactive 3d viewer with posterlens\n    createViewer();\n    setCountRestarts(1); // small helper\n  }, []);\n  \n  // called on init and restart\n  useEffect(() => {\n    // initialize this react plugin to make that viewer interactive.\n    if (window.pl)\n      if (editParams.AUTO_START_EDIT_MODE) \n        setIsEditMode(true);\n  }, [countRestarts]);\n\n  //  a simple msg\n  useEffect( () => {\n    if (info !== '') setTimeout( () => setInfo(''), 2000 );\n  }, [info])\n\n  useEffect( () => {\n    if (!currentObject3D) return;\n    \n    localStorage.setItem('lastSelectedObj.name', currentObject3D.name);\n    // currentObject3D.material.blending = 2;\n  }, [currentObject3D])\n  \n  // Methods helpers\n\n  // x,y,z of mouse inside the 3d world. posterlens has this functions, but it doesnt work if I call it in onmousemove.\n  const reactGetMouse3Dposition = function(event) {\n    if (!window.pl) return\n    const v = window.pl.viewer;\n    if (!v) { console.warn('Cant retrieve mouse pos, not viewer defined'); return; }\n\n    const intersects = v.raycaster.intersectObject( v.panorama, true );\n    if ( intersects.length <= 0 ) return;\n    let i = 0;\n    while ( i < intersects.length ) {\n        if (intersects[i].object.name === 'invisibleWorld') {\n            const point = intersects[i].point.clone();\n            const world = v.panorama.getWorldPosition( new window.THREE.Vector3() );\n            point.sub( world );\n            const currentMP = [ Math.round(point.x.toFixed(2)/2), Math.round(point.y.toFixed(2)/2), Math.round(point.z.toFixed(2)/2) ];\n            setEditParams( Object.assign( {}, editParams, { currentMouse3DPosition: currentMP } ) );\n            return currentMP;        \n            \n        }\n        i++;\n    }\n  }\n  \n  \n  // handlers\n\n    // CALL to posTERLENS\n  function createViewer() {\n    var posterlensConfig = {}\n    if (!data) console.log('data variable not found.')\n    else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n    \n    // load from cache by default\n    var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n//    console.log(retrievedOptions.worlds[0].hotspots[7].rot);\n    posterlensConfig = (retrievedOptions?.worlds) ? retrievedOptions : posterlensConfig;\n    if (!posterlensConfig) {\n      console.error('No data loaded. Cant initialize');\n      return;\n    }\n\n    // CALL POSTERLENS\n    window.pl = document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).posterlens( posterlensConfig );\n    setPlOptions(window.pl.o);\n    window.pl.viewer.panorama.addEventListener('load', () => {\n      // init also selected obj if it was selected before\n      const lso = localStorage.getItem('lastSelectedObj.name');\n      if (lso) {\n        const selObj = window.pl.getObjectByName(lso);\n        if (selObj) setCurrentObject3D(selObj);\n      }\n      // Debug with chrome three inspector.\n      window.scene = window.pl.viewer.getScene();\n\n     if (isEditMode) window.stopAllAnimations(window.pl.viewer);\n\n    });\n  }\n\n  useEffect( () => { \n    window.pl.viewer.editMode = isEditMode;\n  }, [isEditMode]);\n  \n  function restartViewer() {\n    destroyViewer();\n    setPlOptions(null);\n    setIsEditMode(false);\n    delete(window.pl);\n    createViewer();\n    setCountRestarts(countRestarts + 1);\n    // and widgets are rerenderr because its key is associated to countRestarts, so they are loaded ok.\n  }\n\n  // helpers\n  function getOptionsByObject3D(object3D, option = null) {\n    const currentWorldOptions = getCurrentPanoramaParams();\n    let objectData = currentWorldOptions.hotspots.find( ht => ht.name === object3D?.name );\n    if (objectData && option) return objectData[option];\n    return objectData;\n  }\n  function getCurrentPanoramaParams() {\n    return plOptions.worlds.find( w => w.name === window.pl.viewer.panorama.name );\n  }\n  function getCurrentPanoramaParamsIndex() {\n    return plOptions.worlds.findIndex( w => w.name === window.pl.viewer.panorama.name );\n  }\n  // returns all pl with the new worldparmas at the place of the current panorama params\n  function plOptionsReplaceWorldParams(worldParams) {\n    const newOptions = Object.assign({}, plOptions);\n    newOptions.worlds[getCurrentPanoramaParamsIndex()] = {...worldParams};\n    return newOptions;\n  }\n  // returns all pl options replacing the hotspots in current panorama with that name\n  function plOptionsReplaceWorldParamsHotspot(name, objectData) {\n    const currentWorldParams = getCurrentPanoramaParams();\n    const getHotspotIndex   = currentWorldParams.hotspots.findIndex(ht => ht.name === name);\n    if ( getHotspotIndex < 0 ) return;\n    const newHotspots = [...currentWorldParams.hotspots];\n    newHotspots[getHotspotIndex] = objectData;\n    currentWorldParams.hotspots = newHotspots;\n    return plOptionsReplaceWorldParams(currentWorldParams);\n  }\n\n  // updates plOptions (the js object with all the config to load posterlens).\n  // updates the react state and the localstorage (it can be used outside of react)\n  function syncPlOptionsAndLocalStorage(plOptions) {\n    setPlOptions(plOptions);\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    localStorage.setItem('pl.o', exportStr);\n    if (window.onSavePlOptionsCallback) window.onSavePlOptionsCallback(plOptions); // this fn is passed from outside react, and it can be useful\n    return exportStr;\n  }\n\n  // Object 3d in viewer ===> Options in pl.\n  // =======================> Options pl\n  function singleObject3DToParams(object3D) {\n  \n\n    // const worldParams = getCurrentPanoramaParams();\n    // let objectHotspotIndex = worldParams.hotspots.findIndex( ht => ht.name === object3D?.name );\n    // if (objectHotspotIndex < 0 ) {\n    //   // not found, we create it. This will never happen. And if it did , it would be wront. It should create more than a name.\n    //   worldParams.hotspots.push({ name: object3D.name });\n    //   objectHotspotIndex = worldParams.hotspots.length - 1;\n    //   //return;\n    // }\n\n    const objectCurrentParams = getOptionsByObject3D(object3D); // worldParams.hotspots[objectHotspotIndex];\n    const objectNewParams     = {...objectCurrentParams};\n\n    if (!objectCurrentParams) { alert('error: no objectCP'); return; }\n    // pos, scale and rot\n    objectNewParams.pos = [round2(object3D.position.x), round2(object3D.position.y), round2(object3D.position.z)];\n    objectNewParams.rot = [round2(object3D.rotation.x), round2(object3D.rotation.y), round2(object3D.rotation.z)];\n    // if (object3D.name === 'TEST') debugger\n    objectNewParams.scale = round2(object3D.scale.x);\n    // map params from object into options:\n\n    const defaults = { 'opacity': 1, 'animatedMap': 1 }\n    const mapParams = {\n      'opacity': 'material.opacity',\n      'type' : 'type',\n    }\n    \n    // special params for type\n    switch (object3D.type) {\n      case 'pl_text-3d': \n        mapParams.emissive = 'material.emissive';\n        mapParams.transparent = 'material.transparent';\n        break;\n      case 'pl_text-2d-sprite': \n      case 'pl_text-2d': \n        mapParams.color = 'material.color';\n        break;\n      case 'pl_poster3d': \n        // mapParams.animatedMap = 'material.transparent';\n      default:\n      break;\n    }\n\n    // foreach field in the object 3d we save it as an option param\n    Object.keys(mapParams).forEach( option => {\n      const obFields = mapParams[option].split('.');\n      var currentField = object3D; // currentField has the value in the object 3d. ie, for field opacity, it has 0.5\n      obFields.forEach( field => currentField = currentField[field] ); // currentfield = \"resources/img.jpg\"\n      // fix if it's a color (rgb object): convert into string\n      // if (currentField.hasOwnProperty('r') && currentField.hasOwnProperty('g')) currentField = currentField.getHexString();\n      // fix type. In object has prefix pl_\n      if (option==='type') currentField = currentField.replace('pl_', '');\n      // if (option==='background') currentField = currentField? currentField : 'transparent';\n      \n\n      if (currentField === null && objectNewParams.hasOwnProperty(option)) \n        delete(objectNewParams[option]);\n      else {\n        if (defaults.hasOwnProperty(option)) { // save only if it not default\n          if (defaults[option] != currentField) \n            objectNewParams[option] = currentField; // { \"image\" : \"resources/img.jpg\" }\n        } else\n          objectNewParams[option] = currentField;\n      }\n    } );\n\n    // params only in options and not visible from object 3D (we need a panel and an input to edit it)\n    // image, animatedMap, animatedMapSpeed, alwaysLookatCamera, text, hoverText, link\n    \n\n    // update pl with the new options\n    // const newOptions = Object.assign({}, plOptions);\n    // newOptions.worlds[getCurrentPanoramaParamsIndex()].hotspots[objectHotspotIndex] = objectNewParams;\n    const newOptions = plOptionsReplaceWorldParamsHotspot(object3D.name, objectNewParams);\n    syncPlOptionsAndLocalStorage(newOptions);\n    \n    return objectNewParams;\n\n  }\n\n  // when picking up the object iwth mouse or from list of objects.\n  function selectObject(theObj) {\n    if (!theObj) return false;\n    // if (currentObject3D) currentObject3D.material.blending = 1;\n    window.lastSelectedObj = theObj;\n    setCurrentObject3D( theObj );\n    // look at the object, I dont know how to do it\n  }\n\n  // remove from data and in viewer\n  function removeCurrentObject() {\n    if (!currentObject3D) return;\n    const currentWorldOptions = getCurrentPanoramaParams();\n    const currentWorldOptionsIndex = getCurrentPanoramaParamsIndex();\n    let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === currentObject3D.name );\n    let newPlOptionsHotspots = [...currentWorldOptions.hotspots];\n    let hotspotIndex = newPlOptionsHotspots.findIndex( ht => ht.name === currentObject3D.name );\n    newPlOptionsHotspots.splice(hotspotIndex,1); //delte in array\n    const newO = {...plOptions};\n    newO.worlds[currentWorldOptionsIndex].hotspots = newPlOptionsHotspots;\n    syncPlOptionsAndLocalStorage(newO);\n    window.pl.viewer.panorama.remove( currentObject3D );\n    window.pl.viewer.panorama.remove( window.pl.viewer.scene.getChildByName(currentObject3D.name) ); // just in case (somethimes it doesn delete)\n    setCurrentObject3D(null);\n  }\n\n  // clone in data and reload the viewer.\n  function cloneCurrentObject() {\n    if (!currentObject3D) return;\n    const objectCurrentParams = Object.assign({}, getOptionsByObject3D(currentObject3D));\n    const currentWorldParams  = getCurrentPanoramaParams();\n    objectCurrentParams.name = \"cloned_\"+ objectCurrentParams.name;\n    objectCurrentParams.pos = [ objectCurrentParams.pos[0], objectCurrentParams.pos[1] + 50, objectCurrentParams.pos[2]]\n    currentWorldParams.hotspots.push(objectCurrentParams);\n    const newPlOptions = plOptionsReplaceWorldParams(currentWorldParams);\n    syncPlOptionsAndLocalStorage(newPlOptions);\n    // we need to restart the viewer to create it.\n    restartViewer();\n  }\n\n  // shows modal with all the options\n  function exportToTextarea() {\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    var textA = document.createElement( 'textarea' );\n    textA.textContent = exportStr;\n    textA.style.width = '100%'\n    textA.style.height= '500px';\n    window.pl.Modal('Export JSON', textA);\n  }\n\n    // args (inputs) ===> Options data\n    // given name of object and updated fields in the way { link : \"Hall\" }, we update the p.currentObjectData and the worldOptions\n    // in some cases, sync the 3d model with the new data in the case of the name.\n    const updateObjectSingleData = function( name, fields = {}, regenerate = true ) { \n      \n      const currentWorldOptions = getCurrentPanoramaParams();\n      let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === name );\n      if (objectHotspotIndex < 0 ) return;\n      // update the field\n      let objectData = currentWorldOptions.hotspots.find( ht => ht.name === name ); // all fields => { name: '', type: '' ... }\n      objectData = Object.assign({}, objectData, fields );\n      Object.keys(objectData).forEach( k =>  (objectData[k] === null)? delete(objectData[k]) : false ); // cleanup\n      const newPlOptions = plOptionsReplaceWorldParamsHotspot(name, objectData);\n      syncPlOptionsAndLocalStorage(newPlOptions);\n      \n      // regenerate the 3d object (remove and generate)\n      if (regenerate) {\n        const object = window.pl.getObjectByName(name);\n        if (name && window.pl.viewer.panorama && objectData ) {\n          window.pl.viewer.panorama.remove( object );\n          window.pl.createNewObjectFromParams(window.pl.viewer.panorama, objectData); // recreate the 3d in the viewer\n          const newObject = window.pl.getObjectByName(name);\n          setTimeout(()=>selectObject(newObject), 500);\n          \n        }\n        else {        \n          selectObject(object);\n        }\n      }\n  }\n\n\n\n\n  // remove all viewer. I should free up memory before...\n  function destroyViewer() {\n    document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).innerHTML = '';\n  }\n\n  \n\n\n\n\n  return <React.Fragment>\n    { currentObject3D? <ObjectInfo currentObject3D={currentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} editParams={editParams} /> : null }\n    { plOptions? <ListObjects currentObject3D={currentObject3D} plOptions={plOptions} selectObject={selectObject} editParams={editParams}\n                              setCurrentObject3D={setCurrentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} /> : null }\n    <Container className='wrapper border pt-2' style={{ maxWidth:'1200px' }}>\n\n      { plOptions? \n        <Button className=\"btn-sm\" onClick={ e => restartViewer() }> RESET <span className=\"badge\">{countRestarts}</span> </Button>         : null } \n      { !isEditMode? \n        <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ setIsEditMode(!isEditMode) }>Start Edit Mode</Button> : null } \n      { plOptions? \n        <Button className=\"btn btn-danger btn-sm\" onClick={ (e) => { localStorage.setItem('pl.o', null); restartViewer(); }  }>Clear cache </Button> : null }\n\n        <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ () => exportToTextarea() }>Export</Button>\n\n        { currentObject3D? \n        <Button className=\"btn btn-danger btn-sm\" onClick={ removeCurrentObject }>Delete</Button> : null }\n        { currentObject3D? \n        <Button className=\"btn btn-success btn-sm\" onClick={ cloneCurrentObject }>Clone</Button> : null }\n\n        <Button variant=\"outline-secondary btn-sm ml-3\" onClick={ (e)=> setAppMode('demo') }>Demo</Button>\n\n      <Row className=\"no-gutters\" >\n        <Col sm={12}>\n          <div onMouseMove={ event => { reactGetMouse3Dposition(event); } } ref={refContainerParent}>\n           <div  id={editParams.POSTERLENS_CONTAINER_ID} className='posterlens-container' ref={refContainer}> </div>\n          </div>\n        </Col>\n        { isEditMode? \n                   <EditObject2 plOptions={plOptions} isEditMode={isEditMode} editParams={editParams} currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} reactGetMouse3Dposition={reactGetMouse3Dposition} \n                                singleObject3DToParams={singleObject3DToParams} setInfo={setInfo} updateObjectSingleData={updateObjectSingleData}\n                                getCurrentPanoramaParams={getCurrentPanoramaParams} selectObject={selectObject} getOptionsByObject3D={getOptionsByObject3D}\n                                appAsWidget={appAsWidget}  />\n                : null }\n      </Row>\n\n\n      \n\n      \n      \n      {/* <Button className=\"btn-warning\" onClick={ () => localStorage.setItem('worldOptions', JSON.stringify(worldOptions))  }>Update</Button> */}\n      <div className='info' style={ {color: 'red'} }>{ info }</div>\n\n      \n\n      { isEditMode? <Widgets plOptions={plOptions} isEditMode={isEditMode} setIsEditMode={setIsEditMode}  \n                              setCurrentObject3D={setCurrentObject3D} plOptions={plOptions} singleObject3DToParams={singleObject3DToParams}\n                              refContainer={refContainer}\n                              key={countRestarts} restartViewer={restartViewer} \n                              plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                              getCurrentPanoramaParams={getCurrentPanoramaParams} setPlOptions={setPlOptions}\n                              \n                              \n                              /> : null }\n    </Container>\n    </React.Fragment>\n}\n","// This is the call of the React APP.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\n/* Variables that can be set from the outside:\n  window.appAsWidget = true;\n  window.expertMode = false;\n  window.plImgPath = 'http:// ... ' (not neccessary in appAsWidget mode)\n  window.basePath = 'http://' or 'relative/path/' (needed to show the Widgets imgs, for example) \n  window.onSavePlOptionsCallback = function(plOpts) { ... whatever you want to do }\n*/\nconst containers = document.querySelectorAll('.wrapper-posterlens-edit-container');\ncontainers.forEach( (el,i)=>{\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    el\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}