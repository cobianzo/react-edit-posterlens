{"version":3,"sources":["components/App.js","components/AppDemoPosterlens.js","components/InputImage.js","components/InputData.js","components/EditObject2.js","components/ListObjects.js","components/Widgets.js","helpers.js","components/ObjectInfo.js","components/PanoInfo.js","components/AppEditPosterlens.js","index.js"],"names":["App","useEffect","console","log","window","PANOLENS","THREE","eval","stopAllAnimations","isAppAsWidget","appAsWidget","isEditModeDefault","location","hash","useState","setAppAsWidget","appMode","setAppMode","data","AppDemoPosterlens","refContainer","createRef","retrievedOptions","JSON","parse","localStorage","getItem","worlds","error","pl","document","querySelector","posterlens","viewer","panorama","addEventListener","panolensPanoInstance","scene","getScene","createViewer","className","onDoubleClick","onClick","id","ref","InputImage","p","infoAttr","setInfoAttr","pickupImageMode","setPickupImageMode","handlePickupImg","e","target","src","value","wrapperUpdateObjectSingleData","removeEventListener","handleCancelPickupImage","setTimeout","event","keyCode","InputGroup","Prepend","Text","input","label","Append","option","Button","variant","getOptionsByObject3D","currentObject3D","Input","theValue","deleteIfValue","fieldPair","scale","x","updateObjectSingleData","name","type","extensions","dims","minWidth","maxWidth","minHeight","maxHeight","onChange","base64","imgPath","onError","errMsg","alert","onSubmit","preventDefault","currentTarget","sync-3d","FormControl","as","defaultValue","Form","Check","step","Group","sync-default","defaultChecked","checkedValue","checked","uncheckedValue","key","options","Object","keys","map","viewInput","EditObject2","plImgPath","setImgPath","refImgPathInput","v","renderer","domElement","handlerPickupObject","selectedObj","newPos","reactGetMouse3Dposition","Vector3","normalize","multiplyScalar","distance","y","z","setObjectPos","handlerDropObject","handlerScaleRotateObject","plOptions","isEditMode","shiftIsPressed","intersects","raycaster","intersectObject","theObj","object","startsWith","camera","position","distanceTo","OrbitControls","enabled","originalPos","selectObject","singleObject3DToParams","lastSelectedObj","ctrlKey","set","editParams","SCALE_FACTOR","rotateZ","ROTATE_DEG","rotateY","rotateX","z_move","constructor","setInfo","setCurrentObject3D","waitSave","clearTimeout","object3D","direction","offset","clone","warn","panoList","forEach","world","inputs","active","Container","Row","currentPanoParams","getCurrentPanoramaParams","initialLookAt","getCameraDirection","initialFov","fov","newOptions","plOptionsReplaceWorldParams","syncPlOptionsAndLocalStorage","current","inputsCol","col_i","Col","sm","i","includes","width","basePath","ListObjects","init","setInit","hotspots","element","getObjectByName","isExpertMode","Fragment","join","Math","round","currentMouse3DPosition","objectsToPopupWhenVisible","k","min","max","Widgets","el","classList","add","isWidgetsInit","setIsWidgetsInit","Array","from","appendControlItem","style","backgroundImage","float","onTap","initNewObject","newObj","objectData","group","justCreatedBtn","countResets","params","floor","random","pos","values","getWorldDirection","image","defaultPosterImg","posterSphere","text","fontFamily","callbackFn","mesh","createNewObjectFromParams","worldParams","push","newPlOptions","setPlOptions","round2","fl","numb","toFixed","ObjectInfo","isOpen","setIsOpen","currentObjectOptions","find","ht","rotation","alwaysLookatCamera","objectOptions","lines","stringify","split","jsx","line","currentObjectOptionsJSX","currentPanoOptions","currentPanoOptionsJSX","AppEditPosterlens","setIsEditMode","POSTERLENS_CONTAINER_ID","AUTO_START_EDIT_MODE","expertMode","setEditParams","countRestarts","setCountRestarts","info","refContainerParent","setItem","querySelectorAll","formEl","getAttribute","inputDefault","length","point","getWorldPosition","sub","currentMP","assign","posterlensConfig","o","lso","selObj","restartViewer","innerHTML","currentWorldOptions","w","getCurrentPanoramaParamsIndex","findIndex","plOptionsReplaceWorldParamsHotspot","currentWorldParams","getHotspotIndex","newHotspots","exportStr","onSavePlOptionsCallback","objectCurrentParams","objectNewParams","rot","defaults","mapParams","emissive","transparent","color","obFields","currentField","field","replace","hasOwnProperty","editMode","textA","createElement","textContent","height","Modal","exportToTextarea","currentWorldOptionsIndex","newPlOptionsHotspots","hotspotIndex","splice","newO","remove","getChildByName","onMouseMove","fields","regenerate","objectHotspotIndex","newObject","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.69ec3e9c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport AppDemoPosterlens from './AppDemoPosterlens';\nimport AppEditPosterlens from './AppEditPosterlens';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default function App() {\n  \n  /* Retrieving possible variables from outside the App */\n  /* ------------------------ --------------------------- */\n  useEffect( () => {\n    console.log(`THREE and PANOLENS: ${window.PANOLENS}`,window.THREE);\n    window.THREE = eval('THREE');\n    window.PANOLENS = eval('PANOLENS');\n    window.stopAllAnimations = window.stopAllAnimations;\n  }, []);\n\n  const isAppAsWidget       = window.appAsWidget? true : false; // when we use it in Wordpress, in a page, then it's a widget app\n  const isEditModeDefault = window.location.hash === '#edit' || isAppAsWidget;\n  const [appAsWidget, setAppAsWidget] = useState(isAppAsWidget);\n  const [appMode, setAppMode] = useState(isEditModeDefault? 'edit' : 'demo');\n  \n  var data = window.data; // defined outside react, in the html calling this app\n  /* ------------------------ --------------------------- */\n\n  return appMode === 'edit' ?  <AppEditPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} /> : \n                               <AppDemoPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} />;\n  \n}","import React, {useEffect, createRef} from 'react'\n\nfunction AppDemoPosterlens( { data, setAppMode, appAsWidget } ) {\n    \n    var refContainer = createRef();\n\n    useEffect(() => {\n        console.log('hello from useEffect in App');\n        // create the interactive 3d viewer with posterlens\n        createViewer(data);\n      }, []);\n\n    // CALL to posTERLENS\n    function createViewer(data) {\n        var posterlensConfig = {}\n        if (!data) console.log('data variable not found.')\n        else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n            \n        // load from cache by default\n        var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n\n        data = (retrievedOptions?.worlds) ? retrievedOptions : data;\n        if (!data) {\n        console.error('No data loaded. Cant initialize');\n        return;\n        }\n\n        // CALL POSTERLENS\n        window.pl = document.querySelector('#posterlens-container').posterlens( data );\n        window.pl.viewer.panorama.addEventListener('load', (panolensPanoInstance) => {\n            console.log(`🎉🎉🎉🎉🎉🎉🎉🎉`, panolensPanoInstance);\n        });\n        window.scene = window.pl.viewer.getScene();\n    }\n\n\n\n    return (\n        <div className='container'>\n            <h1 onDoubleClick={()=> setAppMode('edit')} >Demo  \n                { appAsWidget? \n                    <button className='btn btn-sm btn-primary' onClick={ ()=> setAppMode('edit') }>Back</button>\n                    : null }\n            </h1> \n            <div className='posterlens-container' id='posterlens-container' ref={refContainer}></div>\n        </div>\n    )\n}\n\nexport default AppDemoPosterlens\n","import React, {useState, useEffect} from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction InputImage( p ) {\n\n    // p : the props obj. \n    // @p.input (option, label)\n\n    // Local State\n    const [infoAttr, setInfoAttr] = useState(''); // a little message saying \"updating\", \"saved\" to the user\n    \n    // tool to fillup an image input by selecting an image in the screen.\n    const [pickupImageMode, setPickupImageMode] = useState(false);\n\n    // watch the activation of the mode \"pickup image in screen\"\n    useEffect(() => {\n        if (! pickupImageMode) return;\n        setInfoAttr('Pick up an image in the screen');\n        const handlePickupImg = (e) => {\n            if (e.target?.src) {\n                const value = e.target.src; // I tried using refs but here it doesnt read them\n                p.wrapperUpdateObjectSingleData(value);\n\n                // remove events to normal\n                setPickupImageMode(false);\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n                setInfoAttr(\"Image selected\"); setTimeout( () => setInfoAttr(''), 3000 );\n            }\n        };\n        const handleCancelPickupImage = function(event) {\n            if(event.keyCode === 27){ // clicking ESC\n                setPickupImageMode(false);\n                setInfoAttr(\"Cancelled\"); setTimeout( () => setInfoAttr(''), 3000 );\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n           }\n        };\n        document.addEventListener('click', handlePickupImg, 'pickupImg' );\n        document.addEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );\n        \n    }, [pickupImageMode]);\n    \n\n    \n\n  return (\n    \n        <InputGroup>\n\n            <InputGroup.Prepend>\n                <InputGroup.Text>\n                    { p.input.label }\n                </InputGroup.Text>\n            </InputGroup.Prepend>\n            <InputGroup.Append onClick={ (e) => { setPickupImageMode(p.input.option) } }>\n                <InputGroup.Text>\n                    { pickupImageMode? 'select an image' : <Button variant=\"primary\">Pick image</Button> }\n                </InputGroup.Text>\n            </InputGroup.Append>\n\n                <InputGroup.Append>\n                    <InputGroup.Text>\n                        {p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                    </InputGroup.Text>\n                </InputGroup.Append>\n                <span className=\"text-light bg-dark\">{ infoAttr }</span>\n        </InputGroup>\n\n  );\n}\n\nexport default InputImage;\n","import React from 'react'\n\nimport Button from 'react-bootstrap/Button';\n\nimport InputImage from './InputImage';\nimport { FilePicker } from 'react-file-picker'\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\n\nexport default function Input(p) {\n\n    // udpated fied p.input.option with the value. Some fields have special treatment\n    const wrapperUpdateObjectSingleData = function (value) {\n        let theValue = value === p.input.deleteIfValue ? null : value; // with this we will remove the option from the params.\n        const fieldPair = { [p.input.option] : theValue };\n        // special fields that need special treatment\n        if ( p.input.option === 'background' && theValue === '' ) fieldPair[p.input.option] = 'transparent'; // no bg color => background: 'transparent'\n        if ( p.input.option === 'sprite' && theValue === true ) fieldPair.scale = p.currentObject3D.scale.x * 10; // if we convert into sprite we better scale or it will look tiny\n        if ( p.input.option === 'sprite' && !theValue ) fieldPair.scale = p.currentObject3D.scale.x / 10; // the other way as well.\n        p.updateObjectSingleData( p.currentObject3D.name, fieldPair);\n    }\n\n    const viewInput = function() {\n        switch (p.input.type) {\n            case \"image-pick\":\n                return <InputImage input={p.input} currentObject3D={p.currentObject3D} getOptionsByObject3D={p.getOptionsByObject3D}\n                                    wrapperUpdateObjectSingleData={wrapperUpdateObjectSingleData} />\n            case \"image\": // not in use I think\n                return <InputGroup >\n                    <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FilePicker \n                extensions={['jpg', 'jpeg', 'png', 'gif', 'svg']}\n                dims={{minWidth: 100, maxWidth: 2500, minHeight: 100, maxHeight: 2500}}\n                onChange={base64 => p.updateObjectSingleData( p.currentObject3D.name, { [p.input.option]: p.imgPath+base64.name}) }\n                onError={ errMsg => alert(errMsg) }\n            >\n                <Button variant='primary'>\n                Select image\n                </Button >\n                </FilePicker>\n                <Button variant='danger' onClick={ (e) => { wrapperUpdateObjectSingleData(null) } }>\n                    Clear\n                </Button >\n                <InputGroup.Append> <InputGroup.Text>{p.getOptionsByObject3D(p.currentObject3D, p.input.option)}</InputGroup.Text></InputGroup.Append>\n                </InputGroup>\n            case \"input\":\n                return <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                                sync-3d={p.input.option}\n                        >\n                    <InputGroup>\n                        <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                        <FormControl as='input' defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)}  />\n                        <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                    </InputGroup>\n                </form>\n            case \"number\":\n                return  <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                                sync-3d={p.input.option} >\n                            <InputGroup>\n                                <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                                <Form.Check type=\"number\" step={ p.input.step?? 1 }\n                                    defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)} />\n                                <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                            </InputGroup>\n                        </form>\n            case \"checkbox\":\n                return <Form.Group sync-3d={p.input.option} sync-default={p.input.deleteIfValue? \"true\" : \"false\"} >\n                <Form.Check type=\"checkbox\" label={p.input.label + `(${p.getOptionsByObject3D(p.currentObject3D, p.input.option)})`}\n                            defaultChecked={p.getOptionsByObject3D(p.currentObject3D, p.input.option) === p.input.checkedValue() || p.input.deleteIfValue === p.input.checkedValue() }\n                                onChange={ (e) => {\n                                    const value = e.currentTarget.checked? p.input.checkedValue(p.currentObject3D) : p.input.uncheckedValue(p.currentObject3D) ;\n                                    wrapperUpdateObjectSingleData(value);                                            \n                                } } />\n                </Form.Group>\n            case \"select\":\n                return <InputGroup sync-3d={p.input.option}>\n                     <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FormControl as='select' defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                                        onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) } >\n                                <option key='nothing' value='' >---</option>\n                                {   \n                                    (typeof p.input.options === 'object') ? Object.keys(p.input.options)?.map( option => { \n                                        return <option key={option} value={ p.input.options[option] } >{ option }</option>\n                                    }) : null\n                                }\n                    </FormControl>\n                    <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n            default:\n            break;\n        }\n    }\n\n    return viewInput();\n}\n","import React, {useEffect, useState, createRef} from 'react';\n\n// the <inputs ...\nimport InputData from './InputData';\n\n// bootstrap 4 elements\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/esm/Button';\n\nfunction EditObject2( p ) {\n\n    const [imgPath, setImgPath] = useState( window.plImgPath?? 'resources/'); // imgs for 3d textures\n    const refImgPathInput = createRef();\n\n    // Important note. Inside a new EventListener, we can't access to updated props. The props will always have the initial value\n    // That's why I use window.selectedObj instead of p.currentObject3D, to access to the lastest Position.\n\n    // triggered on load, only once.\n    useEffect(() => { \n        if (!window.pl) return;\n        console.log('pl updated in edit', window.pl);\n        const v = window.pl.viewer;\n        v.renderer.domElement.addEventListener('mousedown', (event) => { handlerPickupObject(event) });\n\n        // --- move object \n        v.renderer.domElement.addEventListener('mousemove', function (event) {\n            if (!window.selectedObj) return;\n            let newPos = p.reactGetMouse3Dposition(event, window.pl);\n            if (!newPos) return;\n            const v = new window.THREE.Vector3(...newPos).normalize().multiplyScalar(window.selectedObj.distance);\n            newPos = [v.x, v.y, v.z];\n            window.pl.setObjectPos(window.selectedObj, newPos);\n        });\n        v.renderer.domElement.addEventListener('mouseup', (event) => { handlerDropObject(event) });\n        document.addEventListener('keydown', (event) => { handlerScaleRotateObject(event) } );\n        \n    }, [p.plOptions] );\n\n    // --- pickup object \n    const handlerPickupObject = (event) => {\n        if ( !p.isEditMode ) return;\n        if (window.pl.shiftIsPressed) return;\n\n        const v = window.pl.viewer;\n        \n        const intersects = v.raycaster.intersectObject( v.panorama, true );\n        const theObj = intersects[0]? intersects[0].object : null ;\n        if (!theObj.type?.startsWith('pl_')) return;\n\n        theObj.distance = v.camera.position.distanceTo(theObj.position);\n        window.selectedObj = theObj;\n        console.log('Edit Object cLicked', window.selectedObj.name);\n        \n        v.OrbitControls.enabled = false;\n        window.selectedObj.originalPos = window.selectedObj.position;                \n        \n        // State: assign lastSelectedObj and update state currentObject3D\n        p.selectObject(theObj);\n    }\n\n    // --- drop object \n    const handlerDropObject = (event) => {  \n        if ( !p.isEditMode || !window.selectedObj) return;\n        if (!window.selectedObj.type.startsWith('pl_')) return;\n        const v = window.pl.viewer;\n        v.OrbitControls.enabled = true;\n        // p.singleObject3DToParams(window.selectedObj);\n        p.singleObject3DToParams(window.selectedObj);\n        window.selectedObj = null;\n    };\n\n    const handlerScaleRotateObject = function(event) {\n        // we cant use the state currentObject3D, because it will not get the latest value. It will be initialzied to the time of creation og this handler\n        if (!window.lastSelectedObj) return;\n        if (event.ctrlKey) {\n            switch (event.key) {\n                case '+': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z * p.editParams.SCALE_FACTOR );      break;\n                case '-': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z / p.editParams.SCALE_FACTOR );      break;\n                case 'r': window.lastSelectedObj.rotateZ(p.editParams.ROTATE_DEG);  break;\n                case 't': window.lastSelectedObj.rotateZ(-p.editParams.ROTATE_DEG);  break;\n                case 'f': window.lastSelectedObj.rotateY(p.editParams.ROTATE_DEG);  break;\n                case 'g': window.lastSelectedObj.rotateY(-p.editParams.ROTATE_DEG);  break;\n                case 'v': window.lastSelectedObj.rotateX(p.editParams.ROTATE_DEG);  break;\n                case 'b': window.lastSelectedObj.rotateX(-p.editParams.ROTATE_DEG);  break;\n                case '4': z_move(window.lastSelectedObj, 'close'); break;\n                case '5': z_move(window.lastSelectedObj, 'far'); break;\n                default:\n                    break;\n            }\n            if (event.key === 'r' || event.key === 't' || event.key === 'f' || event.key === 'g' || event.key === 'v' || event.key === 'b') {\n                if (window.lastSelectedObj.constructor.name === 'Infospot') // deprecated\n                    p.setInfo('Sprite object cannot be rotated'); \n            }\n            p.setCurrentObject3D(window.lastSelectedObj);\n            if (window.waitSave) {\n                clearTimeout(window.waitSave);\n                window.waitSave = setTimeout( () => {\n                    p.singleObject3DToParams(window.lastSelectedObj);\n                    clearTimeout(window.waitSave);\n                    p.setInfo('updated');\n                }, 500);\n            }\n            \n        }\n    }\n\n    // move an object closer or farther from the camera.\n    function z_move(object3D, direction = 'close'){\n        let offset = 1.02;\n        if (direction === 'close') offset = 1/offset;\n                    \n        var newPos = object3D.position.clone();\n        newPos.x *= offset; newPos.y *= offset; newPos.z *= offset;\n        const distance = window.pl.viewer.camera.position.distanceTo(newPos);\n        if ( (direction !== 'close' && distance > 500) || (direction === 'close' && distance < 40)) {\n            console.warn('we cant move that limit. Its out of 40 - 500m');\n            return\n        }\n        window.pl.setObjectPos(object3D, [newPos.x, newPos.y, newPos.z]);\n    }\n\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n    p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );\n    const inputs = [\n        [\n            { option: 'image', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Img', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'alpha', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Alpha', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'text', type: 'input', label:'Text', active: [ 'pl_text-2d', 'pl_text-3d'] },\n            \n            { option: 'background', type: 'input', label:'bg color (#ffffff)', active: [ 'pl_text-2d' ] },\n            { option: 'alwaysLookatCamera', type: 'checkbox', label:'alwaysLookatCamera', checkedValue: () => true, uncheckedValue: () => false, active: [ 'pl_text-2d', 'pl_text-3d', 'pl_poster3d' ], deleteIfValue: true },\n            { option: 'sprite', type: 'checkbox', label:'sprite 2D', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'posterSphere', type: 'checkbox', label:'is sphere', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'link', type: 'select', options: panoList, label:'Go to pano', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n            { option: 'modal', type: 'input', label:'modal', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'], deleteIfValue:'' },\n            { option: 'opacity', type: 'number', step: 0.05, label:'Opacity', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '1' },\n        ],\n        [\n        { option: 'animatedMap', type: 'number', label:'frames animation map', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'animatedMapSpeed', type: 'number', label:'speed', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'rotationX', type: 'number', label:'Rotate anim X', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationY', type: 'number', label:'Rotate anim Y', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationZ', type: 'number', label:'Rotate anim Z', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'animated', type: 'select', label:'Glow animation', options: { 'always' : 'always', 'only on hover' : 'hover' }, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'popupWhenVisible', type: 'number', step: 10, label:'Pops up when in camera', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        ]\n    ];\n    return (\n      <Container className=\"edit-panel\">\n        { /* The name of the object */}\n        {p.currentObject3D? \n        <Row>\n            <InputData   input={ { option: 'name', type: 'input', label:'NAME', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            imgPath={imgPath}\n                            updateObjectSingleData={p.updateObjectSingleData} \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} />\n        </Row> : null }\n\n        <Button variant=\"primary\" className='float-right' onClick={ (e)=> {                 \n            const currentPanoParams =  p.getCurrentPanoramaParams();\n            currentPanoParams.initialLookAt = window.pl.getCameraDirection('lookatPoint');\n            currentPanoParams.initialFov = window.pl.viewer.camera.fov;\n            const newOptions = p.plOptionsReplaceWorldParams(currentPanoParams);\n            p.syncPlOptionsAndLocalStorage(newOptions);\n         } }>Set camera view</Button>\n        \n\n        { /* The imgs path (not needed anymore) */}\n        { !p.appAsWidget?\n        <InputGroup>\n            <InputGroup.Prepend> <InputGroup.Text>imgs path</InputGroup.Text></InputGroup.Prepend>\n            <FormControl as='input' defaultValue={imgPath} ref={refImgPathInput} \n                        onChange={ (e) => refImgPathInput.current? setImgPath(refImgPathInput.current.value) : null } />\n            <InputGroup.Append><InputGroup.Text> {imgPath} </InputGroup.Text> </InputGroup.Append>\n        </InputGroup> : null }\n\n        <Row>\n            {\n                inputs.map( (inputsCol, col_i) => {\n                    return <Col sm='6' key={'column-'+col_i}>\n                        { \n                            inputsCol.map( (input, i) => {\n                                if ( !p.currentObject3D ) return null;\n                                if ( !input.active.includes(p.currentObject3D.type) ) return null;\n                                return <InputData   input={input} imgPath={imgPath} key={'input-'+i}\n                                                    updateObjectSingleData={p.updateObjectSingleData} \n                                                    currentObject3D={p.currentObject3D}\n                                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                            } )\n                        }\n                    </Col>\n                })\n            }\n        </Row>\n        \n        <img width='50' src={ window.basePath+'resources/arboles.png' } />\n      </Container>        \n  );\n}\n\nexport default EditObject2;\n","import React, {useState, useEffect} from 'react'\n\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\n\nexport default function ListObjects(p) {\n    const [init, setInit] = useState(null);\n    useEffect(() => {\n        console.log('🚴🏼‍♀️Hello from ListObjects')\n        setInit(p.getCurrentPanoramaParams());\n    }, [p.plOptions])\n\n    const getObjectsShowWhenVisible = function() {\n        if (!window.pl) return 'not loaded';\n        if (!window.pl.viewer.panorama.objectsToPopupWhenVisible) return 'none';\n        const jsx = <div> {Object.keys(window.pl.viewer.panorama.objectsToPopupWhenVisible).map( k=>{\n            const [min,max] = window.pl.viewer.panorama.objectsToPopupWhenVisible[k];\n            return <p key={k}>{k} : {min}º, {max}º</p>;\n        })} </div>\n        return jsx;\n    }\n    return (\n        <Col className='list-objects' sm='2'>\n            List Hotposts in Pano Options\n            {init && p.plOptions?.worlds ? \n            <ul>\n                { init.hotspots.map((element,i) => {\n                    return <li key={i} onClick={ () => {\n                        // get object 3d\n                        const theObj = window.pl.getObjectByName(element.name);\n                        p.selectObject(theObj);\n                    }} className={ (p.currentObject3D?.name === element.name )? 'active' : '' }>\n                        {element.name} <small>{element.type}</small>\n                    </li>\n                })}\n            </ul>\n            : null }\n\n           <br/> { /** curiously this works, I dont need to use any State, it works ok with the pl object fn. \n                    *    It is because of the mousemove event in App.js. It makes recalculate this component aparently\n                    */}\n            { p.editParams.isExpertMode? <React.Fragment>\n                Camera: { window.pl? window.pl.getCameraDirection('lookatPoint').join(', ')  : null }\n                <br/>\n                Angle: { window.pl? Math.round(window.pl.getCameraDirection('rad') * 100)/100 : null }\n                    rad :: { window.pl? Math.round(window.pl.getCameraDirection('deg')) : null }º\n                    <br/>\n                    Fov: { window.pl? window.pl.viewer.camera.fov : null }\n                    <br/>\n                    MousePos: { p.editParams.currentMouse3DPosition.join(', ') }\n                    <br/>\n                    <br/>\n                    <i>panorama.objectsToPopupWhenVisible:</i> { init? getObjectsShowWhenVisible() : null }\n            </React.Fragment> : null }\n        </Col>\n    )\n}\n","import {useEffect, useState} from 'react';\n\n\nfunction Widgets( p ) {\n\n    const v = window.pl?.viewer;\n    if (window.pl?.el)\n        window.pl.el.querySelector('div:last-child').classList.add('pl-widgets');\n\n    const [isWidgetsInit, setIsWidgetsInit ] = useState(false);\n    const initWidgets = function() {\n        if (isWidgetsInit) return;\n        setIsWidgetsInit(true);\n        if (typeof window.basePath === 'undefined') window.basePath = './';\n        // Widgets\n        // Create poster buttons. One for every type.\n        Array.from([ /*'link', */\n                    // 'poster-sprite', // type poster3d + sprite = true\n                    'poster3d',\n                    'poster3d-sphere', // type poster3d + posterSphere = true\n                    'text-3d', // doesnt work\n                    'text-2d',\n                   // 'text-2d-sprite' // type text-2d + sprite = true \n            ] ).forEach( type => {\n                v.appendControlItem({\n                    id: 'edit-controls',\n                    style: {\n                        backgroundImage: 'url('+window.basePath+'resources/widget-'+type+'.png)',\n                        float: 'left'\n                    },    \n                    onTap: () => { \n                        const { newObj, objectData } = initNewObject( type );\n                        console.log('Created new obj: ', { newObj, objectData })\n                    },\n                    group: 'editmode'\n                });\n                //shabby way to add a class to this btn. (panolens doesnt do it)\n                const justCreatedBtn = window.pl.el? window.pl.el.querySelector('.pl-widgets > span:last-child') : null;\n                if (justCreatedBtn) justCreatedBtn.classList.add('widget-btn-'+type);\n                \n        })\n    }\n    useEffect(() => {\n        console.log('Hellow from widgets');\n        if (window.pl && p.isEditMode) \n            //if (!p.pl.viewer.widget) \n                initWidgets() // TODO: if deactivate and reactivate the editmode, the widgets are created again (duplicated)\n                // we can use pl.viewer.widget.barElement.remove() when deactivated to delete the previous ones. But ideally we could avoid calling this init if they exist.\n    }, [p.countResets]);\n\n\n\n    const initNewObject = function(type = 'poster3d') {\n        // get Scene by name:\n        const params = {\n            name:  `new_${type}_` + Math.floor(Math.random() * 10000),\n            type: type,\n            pos: Object.values(v.camera.getWorldDirection(new window.THREE.Vector3()).multiplyScalar(300)), // this normalizes but not to unitary, but to 300 long\n        }\n        switch (type) {\n            // case 'link': break;\n            case 'poster3d':    // with window.defaultPosterImg we can set up a default img on creation, from outside react.\n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n            break;\n            case 'poster3d-sphere': \n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n                params.type = 'poster3d';\n                params.posterSphere = true;\n            break;\n            //  case 'poster-sprite': \n            //     params.type = 'poster3d';\n            //     params.sprite = true; \n            //     break;\n            case 'text-2d': \n                params.text = \"New text\"; \n                break;\n            // case 'text-2d-sprite': \n            //     params.type = 'text-2d';\n            //     params.sprite = true; \n            //     params.text = \"New text\"; \n            //     break;\n            case 'text-3d': // doesnt work\n                params.type = 'text-3d';\n                params.fontFamily = window.basePath+'resources/fonts/Century_Gothic_Regular.js';\n                params.text = \"New text\";\n                break;\n            default: break;\n        }\n\n        // posterlens fn\n        // update states object 3d in viewer & object params for posterlens\n        params.callbackFn = mesh => p.setCurrentObject3D(mesh);        \n        window.pl.createNewObjectFromParams(v.panorama, params);\n\n        \n        // update the option settings\n        let worldParams = p.getCurrentPanoramaParams();\n        worldParams.hotspots.push(params);\n        const newPlOptions = p.plOptionsReplaceWorldParams(worldParams);\n        p.setPlOptions(newPlOptions);\n        \n        \n        \n        return params;\n    }\n\n  // its all vanilla js, connecting with panolens. No HTML\n  return (\n    null\n  );\n}\n\nexport default Widgets;\n","export function round2(fl) { \n    var numb = fl;\n    if (typeof numb === 'number')\n     numb = numb.toFixed(2);\n    return numb;\n    //return 0.001;\n }\n","import React, {useState} from 'react'\nimport {round2} from '../helpers';\n\nexport default function ObjectInfo(p) {\n\n    // State\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n\n    // info in a panel of the object. Gets updated when the currentObject3D updates. It means , when it's clicked for instance.\n    function currentObjectOptions() {\n        if (!p.currentObject3D) return;\n        const worldParams = p.getCurrentPanoramaParams();\n        let objectOptions = worldParams.hotspots.find( ht => ht.name === p.currentObject3D?.name );\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentObjectOptionsJSX() {\n        const objectOptions = currentObjectOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <h4>{p.currentObject3D?.name}<small> ({p.currentObject3D?.type})</small></h4>\n\n            <div className={ isOpen? 'd-block' : 'd-none' }>\n                \n                Pos: {round2(p.currentObject3D?.position.x)} {round2(p.currentObject3D?.position.y)} {round2(p.currentObject3D?.position.z)}\n                <br/>\n                Rot: x {round2(p.currentObject3D?.rotation.x)} / y {round2(p.currentObject3D?.rotation.y)} / z {round2(p.currentObject3D?.rotation.z)}\n                { currentObjectOptions()?.alwaysLookatCamera? '(alwayslookatcamera)' : null }\n                <br/>\n                Scale: {round2(p.currentObject3D?.scale.x)} {round2(p.currentObject3D?.scale.y)} {round2(p.currentObject3D?.scale.z)}\n            \n            \n                <React.Fragment>\n                <br/>\n                <b>Object Info in options:</b> <br/>\n                {currentObjectOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n}\n","import React, {useState} from 'react'\nimport {round2} from '../helpers';\n\nexport default function ObjectInfo(p) {\n\n    // State\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n\n    // info in a panel of the panorama.\n    function currentPanoOptions() {\n        const worldParams = p.getCurrentPanoramaParams();\n        if (!worldParams) return;\n        let objectOptions = {... worldParams }\n        delete(objectOptions.hotspots)\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentPanoOptionsJSX() {\n        const objectOptions = currentPanoOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <div className={ isOpen? 'd-block' : 'd-none' }>            \n                <React.Fragment>\n                    <br/>\n                    <b>Panorama in options:</b> <br/>\n                    {currentPanoOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n}\n","import React, {useState, useEffect, createRef} from 'react';\nimport EditObject2 from './EditObject2';\nimport ListObjects from './ListObjects';\nimport Widgets from './Widgets';\nimport ObjectInfo from './ObjectInfo';\nimport PanoInfo from './PanoInfo';\nimport {round2} from '../helpers';\n\n// Bootstrap 4\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport default function AppEditPosterlens( { data, setAppMode, appAsWidget } ) {\n  \n  // React states and refs\n  const [plOptions, setPlOptions] = useState(); // IMPORTANT. The goal of all this app is to generate these options. With them we can call posterlens to createa  tour.\n  const [currentObject3D, setCurrentObject3D] = useState(null); // The current THREEjs selected object. Sometimes we use pl.lastSelectedObj, because there are events outside REACT that can't use the State\n  const [isEditMode, setIsEditMode] = useState(false); // In this app, it's always true\n  \n  const [editParams, setEditParams] = useState( {\n    POSTERLENS_CONTAINER_ID: 'posterlens-container',\n    SCALE_FACTOR : 1.01,\n    ROTATE_DEG : 0.05, // radians. 3.1416 is 180 deg.\n    currentMouse3DPosition: [0,0,0],\n    AUTO_START_EDIT_MODE : 1,\n    isExpertMode: (typeof window.expertMode !== 'undefined')? window.expertMode : true\n  } );\n  const [countRestarts, setCountRestarts] = useState(0); // not important\n  const [info, setInfo] = useState('');\n\n  var refContainer = createRef();\n  var refContainerParent = createRef();\n\n  \n\n\n\n  // React Life cycle. INIT\n  \n  useEffect(() => {\n    console.log('hello from useEffect in App');\n    // create the interactive 3d viewer with posterlens\n    createViewer();\n    setCountRestarts(1); // small helper\n  }, []);\n  \n  // called on init and restart\n  useEffect(() => {\n    // initialize this react plugin to make that viewer interactive.\n    if (window.pl)\n      if (editParams.AUTO_START_EDIT_MODE) \n        setIsEditMode(true);\n  }, [countRestarts]);\n\n  //  a simple msg\n  useEffect( () => {\n    if (info !== '') setTimeout( () => setInfo(''), 2000 );\n  }, [info])\n\n  useEffect( () => {\n    if (!currentObject3D) return;\n    \n    localStorage.setItem('lastSelectedObj.name', currentObject3D.name);\n    \n    // Object 3D ====> Inputs\n    const options = getOptionsByObject3D(currentObject3D);\n    const formsSync = document.querySelectorAll('[sync-3d]');\n    formsSync.forEach( formEl => {\n      const option = formEl.getAttribute('sync-3d');\n      let value = (typeof options[option] !== 'undefined' )? options[option] : '';\n      let inputDefault = formEl.getAttribute('sync-default'); // string \"true\" or \"false\"\n      inputDefault = typeof inputDefault === 'undefined' || inputDefault === 'false' ? '' : inputDefault;\n      if (value === '' && inputDefault) value = inputDefault;\n       \n      if (formEl.querySelector('input'))\n        formEl.querySelector('input').value = value;\n      if (formEl.querySelector('select'))\n        formEl.querySelector('select').value = value;\n      if (formEl.querySelector('input[type=\"checkbox\"]'))\n        formEl.querySelector('input[type=\"checkbox\"]').checked = value? true : false ;\n    })\n\n    // currentObject3D.material.blending = 2;\n  }, [currentObject3D])\n  \n  // Methods helpers\n\n  // x,y,z of mouse inside the 3d world. posterlens has this functions, but it doesnt work if I call it in onmousemove.\n  const reactGetMouse3Dposition = function(event) {\n    if (!window.pl) return\n    const v = window.pl.viewer;\n    if (!v) { console.warn('Cant retrieve mouse pos, not viewer defined'); return; }\n\n    const intersects = v.raycaster.intersectObject( v.panorama, true );\n    if ( intersects.length <= 0 ) return;\n    let i = 0;\n    while ( i < intersects.length ) {\n        if (intersects[i].object.name === 'invisibleWorld') {\n            const point = intersects[i].point.clone();\n            const world = v.panorama.getWorldPosition( new window.THREE.Vector3() );\n            point.sub( world );\n            const currentMP = [ Math.round(point.x.toFixed(2)/2), Math.round(point.y.toFixed(2)/2), Math.round(point.z.toFixed(2)/2) ];\n            setEditParams( Object.assign( {}, editParams, { currentMouse3DPosition: currentMP } ) );\n            return currentMP;        \n            \n        }\n        i++;\n    }\n  }\n  \n  \n  // handlers\n\n    // CALL to posTERLENS\n  function createViewer() {\n    var posterlensConfig = {}\n    if (!data) console.log('data variable not found.')\n    else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n    \n    // load from cache by default\n    var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n//    console.log(retrievedOptions.worlds[0].hotspots[7].rot);\n    posterlensConfig = (retrievedOptions?.worlds) ? retrievedOptions : posterlensConfig;\n    if (!posterlensConfig) {\n      console.error('No data loaded. Cant initialize');\n      return;\n    }\n\n    // CALL POSTERLENS\n    window.pl = document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).posterlens( posterlensConfig );\n    setPlOptions(window.pl.o);\n    window.pl.viewer.panorama.addEventListener('load', () => {\n      // init also selected obj if it was selected before\n      const lso = localStorage.getItem('lastSelectedObj.name');\n      if (lso) {\n        const selObj = window.pl.getObjectByName(lso);\n        if (selObj) setCurrentObject3D(selObj);\n      }\n      // Debug with chrome three inspector.\n      window.scene = window.pl.viewer.getScene();\n\n     if (isEditMode) window.stopAllAnimations(window.pl.viewer);\n\n    });\n  }\n\n  useEffect( () => { \n    window.pl.viewer.editMode = isEditMode;\n  }, [isEditMode]);\n  \n  function restartViewer() {\n    destroyViewer();\n    setPlOptions(null);\n    setIsEditMode(false);\n    delete(window.pl);\n    createViewer();\n    setCountRestarts(countRestarts + 1);\n    // and widgets are rerenderr because its key is associated to countRestarts, so they are loaded ok.\n  }\n\n  // helpers\n  function getOptionsByObject3D(object3D, option = null) {\n    const currentWorldOptions = getCurrentPanoramaParams();\n    let objectData = currentWorldOptions.hotspots.find( ht => ht.name === object3D?.name );\n    if (objectData && option) return objectData[option];\n    return objectData;\n  }\n  function getCurrentPanoramaParams() {\n    if (!plOptions) return null;\n    return plOptions.worlds.find( w => w.name === window.pl.viewer.panorama.name );\n  }\n  function getCurrentPanoramaParamsIndex() {\n    return plOptions.worlds.findIndex( w => w.name === window.pl.viewer.panorama.name );\n  }\n  // returns all pl with the new worldparmas at the place of the current panorama params\n  function plOptionsReplaceWorldParams(worldParams) {\n    const newOptions = Object.assign({}, plOptions);\n    newOptions.worlds[getCurrentPanoramaParamsIndex()] = {...worldParams};\n    return newOptions;\n  }\n  // returns all pl options replacing the hotspots in current panorama with that name\n  function plOptionsReplaceWorldParamsHotspot(name, objectData) {\n    const currentWorldParams = getCurrentPanoramaParams();\n    const getHotspotIndex   = currentWorldParams.hotspots.findIndex(ht => ht.name === name);\n    if ( getHotspotIndex < 0 ) return;\n    const newHotspots = [...currentWorldParams.hotspots];\n    newHotspots[getHotspotIndex] = objectData;\n    currentWorldParams.hotspots = newHotspots;\n    return plOptionsReplaceWorldParams(currentWorldParams);\n  }\n\n  // updates plOptions (the js object with all the config to load posterlens).\n  // updates the react state and the localstorage (it can be used outside of react). It also uses a callback that can be used outside react.\n  function syncPlOptionsAndLocalStorage(plOptions) {\n    setPlOptions(plOptions);\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    localStorage.setItem('pl.o', exportStr);\n    if (window.onSavePlOptionsCallback) window.onSavePlOptionsCallback(plOptions); // this fn is passed from outside react, and it can be useful\n    return exportStr;\n  }\n\n  // Object 3d in viewer ===> Options in pl.\n  // =======================> Options pl\n  function singleObject3DToParams(object3D) {\n  \n\n    // const worldParams = getCurrentPanoramaParams();\n    // let objectHotspotIndex = worldParams.hotspots.findIndex( ht => ht.name === object3D?.name );\n    // if (objectHotspotIndex < 0 ) {\n    //   // not found, we create it. This will never happen. And if it did , it would be wront. It should create more than a name.\n    //   worldParams.hotspots.push({ name: object3D.name });\n    //   objectHotspotIndex = worldParams.hotspots.length - 1;\n    //   //return;\n    // }\n\n    const objectCurrentParams = getOptionsByObject3D(object3D); // worldParams.hotspots[objectHotspotIndex];\n    const objectNewParams     = {...objectCurrentParams};\n\n    if (!objectCurrentParams) { alert('error: no objectCP'); return; }\n    // pos, scale and rot\n    objectNewParams.pos = [round2(object3D.position.x), round2(object3D.position.y), round2(object3D.position.z)];\n    objectNewParams.rot = [round2(object3D.rotation.x), round2(object3D.rotation.y), round2(object3D.rotation.z)];\n    // if (object3D.name === 'TEST') debugger\n    objectNewParams.scale = round2(object3D.scale.x);\n    // map params from object into options:\n\n    const defaults = { 'opacity': 1, 'animatedMap': 1 }\n    const mapParams = {\n      'opacity': 'material.opacity',\n      'type' : 'type',\n    }\n    \n    // special params for type\n    switch (object3D.type) {\n      case 'pl_text-3d': \n        mapParams.emissive = 'material.emissive';\n        mapParams.transparent = 'material.transparent';\n        break;\n      case 'pl_text-2d-sprite': \n      case 'pl_text-2d': \n        mapParams.color = 'material.color';\n        break;\n      case 'pl_poster3d': \n        // mapParams.animatedMap = 'material.transparent';\n      default:\n      break;\n    }\n\n    // foreach field in the object 3d we save it as an option param\n    Object.keys(mapParams).forEach( option => {\n      const obFields = mapParams[option].split('.');\n      var currentField = object3D; // currentField has the value in the object 3d. ie, for field opacity, it has 0.5\n      obFields.forEach( field => currentField = currentField[field] ); // currentfield = \"resources/img.jpg\"\n      // fix if it's a color (rgb object): convert into string\n      // if (currentField.hasOwnProperty('r') && currentField.hasOwnProperty('g')) currentField = currentField.getHexString();\n      // fix type. In object has prefix pl_\n      if (option==='type') currentField = currentField.replace('pl_', '');\n      // if (option==='background') currentField = currentField? currentField : 'transparent';\n      \n\n      if (currentField === null && objectNewParams.hasOwnProperty(option)) \n        delete(objectNewParams[option]);\n      else {\n        if (defaults.hasOwnProperty(option)) { // save only if it not default\n          if (defaults[option] != currentField) \n            objectNewParams[option] = currentField; // { \"image\" : \"resources/img.jpg\" }\n        } else\n          objectNewParams[option] = currentField;\n      }\n    } );\n\n    // params only in options and not visible from object 3D (we need a panel and an input to edit it)\n    // image, animatedMap, animatedMapSpeed, alwaysLookatCamera, text, hoverText, link\n    \n\n    // update pl with the new options\n    // const newOptions = Object.assign({}, plOptions);\n    // newOptions.worlds[getCurrentPanoramaParamsIndex()].hotspots[objectHotspotIndex] = objectNewParams;\n    const newOptions = plOptionsReplaceWorldParamsHotspot(object3D.name, objectNewParams);\n    syncPlOptionsAndLocalStorage(newOptions);\n    \n    return objectNewParams;\n\n  }\n\n  // when picking up the object iwth mouse or from list of objects.\n  function selectObject(theObj) {\n    if (!theObj) return false;\n    // if (currentObject3D) currentObject3D.material.blending = 1;\n    window.lastSelectedObj = theObj;\n    setCurrentObject3D( theObj );\n    // look at the object, I dont know how to do it\n  }\n\n  // remove from data and in viewer\n  function removeCurrentObject() {\n    if (!currentObject3D) return;\n    const currentWorldOptions = getCurrentPanoramaParams();\n    const currentWorldOptionsIndex = getCurrentPanoramaParamsIndex();\n    let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === currentObject3D.name );\n    let newPlOptionsHotspots = [...currentWorldOptions.hotspots];\n    let hotspotIndex = newPlOptionsHotspots.findIndex( ht => ht.name === currentObject3D.name );\n    newPlOptionsHotspots.splice(hotspotIndex,1); //delte in array\n    const newO = {...plOptions};\n    newO.worlds[currentWorldOptionsIndex].hotspots = newPlOptionsHotspots;\n    syncPlOptionsAndLocalStorage(newO);\n    window.pl.viewer.panorama.remove( currentObject3D );\n    window.pl.viewer.panorama.remove( window.pl.viewer.scene.getChildByName(currentObject3D.name) ); // just in case (somethimes it doesn delete)\n    setCurrentObject3D(null);\n  }\n\n  // clone in data and reload the viewer.\n  function cloneCurrentObject() {\n    if (!currentObject3D) return;\n    const objectCurrentParams = Object.assign({}, getOptionsByObject3D(currentObject3D));\n    const currentWorldParams  = getCurrentPanoramaParams();\n    objectCurrentParams.name = \"cloned_\"+ objectCurrentParams.name;\n    objectCurrentParams.pos = [ objectCurrentParams.pos[0], objectCurrentParams.pos[1] + 50, objectCurrentParams.pos[2]]\n    currentWorldParams.hotspots.push(objectCurrentParams);\n    const newPlOptions = plOptionsReplaceWorldParams(currentWorldParams);\n    syncPlOptionsAndLocalStorage(newPlOptions);\n    // we need to restart the viewer to create it.\n    restartViewer();\n  }\n\n  // shows modal with all the options\n  function exportToTextarea() {\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    var textA = document.createElement( 'textarea' );\n    textA.textContent = exportStr;\n    textA.style.width = '100%'\n    textA.style.height= '500px';\n    window.pl.Modal('Export JSON', textA);\n  }\n\n    // args (inputs) ===> Options data\n    // given name of object and updated fields in the way { link : \"Hall\" }, we update the p.currentObjectData and the worldOptions\n    // in some cases, sync the 3d model with the new data in the case of the name.\n    const updateObjectSingleData = function( name, fields = {}, regenerate = true ) { \n      \n      const currentWorldOptions = getCurrentPanoramaParams();\n      let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === name );\n      if (objectHotspotIndex < 0 ) return;\n      // update the field\n      let objectData = currentWorldOptions.hotspots.find( ht => ht.name === name ); // all fields => { name: '', type: '' ... }\n      objectData = Object.assign({}, objectData, fields );\n      Object.keys(objectData).forEach( k =>  (objectData[k] === null)? delete(objectData[k]) : false ); // cleanup\n      const newPlOptions = plOptionsReplaceWorldParamsHotspot(name, objectData);\n      syncPlOptionsAndLocalStorage(newPlOptions);\n      \n      // regenerate the 3d object (remove and generate)\n      if (regenerate) {\n        const object = window.pl.getObjectByName(name);\n        if (name && window.pl.viewer.panorama && objectData ) {\n          window.pl.viewer.panorama.remove( object );\n          window.pl.createNewObjectFromParams(window.pl.viewer.panorama, objectData); // recreate the 3d in the viewer\n          const newObject = window.pl.getObjectByName(name);\n          setTimeout(()=>selectObject(newObject), 500);\n          \n        }\n        else {        \n          selectObject(object);\n        }\n      }\n  }\n\n\n\n\n  // remove all viewer. I should free up memory before...\n  function destroyViewer() {\n    document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).innerHTML = '';\n  }\n\n  \n\n\n\n\n  return <React.Fragment>\n    { currentObject3D? \n        <ObjectInfo currentObject3D={currentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} editParams={editParams} /> : \n        <PanoInfo currentObject3D={currentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} editParams={editParams} /> \n    }\n    { plOptions? <ListObjects currentObject3D={currentObject3D} plOptions={plOptions} selectObject={selectObject} editParams={editParams}\n                              setCurrentObject3D={setCurrentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} /> : null }\n    <Container className='wrapper border pt-2' style={{ maxWidth:'1200px' }}>\n\n      { plOptions? \n        <Button className=\"btn-sm\" onClick={ e => restartViewer() }> RESET <span className=\"badge\">{countRestarts}</span> </Button>         : null } \n      { !isEditMode? \n        <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ setIsEditMode(!isEditMode) }>Start Edit Mode</Button> : null } \n      { plOptions? \n        <Button className=\"btn btn-danger btn-sm\" onClick={ (e) => { localStorage.setItem('pl.o', null); restartViewer(); }  }>Clear cache </Button> : null }\n\n        <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ () => exportToTextarea() }>Export</Button>\n\n        { currentObject3D? \n        <Button className=\"btn btn-danger btn-sm\" onClick={ removeCurrentObject }>Delete</Button> : null }\n        { currentObject3D? \n        <Button className=\"btn btn-success btn-sm\" onClick={ cloneCurrentObject }>Clone</Button> : null }\n\n        { currentObject3D? \n        <Button className=\"btn btn-warning btn-sm\" onClick={ ()=> { setCurrentObject3D(null); window.lastSelectedObj = null; } }>Unselect</Button> : null }\n\n        <Button variant=\"outline-secondary btn-sm ml-3\" onClick={ (e)=> setAppMode('demo') }>Demo</Button>\n\n      <Row className=\"no-gutters\" >\n        <Col sm={12}>\n          <div onMouseMove={ event => { reactGetMouse3Dposition(event); } } ref={refContainerParent}>\n           <div  id={editParams.POSTERLENS_CONTAINER_ID} className='posterlens-container' ref={refContainer}> </div>\n          </div>\n        </Col>\n        { isEditMode? \n                   <EditObject2 plOptions={plOptions} isEditMode={isEditMode} editParams={editParams} currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} reactGetMouse3Dposition={reactGetMouse3Dposition} \n                                singleObject3DToParams={singleObject3DToParams} setInfo={setInfo} updateObjectSingleData={updateObjectSingleData}\n                                getCurrentPanoramaParams={getCurrentPanoramaParams} selectObject={selectObject} getOptionsByObject3D={getOptionsByObject3D}\n                                appAsWidget={appAsWidget} plOptionsReplaceWorldParams={plOptionsReplaceWorldParams} syncPlOptionsAndLocalStorage={syncPlOptionsAndLocalStorage} />\n                : null }\n      </Row>\n\n\n      \n\n      \n      \n      {/* <Button className=\"btn-warning\" onClick={ () => localStorage.setItem('worldOptions', JSON.stringify(worldOptions))  }>Update</Button> */}\n      <div className='info' style={ {color: 'red'} }>{ info }</div>\n\n      \n\n      { isEditMode? <Widgets plOptions={plOptions} isEditMode={isEditMode} setIsEditMode={setIsEditMode}  \n                              setCurrentObject3D={setCurrentObject3D} plOptions={plOptions} singleObject3DToParams={singleObject3DToParams}\n                              refContainer={refContainer}\n                              key={countRestarts} restartViewer={restartViewer} \n                              plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                              getCurrentPanoramaParams={getCurrentPanoramaParams} setPlOptions={setPlOptions}\n                              \n                              \n                              /> : null }\n    </Container>\n    </React.Fragment>\n}\n","// This is the call of the React APP.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\n/* Variables that can be set from the outside:\n  window.appAsWidget = true;\n  window.expertMode = false;\n  window.plImgPath = 'http:// ... ' (not neccessary in appAsWidget mode)\n  window.basePath = 'http://' or 'relative/path/' (needed to show the Widgets imgs, for example) \n  window.onSavePlOptionsCallback = function(plOpts) { ... whatever you want to do }\n*/\nconst containers = document.querySelectorAll('.wrapper-posterlens-edit-container');\ncontainers.forEach( (el,i)=>{\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    el\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}