{"version":3,"sources":["components/App.js","components/AppDemoPosterlens.js","components/InputImage.js","components/InputData.js","components/InputOnClickOption.js","helpers.js","components/InputObject3D.js","components/InputsRotation.js","components/Layout/EditObjectControls_Bottom.js","components/Widgets.js","components/Layout/PanelObjectData_Right.js","components/Layout/PanelListObjects_Left.js","components/Layout/PanelPanoramaInfo_Right.js","components/Layout/TopBarButtonsAndPanels.js","components/Layout/CanvasUI3D.js","components/AppEditPosterlens.js","index.js"],"names":["App","useEffect","console","log","window","PANOLENS","THREE","eval","stopAllAnimations","isAppAsWidget","appAsWidget","isEditModeDefault","location","hash","useState","setAppAsWidget","appMode","setAppMode","data","AppDemoPosterlens","refContainer","createRef","retrievedOptions","JSON","parse","localStorage","getItem","worlds","error","pl","document","querySelector","posterlens","viewer","panorama","addEventListener","panolensPanoInstance","scene","getScene","createViewer","className","onDoubleClick","onClick","id","ref","InputImage","p","infoAttr","setInfoAttr","pickupImageMode","setPickupImageMode","handlePickupImg","e","target","src","value","wrapperUpdateObjectSingleData","removeEventListener","handleCancelPickupImage","setTimeout","event","keyCode","InputGroup","input","option","Prepend","Text","label","Append","selected_img","tagName","getAttribute","Button","variant","getOptionsByObject3D","currentObject3D","Input","infoMsg","setInfoMsg","theValue","deleteIfValue","fieldPair","scale","x","regenerate","includes","updateObjectSingleData","name","type","class","sync-3d","sync-default","currentValue","extensions","dims","minWidth","maxWidth","minHeight","maxHeight","onChange","base64","imgPath","onError","errMsg","alert","onSubmit","preventDefault","currentTarget","FormControl","as","defaultValue","placeholder","closest","Form","Check","step","min","max","Group","defaultChecked","checkedValue","checked","uncheckedValue","key","options","Object","keys","map","viewInput","InputOnClickOption","selectRef","useRef","panoList","plOptions","forEach","world","cardList","cardListCallback","setOnClickOption","updatedFields","onClickAction","modal","link","handleSelectOption","onClickOption","active","round2","fl","numb","toFixed","InputObject3D","props","getCurrentValueFromObject3D","prop","split","val","theProp","getObjectData","objectName","dataField","defaultVal","objectHotspotData","getCurrentPanoramaParams","hotspots","find","ht","field","Control","dataValue","parseInt","newObject","length","updatePropObject3D","onMouseUp","rotData","default","updateDataObject","InputsRotation","Math","PI","EditObjectControls_Bottom","plImgPath","setImgPath","refImgPathInput","v","renderer","domElement","handlerPickupObject","selectedObj","newPos","reactGetMouse3Dposition","Vector3","normalize","multiplyScalar","distance","y","z","setObjectPos","handlerDropObject","handlerScaleRotateObject","isEditMode","shiftIsPressed","intersects","raycaster","intersectObject","theObj","object","startsWith","camera","position","distanceTo","OrbitControls","enabled","originalPos","selectObject","singleObject3DToParams","lastSelectedObj","ctrlKey","set","editParams","SCALE_FACTOR","rotateZ","ROTATE_DEG","rotateY","rotateX","z_move","constructor","setInfo","setCurrentObject3D","waitSave","clearTimeout","object3D","direction","offset","clone","warn","inputs","Container","Row","current","inputsCol","col_i","Col","sm","i","Widgets","el","classList","add","isWidgetsInit","setIsWidgetsInit","basePath","Array","from","appendControlItem","style","backgroundImage","float","onTap","initNewObject","newObj","objectData","group","justCreatedBtn","countResets","params","floor","random","pos","values","getWorldDirection","image","defaultPosterImg","posterSphere","text","fontFamily","callbackFn","mesh","createNewObjectFromParams","worldParams","push","newPlOptions","plOptionsReplaceWorldParams","setPlOptions","PanelObjectData_Right","isExpertMode","isOpen","setIsOpen","currentObjectOptions","rotation","alwaysLookatCamera","Fragment","objectOptions","lines","stringify","jsx","line","currentObjectOptionsJSX","PanelListObjects_Left","init","setInit","element","getObjectByName","getCameraDirection","join","round","fov","currentMouse3DPosition","objectsToPopupWhenVisible","k","PanelPanoramaInfo_Right","currentPanoOptions","currentPanoOptionsJSX","TopBarButtonsAndPanels","restartViewer","countRestarts","setItem","exportToTextarea","removeCurrentObject","cloneCurrentObject","currentPanoParams","initialLookAt","initialFov","newOptions","syncPlOptionsAndLocalStorage","CanvasUI3D","onMouseMove","POSTERLENS_CONTAINER_ID","AppEditPosterlens","setIsEditMode","AUTO_START_EDIT_MODE","expertMode","setEditParams","setCountRestarts","info","querySelectorAll","formEl","fields","inputDefault","point","getWorldPosition","sub","currentMP","assign","posterlensConfig","o","lso","selObj","innerHTML","currentWorldOptions","w","getCurrentPanoramaParamsIndex","findIndex","plOptionsReplaceWorldParamsHotspot","currentWorldParams","getHotspotIndex","newHotspots","exportStr","onSavePlOptionsCallback","objectCurrentParams","objectNewParams","rot","editMode","currentWorldOptionsIndex","newPlOptionsHotspots","hotspotIndex","splice","newO","remove","getChildByName","textA","createElement","textContent","width","height","Modal","objectHotspotIndex","hasOwnProperty","color","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.76b06bca.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport AppDemoPosterlens from './AppDemoPosterlens';\nimport AppEditPosterlens from './AppEditPosterlens';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default function App() {\n  \n  /* Retrieving possible variables from outside the App */\n  /* ------------------------ --------------------------- */\n  useEffect( () => {\n    console.log(`THREE and PANOLENS: ${window.PANOLENS}`,window.THREE);\n    window.THREE = eval('THREE');\n    window.PANOLENS = eval('PANOLENS');\n    window.stopAllAnimations = window.stopAllAnimations;\n  }, []);\n\n  const isAppAsWidget       = window.appAsWidget? true : false; // when we use it in Wordpress, in a page, then it's a widget app\n  const isEditModeDefault = window.location.hash === '#edit' || isAppAsWidget;\n  const [appAsWidget, setAppAsWidget] = useState(isAppAsWidget);\n  const [appMode, setAppMode] = useState(isEditModeDefault? 'edit' : 'demo');\n  \n  var data = window.data; // defined outside react, in the html calling this app\n  /* ------------------------ --------------------------- */\n\n  return appMode === 'edit' ?  <AppEditPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} /> : \n                               <AppDemoPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} />;\n  \n}","import React, {useEffect, createRef} from 'react'\n\nfunction AppDemoPosterlens( { data, setAppMode, appAsWidget } ) {\n    \n    var refContainer = createRef();\n\n    useEffect(() => {\n        console.log('hello from useEffect in App');\n        // create the interactive 3d viewer with posterlens\n        createViewer(data);\n      }, []);\n\n    // CALL to posTERLENS\n    function createViewer(data) {\n        var posterlensConfig = {}\n        if (!data) console.log('data variable not found.')\n        else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n            \n        // load from cache by default\n        var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n\n        data = (retrievedOptions?.worlds) ? retrievedOptions : data;\n        if (!data) {\n        console.error('No data loaded. Cant initialize');\n        return;\n        }\n\n        // CALL POSTERLENS\n        window.pl = document.querySelector('#posterlens-container').posterlens( data );\n        window.pl.viewer.panorama.addEventListener('load', (panolensPanoInstance) => {\n            console.log(`🎉🎉🎉🎉🎉🎉🎉🎉`, panolensPanoInstance);\n        });\n        window.scene = window.pl.viewer.getScene();\n    }\n\n\n\n    return (\n        <div className='container'>\n            <h1 onDoubleClick={()=> setAppMode('edit')} >Demo  \n                { appAsWidget? \n                    <button className='btn btn-sm btn-primary' onClick={ ()=> setAppMode('edit') }>Back</button>\n                    : null }\n            </h1> \n            <div className='posterlens-container' id='posterlens-container' ref={refContainer}></div>\n        </div>\n    )\n}\n\nexport default AppDemoPosterlens\n","import React, {useState, useEffect} from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\n/**\n * Input \"Select image\" that sets the option p.input.option to that image.\n * Allows \n * */\nfunction InputImage( p ) {\n\n    // p : the props obj. \n    // @p.input (option, label)\n\n    // Local State\n    const [infoAttr, setInfoAttr] = useState(''); // a little message saying \"updating\", \"saved\" to the user\n    \n    // tool to fillup an image input by selecting an image in the screen.\n    const [pickupImageMode, setPickupImageMode] = useState(false);\n\n    // watch the activation of the mode \"pickup image in screen\"\n    useEffect(() => {\n        if (! pickupImageMode) return;\n        setInfoAttr('Pick up an image in the screen');\n        const handlePickupImg = (e) => {\n            if (e.target?.src) {\n                const value = e.target.src; // I tried using refs but here it doesnt read them\n                p.wrapperUpdateObjectSingleData(value);\n\n                // remove events to normal\n                setPickupImageMode(false);\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n                setInfoAttr(\"Image selected\"); setTimeout( () => setInfoAttr(''), 3000 );\n            }\n        };\n        const handleCancelPickupImage = function(event) {\n            if(event.keyCode === 27){ // clicking ESC\n                setPickupImageMode(false);\n                setInfoAttr(\"Cancelled\"); setTimeout( () => setInfoAttr(''), 3000 );\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n           }\n        };\n        document.addEventListener('click', handlePickupImg, 'pickupImg' );\n        document.addEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );\n        \n    }, [pickupImageMode]);\n    \n\n    function handlePickImage(event) {\n        // optionally we can interact from outside react with tthe selection. If we have set an element with class 'pl_selected_image', we'll grab that img.\n        if (document.querySelector('.pl_selected_image')) {\n            const selected_img = document.querySelector('.pl_selected_image');\n            if (selected_img.tagName === 'IMG') \n                p.wrapperUpdateObjectSingleData( selected_img.getAttribute('src') );\n            else if ( selected_img.getAttribute('data-url') ) // we accept that the element with pl_sel.. class has an attribute with the url.\n                p.wrapperUpdateObjectSingleData( selected_img.getAttribute('data-url') );\n            \n            return;\n        }\n        // or standard behaviour. Any img in the window can be clicked and we use its src field as value.\n        setPickupImageMode(p.input.option) \n    }\n\n  return (\n    \n        <InputGroup className={ 'input-group-' + p.input.option }>\n\n            <InputGroup.Prepend>\n                <InputGroup.Text>\n                    { p.input.label }\n                </InputGroup.Text>\n            </InputGroup.Prepend>\n            <InputGroup.Append onClick={ handlePickImage  }>\n                <InputGroup.Text>\n                    { pickupImageMode? 'select an image' : <Button variant=\"primary\">Pick image</Button> }\n                </InputGroup.Text>\n            </InputGroup.Append>\n\n                <InputGroup.Append>\n                    <InputGroup.Text>\n                        {p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                    </InputGroup.Text>\n                </InputGroup.Append>\n                <span className=\"text-light bg-dark\">{ infoAttr }</span>\n        </InputGroup>\n\n  );\n}\n\nexport default InputImage;\n","import React, { useState } from 'react'\n\nimport Button from 'react-bootstrap/Button';\n\nimport InputImage from './InputImage';\nimport { FilePicker } from 'react-file-picker'\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\n\nexport default function Input(p) {\n\n    const [infoMsg, setInfoMsg] = useState('');\n\n    // udpated fied p.input.option with the value. Some fields have special treatment\n    const wrapperUpdateObjectSingleData = function (value) {\n        let theValue = value === p.input.deleteIfValue ? null : value; // with this we will remove the option from the params.\n        const fieldPair = { [p.input.option] : theValue };\n        // special fields that need special treatment\n        if ( p.input.option === 'background' && theValue === '' ) fieldPair[p.input.option] = 'transparent'; // no bg color => background: 'transparent'\n        if ( p.input.option === 'sprite' && theValue === true ) fieldPair.scale = p.currentObject3D.scale.x * 10; // if we convert into sprite we better scale or it will look tiny\n        if ( p.input.option === 'sprite' && !theValue ) fieldPair.scale = p.currentObject3D.scale.x / 10; // the other way as well.\n        let regenerate = ['name'].includes(p.input.option)? false : true; // regenerate bu default , except in some, like 'name'\n        p.updateObjectSingleData( p.currentObject3D.name, fieldPair, regenerate);\n        setInfoMsg('Applied!');  setTimeout(()=>setInfoMsg(''), 1000);\n\n    }\n\n    const viewInput = function() {\n        \n        const currentValue = p.getOptionsByObject3D(p.currentObject3D, p.input.option);\n        // if (p.input.option === 'emissive') debugger\n        switch (p.input.type) {\n            case \"image-pick\":\n                return <InputImage input={p.input} currentObject3D={p.currentObject3D} getOptionsByObject3D={p.getOptionsByObject3D}\n                                    wrapperUpdateObjectSingleData={wrapperUpdateObjectSingleData} />\n            case \"image\": // not in use I think\n                return <InputGroup >\n                    <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FilePicker \n                extensions={['jpg', 'jpeg', 'png', 'gif', 'svg']}\n                dims={{minWidth: 100, maxWidth: 2500, minHeight: 100, maxHeight: 2500}}\n                onChange={base64 => p.updateObjectSingleData( p.currentObject3D.name, { [p.input.option]: p.imgPath+base64.name}) }\n                onError={ errMsg => alert(errMsg) }\n            >\n                <Button variant='primary'>\n                Select image\n                </Button >\n                </FilePicker>\n                <Button variant='danger' onClick={ (e) => { wrapperUpdateObjectSingleData(null) } }>\n                    Clear\n                </Button >\n                <InputGroup.Append> <InputGroup.Text>{currentValue}</InputGroup.Text></InputGroup.Append>\n                </InputGroup>\n            case \"input\":\n                return <form \n                            onSubmit={ (e) => { e.preventDefault(); \n                                    wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                        >\n                    <InputGroup>\n                    {p.input.label ? <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend> : null }\n                        <FormControl as='input' defaultValue={currentValue} onChange={ e => setInfoMsg('Enter to save') }  placeholder={ p.input.placeholder?? ' '} />\n                        <InputGroup.Append onClick={ (e) => infoMsg ? wrapperUpdateObjectSingleData(e.currentTarget.closest('form').querySelector('input').value) : false } >\n                            <InputGroup.Text> { infoMsg || currentValue  } </InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </form>\n            case \"number\":\n                return  <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                             >\n                            <InputGroup>\n                                {p.input.label ? <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend> : null }\n                                <Form.Check type=\"number\" step={ p.input.step?? 1 } placeholder={ p.input.placeholder?? ' '}\n                                    defaultValue={currentValue} min={p.input.min?? 0 } max={p.input.max?? null } \n                                    onChange={ e => setInfoMsg('Enter to save') } />\n                                <InputGroup.Append onClick={ (e) => infoMsg ? wrapperUpdateObjectSingleData(e.currentTarget.closest('form').querySelector('input').value) : false } >\n                                    <InputGroup.Text> { infoMsg || currentValue  } </InputGroup.Text> \n                                </InputGroup.Append>\n                            </InputGroup>\n                        </form>\n            case \"checkbox\":\n                return <Form.Group>\n                <Form.Check type=\"checkbox\" label={p.input.label + `(${currentValue})`}\n                            defaultChecked={currentValue === p.input.checkedValue() || p.input.deleteIfValue === p.input.checkedValue() }\n                                onChange={ (e) => {\n                                    const value = e.currentTarget.checked? p.input.checkedValue(p.currentObject3D) : p.input.uncheckedValue(p.currentObject3D) ;\n                                    wrapperUpdateObjectSingleData(value);                                            \n                                } } />\n                </Form.Group>\n            case \"select\":\n                return <InputGroup>\n                     <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FormControl as='select' defaultValue={currentValue}\n                                        onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) } >\n                                <option key='nothing' value='' >---</option>\n                                {   \n                                    (typeof p.input.options === 'object') ? Object.keys(p.input.options)?.map( option => { \n                                        return <option key={option} value={ p.input.options[option] } >{ option }</option>\n                                    }) : null\n                                }\n                    </FormControl>\n                    <InputGroup.Append><InputGroup.Text> { currentValue } </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n                break;\n            case \"color\":\n                return <InputGroup sync-3d={p.input.option}>\n                        <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                        <input type=\"color\" defaultValue={ currentValue || p.input.deleteIfValue }\n                                onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) }></input>\n                        <InputGroup.Append><InputGroup.Text> {currentValue} </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n            default:\n            break;\n        }\n    }\n\n    return <div className={ p.input.type + '-type ' + (infoMsg? 'editing ' : 'no-editing ') + (p.class?? '') }\n                id={ 'input-' + p.input.option} \n                sync-3d={ ['image'].includes(p.input.type)? '' : p.input.option} sync-default={p.input.deleteIfValue? \"true\" : \"false\"}> { \n                viewInput()\n            }</div>\n}\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport InputData from './InputData';\n\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction InputOnClickOption( p ) {\n\n    // using p.onClickOption and p.setOnClickOption. Those states are defined in parent.\n    const selectRef = useRef(null);\n    \n\n    const handleSelectOption = (value) => {\n        if (!p.currentObject3D) return\n        p.setOnClickOption(value);\n        \n        const updatedFields = { onClickAction : value }\n        if ( ['pano', 'url', '' ].includes(value) ) \n            updatedFields.modal = null;\n        if ( ['iframe', 'card', '' ].includes(value) ) \n            updatedFields.link = null;\n        \n        p.updateObjectSingleData( p.currentObject3D.name, updatedFields );\n    }\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n        p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );    \n    \n    let cardList = {};\n    if (window?.cardListCallback) {\n        //        console.log('loading cardList callback', window.cardListCallback());\n        cardList = window.cardListCallback();\n    }\n    \n\n    if (!p.currentObject3D) return null;\n\n    return (\n        <div>\n            <InputGroup sync-3d='onClickAction'>\n                <InputGroup.Prepend> <InputGroup.Text>On click action</InputGroup.Text></InputGroup.Prepend>\n                <FormControl as='select' defaultValue={ p.getOptionsByObject3D(p.currentObject3D, 'onClickAction') }\n                                onChange={ (e) => handleSelectOption(e.target.value) } ref={selectRef} >\n                        <option key='nothing' value='' >---</option>\n                        <option value='pano'> Link to panorama</option>\n                        <option value='url'> Link to URL</option>\n                        <option value='iframe'> iframe popup</option>\n                        <option value='card'> Card</option>\n                </FormControl>\n            </InputGroup>\n            \n            \n            { p.onClickOption? \n                <div>\n                    <div>{ p.onClickOption }</div>\n                    { /** LINK TO PANORAMA */\n                    \n                    p.onClickOption === 'pano' ? \n                        <InputData  input={ { option: 'link', type: 'select', options: panoList, label:'PANORAMA', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                                    updateObjectSingleData={p.updateObjectSingleData} \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                                    : null}\n\n                    { /** LINK TO URL */ \n                    p.onClickOption === 'url' ? <div>\n                            <InputData  input={ { option: 'link', type: 'input',  label:'url', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                                    updateObjectSingleData={p.updateObjectSingleData} \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                        </div> : null \n                    }\n\n                    { /** LINK TO IFRAME */ \n                    p.onClickOption === 'iframe' ? <div>\n                    <InputData  input={ { option: 'modal', type: 'input', label:'iframe url', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            updateObjectSingleData={p.updateObjectSingleData} \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} />\n                        </div> : null \n                    }\n\n                    { /** CARD TO OPEN */ \n                    p.onClickOption === 'card' ? <div>\n                    <InputData  input={ { option: 'modal', type: 'select', options: cardList, label:'Modal Card', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            updateObjectSingleData={p.updateObjectSingleData} \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} />\n                        </div> : null \n                    }\n                     \n                </div>        \n            : null }\n        </div>\n    )\n}\n\nexport default InputOnClickOption;\n","export function round2(fl) { \n    var numb = fl;\n    if (typeof numb === 'number')\n     numb = numb.toFixed(2);\n    return numb;\n    //return 0.001;\n }\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nimport {round2} from '../helpers'\n\n/**\n * Inputs in sync with props of the current3DObject inside the Canvas.\n * The difference with InputData is that InputData is in sync with the datamodel (the options) of the current selected object.\n */\nfunction InputObject3D( { input, props: p } ) {\n    if (!p.currentObject3D) return null;\n\n    /*  prop: 'rotation.x' , returns 0.54 (the value of currentObject3D.rotation.x) */\n    function getCurrentValueFromObject3D(prop) {\n        if (!p.currentObject3D) return null;\n        const props = prop.split('.');\n        let val = p.currentObject3D;\n        props.forEach( theProp => val = val[theProp] );\n        return val;\n    }\n\n    /*  WHAT: updates property in Threejs UI. If 'prop' contains a `.` then updates the subproperty \n        prop: `rotation.x` */\n    function updatePropObject3D(prop, val) {\n        const dataValue = parseInt(val * 100)/100;\n        if (!p.currentObject3D) return null;\n        const props = prop.split('.');\n        const newObject = p.currentObject3D; \n        // shabby way, but it accepts two levels of depth in the props\n        if (props.length === 1) \n            newObject[props[0]] = dataValue;\n        else \n            newObject[props[0]][props[1]] = dataValue; // updates currentobject3d.rotation.x = dataValue\n        // do we need to use setCurrentObject3D? Aparently not.\n    }\n\n    /*  WHAT : updates the pl options data of the hotspot related to the current selected 3Dobject in UI\n        props: 'rotation.x', val : 0.55 . */\n    function updateDataObject(props, val) {\n        const dataValue = parseInt(val * 100)/100;\n        if (props.includes('rotation')) {\n            const rotData = getObjectData(p.currentObject3D.name, 'rot', input.default); // [1, 0.2, 0 ]\n            if (props.includes('.x')) rotData[0] = dataValue;\n            if (props.includes('.y')) rotData[1] = dataValue;\n            if (props.includes('.z')) rotData[2] = dataValue;\n            p.updateObjectSingleData( p.currentObject3D.name, { 'rot' : rotData }, false);\n        }\n        if (props.includes('scale')) {\n            const scale = getObjectData(p.currentObject3D.name, 'scale', input.default);\n            p.updateObjectSingleData( p.currentObject3D.name, { 'scale' : dataValue }, false);\n        }\n    }\n\n    /*  helper.          Returns the field value, for the selected hotspot in the pl data options. */\n    const getObjectData = function(objectName, dataField, defaultVal) {\n        const currentWorldOptions = p.getCurrentPanoramaParams();\n        let objectHotspotData = currentWorldOptions.hotspots.find( ht => ht.name === objectName );\n        if (!objectHotspotData) return;\n        let data = objectHotspotData[dataField];\n        if (!data) return defaultVal;\n        return data ;\n    }  \n\n    // preparing placeholders. initial value of the input:\n    const currentValue = (p.currentObject3D)? getCurrentValueFromObject3D(input.prop) : null;\n    \n    return (\n        <InputGroup sync-3d={input.field} className={'input-group ' + p.class?? '' } >\n            <InputGroup.Prepend> <InputGroup.Text>{input.label}</InputGroup.Text></InputGroup.Prepend>\n            <Form.Control type=\"range\" id={input.prop} name={input.prop} className='range-control'\n                min={input.min} max={input.max} defaultValue={currentValue} step={input.step}\n                onChange={ (e) => {\n                    // update the object 3d to see the change\n                    updatePropObject3D(input.prop, e.target.value);\n                } }\n                onMouseUp ={ (e) => {\n                    // update the data only when finishing editing\n                    updateDataObject(input.prop, e.target.value);\n                } }\n            /> \n            <InputGroup.Append> <InputGroup.Text>{ getCurrentValueFromObject3D(input.prop) }</InputGroup.Text></InputGroup.Append>\n        </InputGroup>\n    )\n}\n\nexport default InputObject3D\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport InputObject3D from './InputObject3D';\n\nfunction InputsRotation( p ) {\n\n    /** reuse of code by holding the props to export into one var. */\n    const props = {\n        updateObjectSingleData: p.updateObjectSingleData,\n        getCurrentPanoramaParams: p.getCurrentPanoramaParams,\n        currentObject3D: p.currentObject3D,\n        getOptionsByObject3D: p.getOptionsByObject3D,\n        class: 'col-4 flex-nowrap'\n    }\n    return (\n        <div className={ p.class?? 'ww' }>\n            <InputObject3D input={ {\n                                label: 'RotX',\n                                prop: 'rotation.x',\n                                field: 'rot.0',\n                                default: [],\n                                min: - Math.PI,\n                                max: Math.PI,\n                                step: 0.01\n                            } } \n                            props={props}\n                             />\n            \n            <InputObject3D input={ {\n                                label: 'RotY',\n                                prop: 'rotation.y',\n                                field: 'rot.1',\n                                default: [],\n                                min: - Math.PI,\n                                max: Math.PI,\n                                step: 0.01\n                            } }\n                            props={props}\n                            />\n\n                <InputObject3D input={ {\n                                label: 'RotZ',\n                                prop: 'rotation.z',\n                                field: 'rot.2',\n                                default: [],\n                                min: - Math.PI,\n                                max: Math.PI,\n                                step: 0.01\n                            } }\n                            props={props}\n                            />\n        </div>\n    )\n}\nexport default InputsRotation\n","import React, {useEffect, useState, createRef} from 'react';\n\n// the <inputs ...\nimport InputData from '../InputData';\nimport InputOnClickOption from '../InputOnClickOption';\nimport InputsRotation from '../InputsRotation';\n\n// bootstrap 4 elements\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction EditObjectControls_Bottom( p ) {\n\n    const [imgPath, setImgPath] = useState( window.plImgPath?? 'resources/'); // imgs for 3d textures\n    const refImgPathInput = createRef();\n\n    // Important note. Inside a new EventListener, we can't access to updated props. The props will always have the initial value\n    // That's why I use window.selectedObj instead of p.currentObject3D, to access to the lastest Position.\n\n    // triggered on load, only once.\n    useEffect(() => { \n        if (!window.pl) return;\n        // console.log('pl updated in edit', window.pl);\n        const v = window.pl.viewer;\n        v.renderer.domElement.addEventListener('mousedown', (event) => { handlerPickupObject(event) });\n\n        // --- move object \n        v.renderer.domElement.addEventListener('mousemove', function (event) {\n            if (!window.selectedObj) return;\n            let newPos = p.reactGetMouse3Dposition(event, window.pl);\n            if (!newPos) return;\n            const v = new window.THREE.Vector3(...newPos).normalize().multiplyScalar(window.selectedObj.distance);\n            newPos = [v.x, v.y, v.z];\n            window.pl.setObjectPos(window.selectedObj, newPos);\n        });\n        v.renderer.domElement.addEventListener('mouseup', (event) => { handlerDropObject(event) });\n        document.addEventListener('keydown', (event) => { handlerScaleRotateObject(event) } );\n        \n    }, [p.plOptions] );\n\n    // --- pickup object \n    const handlerPickupObject = (event) => {\n        if ( !p.isEditMode ) return;\n        if (window.pl.shiftIsPressed) return;\n\n        const v = window.pl.viewer;\n        \n        const intersects = v.raycaster.intersectObject( v.panorama, true );\n        const theObj = intersects[0]? intersects[0].object : null ;\n        if (!theObj || !theObj.type?.startsWith('pl_')) return;\n\n        theObj.distance = v.camera.position.distanceTo(theObj.position);\n        window.selectedObj = theObj;\n       // console.log('Edit Object cLicked', window.selectedObj.name);\n        \n        v.OrbitControls.enabled = false;\n        window.selectedObj.originalPos = window.selectedObj.position;                \n        \n        // State: assign lastSelectedObj and update state currentObject3D\n        p.selectObject(theObj);\n    }\n\n    // --- drop object \n    const handlerDropObject = (event) => {  \n        if ( !p.isEditMode || !window.selectedObj) return;\n        if (!window.selectedObj.type.startsWith('pl_')) return;\n        const v = window.pl.viewer;\n        v.OrbitControls.enabled = true;\n        // p.singleObject3DToParams(window.selectedObj);\n        p.singleObject3DToParams(window.selectedObj);\n        window.selectedObj = null;\n    };\n\n    const handlerScaleRotateObject = function(event) {\n        // we cant use the state currentObject3D, because it will not get the latest value. It will be initialzied to the time of creation og this handler\n        if (!window.lastSelectedObj) return;\n        if (event.ctrlKey) {\n            switch (event.key) {\n                case '+': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z * p.editParams.SCALE_FACTOR );      break;\n                case '-': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z / p.editParams.SCALE_FACTOR );      break;\n                case 'r': window.lastSelectedObj.rotateZ(p.editParams.ROTATE_DEG);  break;\n                case 't': window.lastSelectedObj.rotateZ(-p.editParams.ROTATE_DEG);  break;\n                case 'f': window.lastSelectedObj.rotateY(p.editParams.ROTATE_DEG);  break;\n                case 'g': window.lastSelectedObj.rotateY(-p.editParams.ROTATE_DEG);  break;\n                case 'v': window.lastSelectedObj.rotateX(p.editParams.ROTATE_DEG);  break;\n                case 'b': window.lastSelectedObj.rotateX(-p.editParams.ROTATE_DEG);  break;\n                case '4': z_move(window.lastSelectedObj, 'close'); break;\n                case '5': z_move(window.lastSelectedObj, 'far'); break;\n                default:\n                    break;\n            }\n            if (event.key === 'r' || event.key === 't' || event.key === 'f' || event.key === 'g' || event.key === 'v' || event.key === 'b') {\n                if (window.lastSelectedObj.constructor.name === 'Infospot') // deprecated\n                    p.setInfo('Sprite object cannot be rotated'); \n            }\n            p.setCurrentObject3D(window.lastSelectedObj);\n            if (window.waitSave) \n                clearTimeout(window.waitSave);\n            window.waitSave = setTimeout( () => {\n                p.singleObject3DToParams(window.lastSelectedObj);\n                clearTimeout(window.waitSave);\n                p.setInfo('updated');\n            }, 200);\n            \n            \n        }\n    }\n\n    // move an object closer or farther from the camera.\n    function z_move(object3D, direction = 'close'){\n        let offset = 1.02;\n        if (direction === 'close') offset = 1/offset;\n                    \n        var newPos = object3D.position.clone();\n        newPos.x *= offset; newPos.y *= offset; newPos.z *= offset;\n        const distance = window.pl.viewer.camera.position.distanceTo(newPos);\n        if ( (direction !== 'close' && distance > 500) || (direction === 'close' && distance < 40)) {\n            console.warn('we cant move that limit. Its out of 40 - 500m');\n            return\n        }\n        window.pl.setObjectPos(object3D, [newPos.x, newPos.y, newPos.z]);\n    }\n\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n        p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );\n    const inputs = [\n        [\n            { option: 'image', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Img', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'alpha', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Alpha', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'text', type: 'input', label:'Text', active: [ 'pl_text-2d', 'pl_text-3d'] },\n            { option: 'emissive', type: 'color', label:'Emissive Color', active: [ 'pl_text-3d'], deleteIfValue:'#ffffff' },\n            { option: 'color', type: 'color', label:'Text Color', active: [ 'pl_text-2d'], deleteIfValue:'#ffffff' },\n            { option: 'background', type: 'color', label:'Background', active: [ 'pl_text-2d'], deleteIfValue:'#000000' },\n            // TODO: we need to give an option for bg transparent \n            { option: 'alwaysLookatCamera', type: 'checkbox', label:'alwaysLookatCamera', checkedValue: () => true, uncheckedValue: () => false, active: [ 'pl_text-2d', 'pl_text-3d', 'pl_poster3d' ], deleteIfValue: true },\n            { option: 'sprite', type: 'checkbox', label:'sprite 2D', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'posterSphere', type: 'checkbox', label:'is sphere', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            //{ option: 'link', type: 'select', options: panoList, label:'Go to pano', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n            //{ option: 'modal', type: 'input', label:'modal', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'], deleteIfValue:'' },\n            { option: 'opacity', type: 'number', step: 0.05, min:0, max:1, label:'Opacity', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '1' },\n        ],\n        [\n        { option: 'animatedMap', type: 'number', label:'frames map', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'animatedMapSpeed', type: 'number', label:'speed', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'rotationX', type: 'number', label:'Rotate animat', placeholder: 'x', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationY', type: 'number', label:'', placeholder: 'y',  step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationZ', type: 'number', label:'', placeholder: 'z',  step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'animated', type: 'select', label:'Glow animation', options: { 'always' : 'always', 'only on hover' : 'hover' }, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'popupWhenVisible', type: 'number', step: 10, label:'Pops up when in camera', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        ]\n    ];\n    return (\n      <Container className=\"edit-panel\">\n        { /* The name of the object */ }\n        {p.currentObject3D? \n        <Row>\n            <InputData   input={ { option: 'name', type: 'input', label:'', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            updateObjectSingleData={p.updateObjectSingleData} \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} \n                            class=\"col-3\"\n                            />\n\n        { /* The inputs in sync with the 3d object */ }\n            <div className='col-9'>\n                <InputsRotation  class=\"row\"\n                            updateObjectSingleData={p.updateObjectSingleData} \n                            getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} />\n            </div>\n        </Row> : null }        \n\n        { /* The imgs path (not needed anymore) */}\n        { !p.appAsWidget?\n        <InputGroup>\n            <InputGroup.Prepend> <InputGroup.Text>imgs path</InputGroup.Text></InputGroup.Prepend>\n            <FormControl as='input' defaultValue={imgPath} ref={refImgPathInput} \n                        onChange={ (e) => refImgPathInput.current? setImgPath(refImgPathInput.current.value) : null } />\n            <InputGroup.Append><InputGroup.Text> {imgPath} </InputGroup.Text> </InputGroup.Append>\n        </InputGroup> : null }\n\n        <Row>\n            {   /**  */\n                inputs.map( (inputsCol, col_i) => {\n                    return <Col sm='4' className='border bg-light' key={'column-'+col_i}>\n                        <label className='d-block h5'>{ col_i === 0 ? 'Main props' : 'Animation' }</label>\n                        { \n                            inputsCol.map( (input, i) => {\n                                if ( !p.currentObject3D ) return null;\n                                if ( !input.active.includes(p.currentObject3D.type) ) return null;\n                                return <InputData   input={input} imgPath={imgPath} key={'input-'+i}\n                                                    updateObjectSingleData={p.updateObjectSingleData} \n                                                    currentObject3D={p.currentObject3D} setCurrentObject3D={p.setCurrentObject3D}\n                                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                            } )\n                        }\n                    </Col>\n                })\n            }\n            <Col sm=\"4\">\n                <InputOnClickOption key={p.getOptionsByObject3D? p.getOptionsByObject3D.name : 'not'} plOptions={p.plOptions} updateObjectSingleData={p.updateObjectSingleData} \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D}\n                                    onClickOption={p.onClickOption} setOnClickOption={p.setOnClickOption} \n                />\n            </Col>\n        </Row>\n        \n        {/* <img width='50' className='use-me' src={ window.basePath+'resources/arboles.png' } /> */}\n      </Container>        \n  );\n}\n\nexport default EditObjectControls_Bottom;\n","import {useEffect, useState} from 'react';\n\n\nfunction Widgets( p ) {\n\n    const v = window.pl?.viewer;\n    if (window.pl?.el)\n        window.pl.el.querySelector('div:last-child').classList.add('pl-widgets');\n\n    const [isWidgetsInit, setIsWidgetsInit ] = useState(false);\n    const initWidgets = function() {\n        if (isWidgetsInit) return;\n        setIsWidgetsInit(true);\n        if (typeof window.basePath === 'undefined') window.basePath = './';\n        // Widgets\n        // Create poster buttons. One for every type.\n        Array.from([ /*'link', */\n                    // 'poster-sprite', // type poster3d + sprite = true\n                    'poster3d',\n                    // 'poster3d-sphere', // type poster3d + posterSphere = true\n                    'text-3d', // doesnt work\n                    'text-2d',\n                   // 'text-2d-sprite' // type text-2d + sprite = true \n            ] ).forEach( type => {\n                v.appendControlItem({\n                    id: 'edit-controls',\n                    style: {\n                        backgroundImage: 'url('+window.basePath+'resources/widget-'+type+'.png)',\n                        float: 'left'\n                    },    \n                    onTap: () => { \n                        const { newObj, objectData } = initNewObject( type );\n                        console.log('Created new obj: ', { newObj, objectData })\n                    },\n                    group: 'editmode'\n                });\n                //shabby way to add a class to this btn. (panolens doesnt do it)\n                const justCreatedBtn = window.pl.el? window.pl.el.querySelector('.pl-widgets > span:last-child') : null;\n                if (justCreatedBtn) justCreatedBtn.classList.add('widget-btn-'+type);\n                \n        })\n    }\n    useEffect(() => {\n        console.log('Hellow from widgets');\n        if (window.pl && p.isEditMode) \n            //if (!p.pl.viewer.widget) \n                initWidgets() // TODO: if deactivate and reactivate the editmode, the widgets are created again (duplicated)\n                // we can use pl.viewer.widget.barElement.remove() when deactivated to delete the previous ones. But ideally we could avoid calling this init if they exist.\n    }, [p.countResets]);\n\n\n\n    const initNewObject = function(type = 'poster3d') {\n        // get Scene by name:\n        const params = {\n            name:  `new_${type}_` + Math.floor(Math.random() * 10000),\n            type: type,\n            pos: Object.values(v.camera.getWorldDirection(new window.THREE.Vector3()).multiplyScalar(300)), // this normalizes but not to unitary, but to 300 long\n        }\n        switch (type) {\n            // case 'link': break;\n            case 'poster3d':    // with window.defaultPosterImg we can set up a default img on creation, from outside react.\n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n            break;\n            case 'poster3d-sphere': \n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n                params.type = 'poster3d';\n                params.posterSphere = true;\n            break;\n            //  case 'poster-sprite': \n            //     params.type = 'poster3d';\n            //     params.sprite = true; \n            //     break;\n            case 'text-2d': \n                params.text = \"New text\"; \n                break;\n            // case 'text-2d-sprite': \n            //     params.type = 'text-2d';\n            //     params.sprite = true; \n            //     params.text = \"New text\"; \n            //     break;\n            case 'text-3d': // doesnt work\n                params.type = 'text-3d';\n                params.fontFamily = window.basePath+'resources/fonts/Century_Gothic_Regular.js';\n                params.text = \"New text\";\n                break;\n            default: break;\n        }\n\n        // posterlens fn\n        // update states object 3d in viewer & object params for posterlens\n        params.callbackFn = mesh => p.setCurrentObject3D(mesh);        \n        window.pl.createNewObjectFromParams(v.panorama, params);\n\n        \n        // update the option settings\n        let worldParams = p.getCurrentPanoramaParams();\n        worldParams.hotspots.push(params);\n        const newPlOptions = p.plOptionsReplaceWorldParams(worldParams);\n        p.setPlOptions(newPlOptions);\n        \n        \n        \n        return params;\n    }\n\n  // its all vanilla js, connecting with panolens. No HTML\n  return (\n    null\n  );\n}\n\nexport default Widgets;\n","import React, {useState} from 'react'\nimport {round2} from '../../helpers';\n\nexport default function PanelObjectData_Right( p ) {\n\n    // State. We can minimize the panel with onclick\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n    // info in a panel of the object. Gets updated when the currentObject3D updates. It means , when it's clicked for instance.\n    function currentObjectOptions() {\n        if (!p.currentObject3D) return;\n        const worldParams = p.getCurrentPanoramaParams();\n        let objectOptions = worldParams.hotspots.find( ht => ht.name === p.currentObject3D?.name );\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentObjectOptionsJSX() {\n        const objectOptions = currentObjectOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <h4>{p.currentObject3D?.name}<small> ({p.currentObject3D?.type})</small></h4>\n\n            <div className={ isOpen? 'd-block' : 'd-none' }>\n                \n                Pos: {round2(p.currentObject3D?.position.x)} {round2(p.currentObject3D?.position.y)} {round2(p.currentObject3D?.position.z)}\n                <br/>\n                Rot: x {round2(p.currentObject3D?.rotation.x)} / y {round2(p.currentObject3D?.rotation.y)} / z {round2(p.currentObject3D?.rotation.z)}\n                { currentObjectOptions()?.alwaysLookatCamera? '(alwayslookatcamera)' : null }\n                <br/>\n                Scale: {round2(p.currentObject3D?.scale.x)} {round2(p.currentObject3D?.scale.y)} {round2(p.currentObject3D?.scale.z)}\n            \n            \n                <React.Fragment>\n                <br/>\n                <b>Object Info in options:</b> <br/>\n                {currentObjectOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n\n}\n","import React, {useState, useEffect} from 'react'\n\nimport Col from 'react-bootstrap/Col'\n\n\nexport default function PanelListObjects_Left(p) {\n\n    // init is the current pano params, where we grab the objects to show (hotspots)\n    const [init, setInit] = useState(null);\n    useEffect(() => {\n        console.log('🚴🏼‍♀️Hello from PanelListObjects_Left')\n        setInit(p.getCurrentPanoramaParams());\n    }, [p.plOptions])\n\n    // more info for developers. Option popup when visible for an object.\n    const getObjectsShowWhenVisible = function() {\n        if (!window.pl) return 'not loaded';\n        if (!window.pl.viewer.panorama.objectsToPopupWhenVisible) return 'none';\n        const jsx = <div> {Object.keys(window.pl.viewer.panorama.objectsToPopupWhenVisible).map( k=>{\n            const [min,max] = window.pl.viewer.panorama.objectsToPopupWhenVisible[k];\n            return <p key={k}>{k} : {min}º, {max}º</p>;\n        })} </div>\n        return jsx;\n    }\n    return (\n        <Col className='list-objects' sm='2'>\n            List Hotposts in Pano Options\n            {init && p.plOptions?.worlds ? \n            <ul>\n                { init.hotspots.map((element,i) => {\n                    return <li key={i} onClick={ () => {\n                        // get object 3d\n                        const theObj = window.pl.getObjectByName(element.name);\n                        p.selectObject(theObj);\n                    }} className={ (p.currentObject3D?.name === element.name )? 'active' : '' }>\n                        {element.name} <small>{element.type}</small>\n                    </li>\n                })}\n            </ul>\n            : null }\n\n           <br/> { /** curiously this works, I dont need to use any State, it works ok with the pl object fn. \n                    *    It is because of the mousemove event in App.js. It makes recalculate this component aparently\n                    */}\n            { p.editParams.isExpertMode? <React.Fragment>\n                Camera: { window.pl? window.pl.getCameraDirection('lookatPoint').join(', ')  : null }\n                <br/>\n                Angle: { window.pl? Math.round(window.pl.getCameraDirection('rad') * 100)/100 : null }\n                    rad :: { window.pl? Math.round(window.pl.getCameraDirection('deg')) : null }º\n                    <br/>\n                    Fov: { window.pl? window.pl.viewer.camera.fov : null }\n                    <br/>\n                    MousePos: { p.editParams.currentMouse3DPosition.join(', ') }\n                    <br/>\n                    <br/>\n                    <i>panorama.objectsToPopupWhenVisible:</i> { init? getObjectsShowWhenVisible() : null }\n            </React.Fragment> : null }\n        </Col>\n    )\n}\n","import React, {useState} from 'react'\n/**\n * WHAT:    Shows a panel with the config data of the current Panorama.\n * WHERE:   Top Right of the screen in absolute position, semiyellow bg panel.\n * WHEN:    Shown when there is no object selected only. \n */\nexport default function PanelPanoramaInfo_Right(p) {\n\n    // State\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n    // info in a panel of the panorama.\n    function currentPanoOptions() {\n        const worldParams = p.getCurrentPanoramaParams();\n        if (!worldParams) return;\n        let objectOptions = {... worldParams }\n        delete(objectOptions.hotspots)\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentPanoOptionsJSX() {\n        const objectOptions = currentPanoOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <div className={ isOpen? 'd-block' : 'd-none' }>            \n                <React.Fragment>\n                    <br/>\n                    <b>Panorama in options:</b> <br/>\n                    {currentPanoOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n/**\n * Panels and Buttons on top of the Canvas3D UI. \n */\n\nimport Row from'react-bootstrap/Row';\nimport Button from'react-bootstrap/Button';\nimport PanelObjectData_Right from './PanelObjectData_Right';\nimport PanelListObjects_Left from './PanelListObjects_Left';\nimport PanelPanoramaInfo_Right from './PanelPanoramaInfo_Right';\n\nexport default function TopBarButtonsAndPanels( p ) {\n    \n    return (\n    <Row className=\"top-buttons\">\n        { p.currentObject3D? \n            <PanelObjectData_Right    currentObject3D={p.currentObject3D} getCurrentPanoramaParams={p.getCurrentPanoramaParams} editParams={p.editParams} /> \n            : \n            <PanelPanoramaInfo_Right  currentObject3D={p.currentObject3D} getCurrentPanoramaParams={p.getCurrentPanoramaParams} editParams={p.editParams} /> \n        }\n        { p.plOptions?\n             <PanelListObjects_Left currentObject3D={p.currentObject3D} plOptions={p.plOptions} selectObject={p.selectObject} editParams={p.editParams}\n                                setCurrentObject3D={p.setCurrentObject3D} getCurrentPanoramaParams={p.getCurrentPanoramaParams} /> : null }\n        \n\n\n        { p.plOptions && p.editParams.isExpertMode ? \n            <React.Fragment>\n                <Button className=\"btn-sm\" onClick={ e => p.restartViewer() }>\n                    RESET <span className=\"badge\">{p.countRestarts}</span>\n                </Button>        \n                <Button className=\"btn btn-danger btn-sm\" onClick={ (e) => { localStorage.setItem('pl.o', null); p.restartViewer(); }  }>\n                    Clear cache\n                </Button>\n            </React.Fragment>\n             : null }\n        { p.editParams.isExpertMode ? \n            <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ () => p.exportToTextarea() }>\n                Export\n            </Button> : null }\n\n        { p.currentObject3D?\n            <React.Fragment>\n                <Button className=\"btn btn-danger btn-sm\" onClick={ p.removeCurrentObject }>\n                    Delete\n                </Button> \n                <Button className=\"btn btn-success btn-sm\" onClick={ p.cloneCurrentObject }>\n                    Clone\n                </Button>\n                <Button className=\"btn btn-warning btn-sm\" onClick={ ()=> { p.setCurrentObject3D(null); window.lastSelectedObj = null; } }>\n                    Unselect\n                </Button>\n            </React.Fragment> \n            : null }\n\n         <Button variant=\"outline-secondary btn-sm ml-3\" onClick={ (e)=> p.setAppMode('demo') }>\n            Demo\n        </Button>\n\n\n\n        {/* Button to set current view a default view of the pano */}\n        <Button variant=\"primary\" className='ml-5' onClick={ (e)=> {                 \n                const currentPanoParams =  p.getCurrentPanoramaParams();\n                currentPanoParams.initialLookAt = window.pl.getCameraDirection('lookatPoint');\n                currentPanoParams.initialFov = window.pl.viewer.camera.fov;\n                const newOptions = p.plOptionsReplaceWorldParams(currentPanoParams);\n                p.syncPlOptionsAndLocalStorage(newOptions);\n            } }>\n            Set camera view\n        </Button>\n\n    </Row>)\n}\n","import React from 'react'\n\nimport Row from 'react-bootstrap/Row'\n\n/**\n * The div placeholder where posterlens.js loads the threejs panolens panorama\n */\nfunction CanvasUI3D( p ) {\n    return (\n        <Row>\n          <div className='w-100' onMouseMove={ event => { p.reactGetMouse3Dposition(event); } }>\n           <div  id={p.editParams.POSTERLENS_CONTAINER_ID} className='posterlens-container'></div>\n          </div>\n        </Row>\n    )\n}\n\nexport default CanvasUI3D\n","import React, {useState, useEffect, createRef} from 'react';\nimport EditObjectControls_Bottom from './Layout/EditObjectControls_Bottom';\nimport Widgets from './Widgets';\nimport {round2} from '../helpers';\n\n// Bootstrap 4\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport TopBarButtonsAndPanels from './Layout/TopBarButtonsAndPanels';\nimport CanvasUI3D from './Layout/CanvasUI3D';\n\nexport default function AppEditPosterlens( { data, setAppMode, appAsWidget } ) {\n  \n  // React states and refs\n  const [plOptions, setPlOptions] = useState(); // IMPORTANT. The goal of all this app is to generate these options. With them we can call posterlens to createa  tour.\n  const [currentObject3D, setCurrentObject3D] = useState(null); // The current THREEjs selected object. Sometimes we use pl.lastSelectedObj, because there are events outside REACT that can't use the State\n  const [isEditMode, setIsEditMode] = useState(false); // In this app, it's always true\n  \n  const [editParams, setEditParams] = useState( {\n    POSTERLENS_CONTAINER_ID: 'posterlens-container', // the div id where we load posterlens\n    SCALE_FACTOR : 1.01,                              // when using ctrl+ and ctrol- keys to change scale of object.\n    ROTATE_DEG : 0.05,                                // radians. 3.1416 is 180 deg.\n    currentMouse3DPosition: [0,0,0],                  // shown in left panel PanoInfo.js\n    AUTO_START_EDIT_MODE : 1,\n    isExpertMode: (typeof window.expertMode !== 'undefined')? window.expertMode : true  // shows more or less info.\n  } );\n  const [countRestarts, setCountRestarts] = useState(0); // not important\n  const [info, setInfo] = useState('');\n\n  const [onClickOption, setOnClickOption] = useState(null); // used in InputOnclickOption, but needs to be defined here.\n  var refContainer = createRef();\n  var refContainerParent = createRef();\n\n  \n\n\n\n  // React Life cycle. INIT\n  \n  useEffect(() => {\n    console.log('hello from useEffect in App');\n    // create the interactive 3d viewer with posterlens\n    createViewer();\n    setCountRestarts(1); // small helper\n  }, []);\n  \n  // called on init and restart\n  useEffect(() => {\n    // initialize this react plugin to make that viewer interactive.\n    if (window.pl)\n      if (editParams.AUTO_START_EDIT_MODE) \n        setIsEditMode(true);\n  }, [countRestarts]);\n\n  //  a simple msg\n  useEffect( () => {\n    if (info !== '') setTimeout( () => setInfo(''), 2000 );\n  }, [info])\n\n  useEffect( () => {\n    if (!currentObject3D) return;\n    console.log('watch currentObject3D ----------------------')\n    localStorage.setItem('lastSelectedObj.name', currentObject3D.name);\n    \n    // Object 3D ====> Inputs  !SHABBY WAY!\n    const options = getOptionsByObject3D(currentObject3D);\n    const formsSync = document.querySelectorAll('[sync-3d]');\n    formsSync.forEach( formEl => {\n      const option = formEl.getAttribute('sync-3d');\n      let value = (typeof options[option] !== 'undefined' )? options[option] : '';\n      // special case. The option is an object (rot.0)\n      if (option.includes('.')) {\n        const fields = option.split('.');\n        value = options[fields[0]]? options[fields[0]][fields[1]] : '' ;\n      }\n      let inputDefault = formEl.getAttribute('sync-default'); // string \"true\" or \"false\"\n      inputDefault = typeof inputDefault === 'undefined' || inputDefault === 'false' ? '' : inputDefault;\n      if (value === '' && inputDefault) value = inputDefault;\n       \n      if (formEl.querySelector('input'))\n        formEl.querySelector('input').value = value;\n      if (formEl.querySelector('select'))\n        formEl.querySelector('select').value = value;\n      if (formEl.querySelector('input[type=\"checkbox\"]'))\n        formEl.querySelector('input[type=\"checkbox\"]').checked = value? true : false ;\n\n      if (option === 'onClickAction') { // special case. InputOnClickOption: This field handles a state that needs to be updated\n        setOnClickOption(value);\n      }\n\n    })\n\n    // currentObject3D.material.blending = 2;\n  }, [currentObject3D])\n  \n  // Methods helpers\n\n  // x,y,z of mouse inside the 3d world. posterlens has this functions, but it doesnt work if I call it in onmousemove.\n  const reactGetMouse3Dposition = function(event) {\n    if (!window.pl) return\n    const v = window.pl.viewer;\n    if (!v) { console.warn('Cant retrieve mouse pos, not viewer defined'); return; }\n\n    const intersects = v.raycaster.intersectObject( v.panorama, true );\n    if ( intersects.length <= 0 ) return;\n    let i = 0;\n    while ( i < intersects.length ) {\n        if (intersects[i].object.name === 'invisibleWorld') {\n            const point = intersects[i].point.clone();\n            const world = v.panorama.getWorldPosition( new window.THREE.Vector3() );\n            point.sub( world );\n            const currentMP = [ Math.round(point.x.toFixed(2)/2), Math.round(point.y.toFixed(2)/2), Math.round(point.z.toFixed(2)/2) ];\n            setEditParams( Object.assign( {}, editParams, { currentMouse3DPosition: currentMP } ) );\n            return currentMP;        \n            \n        }\n        i++;\n    }\n  }\n  \n  \n  // handlers\n\n    // CALL to posTERLENS\n  function createViewer() {\n    var posterlensConfig = {}\n    if (!data) console.log('data variable not found.')\n    else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n    \n    // load from cache by default\n    var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n//    console.log(retrievedOptions.worlds[0].hotspots[7].rot);\n    posterlensConfig = (retrievedOptions?.worlds) ? retrievedOptions : posterlensConfig;\n    if (!posterlensConfig) {\n      console.error('No data loaded. Cant initialize');\n      return;\n    }\n\n    // CALL POSTERLENS\n    window.pl = document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).posterlens( posterlensConfig );\n    setPlOptions(window.pl.o);\n    window.pl.viewer.panorama.addEventListener('load', () => {\n      // init also selected obj if it was selected before\n      const lso = localStorage.getItem('lastSelectedObj.name');\n      if (lso) {\n        const selObj = window.pl.getObjectByName(lso);\n        if (selObj) setCurrentObject3D(selObj);\n      }\n      // Debug with chrome three inspector.\n      window.scene = window.pl.viewer.getScene();\n\n     if (isEditMode) window.stopAllAnimations(window.pl.viewer);\n\n    });\n  }\n\n  useEffect( () => { \n    window.pl.viewer.editMode = isEditMode;\n  }, [isEditMode]);\n  \n  function restartViewer() {\n    destroyViewer();\n    setPlOptions(null);\n    setIsEditMode(false);\n    delete(window.pl);\n    createViewer();\n    setCountRestarts(countRestarts + 1);\n    // and widgets are rerenderr because its key is associated to countRestarts, so they are loaded ok.\n  }\n\n  // helpers\n  function getOptionsByObject3D(object3D, option = null) {\n    const currentWorldOptions = getCurrentPanoramaParams();\n    let objectData = currentWorldOptions.hotspots.find( ht => ht.name === object3D?.name );\n    if (objectData && option) return objectData[option];\n    return objectData;\n  }\n  function getCurrentPanoramaParams() {\n    if (!plOptions) return null;\n    return plOptions.worlds.find( w => w.name === window.pl.viewer.panorama.name );\n  }\n  function getCurrentPanoramaParamsIndex() {\n    return plOptions.worlds.findIndex( w => w.name === window.pl.viewer.panorama.name );\n  }\n  // returns all pl with the new worldparmas at the place of the current panorama params\n  function plOptionsReplaceWorldParams(worldParams) {\n    const newOptions = Object.assign({}, plOptions);\n    newOptions.worlds[getCurrentPanoramaParamsIndex()] = {...worldParams};\n    return newOptions;\n  }\n  // returns all pl options replacing the hotspots in current panorama with that name\n  function plOptionsReplaceWorldParamsHotspot(name, objectData) {\n    const currentWorldParams = getCurrentPanoramaParams();\n    const getHotspotIndex   = currentWorldParams.hotspots.findIndex(ht => ht.name === name);\n    if ( getHotspotIndex < 0 ) return;\n    const newHotspots = [...currentWorldParams.hotspots];\n    newHotspots[getHotspotIndex] = objectData;\n    currentWorldParams.hotspots = newHotspots;\n    return plOptionsReplaceWorldParams(currentWorldParams);\n  }\n \n\n\n  // updates plOptions (the js object with all the config to load posterlens).\n  // updates the react state and the localstorage (it can be used outside of react). It also uses a callback that can be used outside react.\n  function syncPlOptionsAndLocalStorage(plOptions) {\n    setPlOptions(plOptions);\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    localStorage.setItem('pl.o', exportStr);\n    if (window.onSavePlOptionsCallback) window.onSavePlOptionsCallback(plOptions); // this fn is passed from outside react, and it can be useful\n    return exportStr;\n  }\n\n  // Object 3d in viewer (rot por scale) ===> Options in pl.\n  // =======================> Options pl\n  function singleObject3DToParams(object3D) {\n \n    const objectCurrentParams = getOptionsByObject3D(object3D); // worldParams.hotspots[objectHotspotIndex];\n    const objectNewParams     = { ...objectCurrentParams };\n\n    if (!objectCurrentParams) { alert('error: no objectCP'); return; }\n    // pos, scale and rot\n    objectNewParams.pos = [ round2(object3D.position.x), round2(object3D.position.y), round2(object3D.position.z) ];\n    objectNewParams.rot = [ round2(object3D.rotation.x), round2(object3D.rotation.y), round2(object3D.rotation.z) ];\n    // if (object3D.name === 'TEST') debugger\n    objectNewParams.scale = round2(object3D.scale.x);  \n\n    const newOptions = plOptionsReplaceWorldParamsHotspot(object3D.name, objectNewParams);\n    syncPlOptionsAndLocalStorage(newOptions);\n    \n    return objectNewParams;\n\n  }\n\n  // when picking up the object iwth mouse or from list of objects.\n  function selectObject(theObj) {\n    if (!theObj) return false;\n    // if (currentObject3D) currentObject3D.material.blending = 1;\n    window.lastSelectedObj = theObj;\n    setCurrentObject3D( theObj );\n    // look at the object, I dont know how to do it\n  }\n\n  // remove from data and in viewer\n  function removeCurrentObject() {\n    if (!currentObject3D) return;\n    const currentWorldOptions = getCurrentPanoramaParams();\n    const currentWorldOptionsIndex = getCurrentPanoramaParamsIndex();\n    let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === currentObject3D.name );\n    let newPlOptionsHotspots = [...currentWorldOptions.hotspots];\n    let hotspotIndex = newPlOptionsHotspots.findIndex( ht => ht.name === currentObject3D.name );\n    newPlOptionsHotspots.splice(hotspotIndex,1); //delte in array\n    const newO = {...plOptions};\n    newO.worlds[currentWorldOptionsIndex].hotspots = newPlOptionsHotspots;\n    syncPlOptionsAndLocalStorage(newO);\n    window.pl.viewer.panorama.remove( currentObject3D );\n    window.pl.viewer.panorama.remove( window.pl.viewer.scene.getChildByName(currentObject3D.name) ); // just in case (somethimes it doesn delete)\n    setCurrentObject3D(null);\n  }\n\n  // clone in data and reload the viewer.\n  function cloneCurrentObject() {\n    if (!currentObject3D) return;\n    const objectCurrentParams = Object.assign({}, getOptionsByObject3D(currentObject3D));\n    const currentWorldParams  = getCurrentPanoramaParams();\n    objectCurrentParams.name = \"cloned_\"+ objectCurrentParams.name;\n    objectCurrentParams.pos = [ objectCurrentParams.pos[0], objectCurrentParams.pos[1] + 50, objectCurrentParams.pos[2]]\n    currentWorldParams.hotspots.push(objectCurrentParams);\n    const newPlOptions = plOptionsReplaceWorldParams(currentWorldParams);\n    syncPlOptionsAndLocalStorage(newPlOptions);\n    // we need to restart the viewer to create it.\n    restartViewer();\n  }\n\n  // shows modal with all the options\n  function exportToTextarea() {\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    var textA = document.createElement( 'textarea' );\n    textA.textContent = exportStr;\n    textA.style.width = '100%'\n    textA.style.height= '500px';\n    window.pl.Modal('Export JSON', textA);\n  }\n\n    // args (inputs) ===> Options data\n    // given name of object and updated fields in the way { link : \"Hall\" }, we update the p.currentObjectData and the worldOptions\n    // in some cases, sync the 3d model with the new data in the case of the name.\n    const updateObjectSingleData = function( name, fields = {}, regenerate = true ) { \n      \n      const currentWorldOptions = getCurrentPanoramaParams();\n      let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === name );\n      if (objectHotspotIndex < 0 ) return;\n      // update the field\n      let objectData = currentWorldOptions.hotspots.find( ht => ht.name === name ); // all fields => { name: '', type: '' ... }\n      objectData = Object.assign({}, objectData, fields );\n      Object.keys(objectData).forEach( k =>  (objectData[k] === null)? delete(objectData[k]) : false ); // cleanup\n      const newPlOptions = plOptionsReplaceWorldParamsHotspot(name, objectData);\n      syncPlOptionsAndLocalStorage(newPlOptions);\n      \n      // regenerate the 3d object (remove and generate)\n      const object = window.pl.getObjectByName(name);\n      if (regenerate) {\n        if (name && window.pl.viewer.panorama && objectData ) {\n          window.pl.viewer.panorama.remove( object );\n          window.pl.createNewObjectFromParams(window.pl.viewer.panorama, objectData); // recreate the 3d in the viewer\n          const newObject = window.pl.getObjectByName(name);\n          setTimeout(()=>selectObject(newObject), 500);\n          \n        }\n        else {        \n          selectObject(object);\n        }\n      } // end regenrate\n\n      // special field: name. TODO: check name is not repeated.\n      if ( object && fields.hasOwnProperty('name') ) {\n        object.name = fields.name;\n        setCurrentObject3D(object);\n      }\n  }\n\n\n\n\n  // remove all viewer. I should free up memory before...\n  function destroyViewer() {\n    document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).innerHTML = '';\n  }\n\n  \n\n\n\n\n  return <React.Fragment>\n     \n    <Container className={ 'wrapper border pt-2' + (editParams.isExpertMode? ' expert-mode' : ' no-expert-mode') } style={{ maxWidth:'1200px' }}>\n      \n      <TopBarButtonsAndPanels currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} \n                              plOptions={plOptions} editParams={editParams} selectObject={selectObject}\n                             plOptionsReplaceWorldParams={plOptionsReplaceWorldParams} syncPlOptionsAndLocalStorage={syncPlOptionsAndLocalStorage}\n                             restartViewer={restartViewer} removeCurrentObject={removeCurrentObject} setAppMode={setAppMode} countRestarts={countRestarts} \n                             exportToTextarea={exportToTextarea} cloneCurrentObject={cloneCurrentObject} />\n\n      \n      <CanvasUI3D reactGetMouse3Dposition={reactGetMouse3Dposition} editParams={editParams} />\n      \n      { isEditMode? \n      <Row className=\"no-gutters\" >\n        <EditObjectControls_Bottom plOptions={plOptions} isEditMode={isEditMode} editParams={editParams} currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} reactGetMouse3Dposition={reactGetMouse3Dposition} \n                    singleObject3DToParams={singleObject3DToParams} setInfo={setInfo} updateObjectSingleData={updateObjectSingleData}\n                    getCurrentPanoramaParams={getCurrentPanoramaParams} selectObject={selectObject} getOptionsByObject3D={getOptionsByObject3D}\n                    appAsWidget={appAsWidget} plOptionsReplaceWorldParams={plOptionsReplaceWorldParams} syncPlOptionsAndLocalStorage={syncPlOptionsAndLocalStorage} \n                    onClickOption={onClickOption} setOnClickOption={setOnClickOption} />\n      </Row>\n      : null }\n\n\n      \n\n      \n      \n      {/* <Button className=\"btn-warning\" onClick={ () => localStorage.setItem('worldOptions', JSON.stringify(worldOptions))  }>Update</Button> */}\n      <div className='info' style={ {color: 'red'} }>{ info }</div>\n\n      \n\n      { isEditMode? <Widgets plOptions={plOptions} isEditMode={isEditMode} setIsEditMode={setIsEditMode}  \n                              setCurrentObject3D={setCurrentObject3D} plOptions={plOptions} singleObject3DToParams={singleObject3DToParams}\n                              refContainer={refContainer}\n                              key={countRestarts} restartViewer={restartViewer} \n                              plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                              getCurrentPanoramaParams={getCurrentPanoramaParams} setPlOptions={setPlOptions}\n                              \n                              \n                              /> : null }\n    </Container>\n    </React.Fragment>\n}\n","// This is the call of the React APP.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\n/* Variables that can be set from the outside:\n  window.appAsWidget = true;\n  window.expertMode = false;\n  window.plImgPath = 'http:// ... ' (not neccessary in appAsWidget mode)\n  window.basePath = 'http://' or 'relative/path/' (needed to show the Widgets imgs, for example) \n  window.onSavePlOptionsCallback = function(plOpts) { ... whatever you want to do }\n*/\nconst containers = document.querySelectorAll('.wrapper-posterlens-edit-container');\ncontainers.forEach( (el,i)=>{\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    el\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}