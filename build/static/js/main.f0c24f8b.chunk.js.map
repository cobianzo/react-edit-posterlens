{"version":3,"sources":["components/App.js","components/AppDemoPosterlens.js","components/Inputs/InputImage.js","helpers.js","components/SyncDataAlongApp.js","components/Inputs/InputData.js","components/Inputs/InputOnClickOption.js","components/Inputs/InputObject3D.js","components/Inputs/InputsRotation.js","components/Layout/CanvasUI3D.js","components/Layout/EditObjectControls_Bottom.js","components/Layout/PanelObjectData_Right.js","components/Layout/PanelListObjects_Left.js","components/Layout/PanelPanoramaInfo_Right.js","components/Layout/TopBarButtonsAndPanels.js","components/Widgets.js","components/AppEditPosterlens.js","index.js"],"names":["App","useEffect","console","log","window","PANOLENS","THREE","eval","stopAllAnimations","isAppAsWidget","appAsWidget","isEditModeDefault","location","hash","useState","setAppAsWidget","appMode","setAppMode","codeValidation","data","AppDemoPosterlens","retrievedOptions","JSON","parse","localStorage","getItem","worlds","error","plEditMode","pl","document","querySelector","posterlens","viewer","panorama","addEventListener","panolensPanoInstance","scene","getScene","createViewer","className","onDoubleClick","onClick","id","InputImage","p","infoAttr","setInfoAttr","pickupImageMode","setPickupImageMode","handlePickupImg","e","target","src","value","wrapperUpdateObjectSingleData","removeEventListener","handleCancelPickupImage","setTimeout","event","keyCode","InputGroup","input","option","Prepend","Text","label","Append","selected_img","tagName","getAttribute","Button","variant","getOptionsByObject3D","currentObject3D","round2","fl","numb","toFixed","reactGetMouse3Dposition","v","intersects","raycaster","intersectObject","length","i","object","name","point","clone","world","getWorldPosition","Vector3","sub","currentMP","Math","round","x","y","z","setEditParams","Object","assign","editParams","currentMouse3DPosition","warn","validateCode","code","includes","CryptoJS","MD5","toString","SyncPlOptions__LocalStorage","plOptions","setPlOptions","exportStr","stringify","setItem","onSavePlOptionsCallback","SyncObject3d__DataHotspot","object3D","objectCurrentParams","objectNewParams","pos","position","rot","rotation","scale","plOptionsReplaceWorldParamsHotspot","regenerate","regenerateObject","obj","selectObject","alert","SyncInputFieldset__DataHotspot","fields","currentWorldOptions","getCurrentPanoramaParams","objectHotspotIndex","hotspots","findIndex","ht","objectData","find","keys","forEach","k","newPlOptions","getObjectByName","hasOwnProperty","setCurrentObject3D","callbackFn","remove","creationCallback","createNewObjectFromParams","InputData","infoMsg","setInfoMsg","syncParams","theValue","deleteIfValue","fieldPair","lastSelectedObj","type","class","sync-3d","sync-default","currentValue","extensions","dims","minWidth","maxWidth","minHeight","maxHeight","onChange","base64","imgPath","onError","errMsg","onSubmit","preventDefault","currentTarget","FormControl","as","defaultValue","placeholder","closest","Form","Check","step","min","max","Group","defaultChecked","checkedValue","checked","uncheckedValue","key","options","map","viewInput","InputOnClickOption","selectRef","useRef","panoList","cardList","cardListCallback","setOnClickOption","updatedFields","onClickAction","modal","link","handleSelectOption","ref","onClickOption","active","InputObject3D","props","getCurrentValueFromObject3D","prop","parseInt","camera","distanceTo","split","val","theProp","field","Control","dataValue","updatePropObject3D","onMouseUp","InputsRotation","default","PI","newPos","normalize","multiplyScalar","setObjectPos","isSprite","z_move","direction","offset","distance","CanvasUI3D","placeObjectOnMouse","theObj","renderer","domElement","handlerPickupObject","selectedObj","handlerDropObject","isEditMode","shiftIsPressed","startsWith","isBlocked","objectLocked","OrbitControls","enabled","originalPos","Row","onMouseMove","POSTERLENS_CONTAINER_ID","EditObjectControls_Bottom","plImgPath","setImgPath","refImgPathInput","createRef","handlerScaleRotateObject","ctrlKey","SCALE_FACTOR","shiftKey","ROTATE_DEG","MOVE","material","set","translateY","translateX","newIsLocked","originalColor","color","r","g","b","el","classList","add","lastPosition","values","lastRotation","waitSave","clearTimeout","inputs","Container","style","marginTop","current","inputsCol","col_i","Col","sm","type1","PanelObjectData_Right","isExpertMode","isOpen","setIsOpen","currentObjectOptions","worldParams","alwaysLookatCamera","Fragment","objectOptions","lines","jsx","line","push","currentObjectOptionsJSX","PanelListObjects_Left","init","setInit","allUnblocked","setAllUnblocked","unlockAll","element","isBlockedBackup","blending","handleLockUnlockAll","handleLockUnlockEl","getCameraDirection","join","fov","objectsToPopupWhenVisible","PanelPanoramaInfo_Right","currentPanoOptions","currentPanoOptionsJSX","TopBarButtonsAndPanels","removeItem","restartViewer","countRestarts","exportToTextarea","removeCurrentObject","cloneCurrentObject","currentPanoParams","initialLookAt","initialFov","plOptionsReplaceWorldParams","Widgets","widgetsContainer","isWidgetsInit","setIsWidgetsInit","basePath","Array","from","appendControlItem","backgroundImage","float","onTap","numObjects","children","MAX_OBJECTS_PER_PANO","initNewObject","newObj","group","justCreatedBtn","countResets","params","newName","floor","random","getWorldDirection","image","defaultPosterImg","posterSphere","text","fontFamily","mesh","AppEditPosterlens","setIsEditMode","initialDataBackup","setInitialDataBackup","AUTO_START_EDIT_MODE","codeValidated","expertMode","setCountRestarts","posterlensConfig","o","lso","selObj","innerHTML","dispatchEvent","Event","lastCameraLookat","setControlCenter","lastPanoSelected","changePano","w","getCurrentPanoramaParamsIndex","newOptions","currentWorldParams","getHotspotIndex","newHotspots","querySelectorAll","formEl","inputDefault","SyncObject3d__Inputs","originalBlend","wireframe","editMode","currentWorldOptionsIndex","newPlOptionsHotspots","hotspotIndex","splice","newO","getChildByName","textA","createElement","textContent","width","height","Modal","parseFloat","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f0c24f8b.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport AppDemoPosterlens from './AppDemoPosterlens';\nimport AppEditPosterlens from './AppEditPosterlens';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default function App() {\n  \n  /* Retrieving possible variables from outside the App */\n  /* ------------------------ --------------------------- */\n  useEffect( () => {\n    console.log(`THREE and PANOLENS: ${window.PANOLENS}`,window.THREE);\n    window.THREE = eval('THREE');\n    window.PANOLENS = eval('PANOLENS');\n    window.stopAllAnimations = window.stopAllAnimations;\n  }, []);\n\n  const isAppAsWidget       = window.appAsWidget? true : false; // when we use it in Wordpress, in a page, then it's a widget app\n  const isEditModeDefault = window.location.hash === '#edit' || isAppAsWidget;\n  const [appAsWidget, setAppAsWidget] = useState(isAppAsWidget);\n  const [appMode, setAppMode] = useState(isEditModeDefault? 'edit' : 'demo');\n  const codeValidation = window.codeValidation;  \n  var data = window.data; // defined outside react, in the html calling this app\n  /* ------------------------ --------------------------- */\n\n  return appMode === 'edit' ?  <AppEditPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} codeValidation={codeValidation} /> : \n                               <AppDemoPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} />;\n  \n}","import React, {useEffect, createRef} from 'react'\n\nfunction AppDemoPosterlens( { data, setAppMode, appAsWidget } ) {\n    \n    useEffect(() => {\n        console.log('hello from useEffect in App');\n        // create the interactive 3d viewer with posterlens\n        createViewer(data);\n      }, []);\n\n    // CALL to posTERLENS\n    function createViewer(data) {\n        var posterlensConfig = {}\n        if (!data) console.log('data variable not found.')\n        else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n            \n        // load from cache by default\n        var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n\n        data = (retrievedOptions?.worlds) ? retrievedOptions : data;\n        if (!data) {\n        console.error('No data loaded. Cant initialize');\n        return;\n        }\n\n        window.plEditMode = false;\n        // CALL POSTERLENS\n        window.pl = document.querySelector('#posterlens-container').posterlens( data );\n        window.pl.viewer.panorama.addEventListener('load', (panolensPanoInstance) => {\n            console.log(`🎉🎉🎉🎉🎉🎉🎉🎉`, panolensPanoInstance);\n        });\n        window.scene = window.pl.viewer.getScene();\n    }\n\n\n\n    return (\n        <div className='container'>\n            <h1 onDoubleClick={()=> setAppMode('edit')} >Demo  \n                { appAsWidget? \n                    <button className='btn btn-sm btn-primary' onClick={ ()=> setAppMode('edit') }>Back</button>\n                    : null }\n            </h1> \n            <div className='posterlens-container' id='posterlens-container'></div>\n        </div>\n    )\n}\n\nexport default AppDemoPosterlens\n","import React, {useState, useEffect} from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\n/**\n * Input \"Select image\" that sets the option p.input.option to that image.\n * it's hidden in the plugin of WP, but we call the OnClick with JS. \n * */\nfunction InputImage( p ) {\n\n    // p : the props obj. \n    // @p.input (option, label)\n\n    // Local State\n    const [infoAttr, setInfoAttr] = useState(''); // a little message saying \"updating\", \"saved\" to the user\n    \n    // tool to fillup an image input by selecting an image in the screen.\n    const [pickupImageMode, setPickupImageMode] = useState(false);\n\n    // watch the activation of the mode \"pickup image in screen\"\n    useEffect(() => {\n        if (! pickupImageMode) return;\n        setInfoAttr('Pick up an image in the screen');\n        const handlePickupImg = (e) => {\n            if (e.target?.src) {\n                const value = e.target.src; // I tried using refs but here it doesnt read them\n                p.wrapperUpdateObjectSingleData(value);\n\n                // remove events to normal\n                setPickupImageMode(false);\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n                setInfoAttr(\"Image selected\"); setTimeout( () => setInfoAttr(''), 3000 );\n            }\n        };\n        const handleCancelPickupImage = function(event) {\n            if(event.keyCode === 27){ // clicking ESC\n                setPickupImageMode(false);\n                setInfoAttr(\"Cancelled\"); setTimeout( () => setInfoAttr(''), 3000 );\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n           }\n        };\n        document.addEventListener('click', handlePickupImg, 'pickupImg' );\n        document.addEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );\n        \n    }, [pickupImageMode]);\n    \n\n    function handlePickImage(event) {\n        // Convention with external code (outside this app): <li class=\"pl_selected_image\" data-url=\"https://...image.jpg\">\n        // optionally we can interact from outside react with tthe selection. If we have set an element with class 'pl_selected_image', we'll grab that img.\n        if (document.querySelector('.pl_selected_image')) {\n            const selected_img = document.querySelector('.pl_selected_image');\n            if (selected_img.tagName === 'IMG') \n                p.wrapperUpdateObjectSingleData( selected_img.getAttribute('src') );\n            else if ( selected_img.getAttribute('data-url') ) // we accept that the element with pl_sel.. class has an attribute with the url.\n                p.wrapperUpdateObjectSingleData( selected_img.getAttribute('data-url') );\n            \n            return;\n        }\n        // or standard behaviour. Any img in the window can be clicked and we use its src field as value.\n        setPickupImageMode(p.input.option) \n    }\n\n  return (\n    \n        <InputGroup className={ 'input-group-' + p.input.option }>\n\n            <InputGroup.Prepend>\n                <InputGroup.Text>\n                    { p.input.label }\n                </InputGroup.Text>\n            </InputGroup.Prepend>\n            <InputGroup.Append onClick={ handlePickImage  }>\n                <InputGroup.Text>\n                    { pickupImageMode? 'select an image' : <Button variant=\"primary\">Pick image</Button> }\n                </InputGroup.Text>\n            </InputGroup.Append>\n\n                <InputGroup.Append>\n                    <InputGroup.Text>\n                        {p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                    </InputGroup.Text>\n                </InputGroup.Append>\n                <span className=\"text-light bg-dark\">{ infoAttr }</span>\n        </InputGroup>\n\n  );\n}\n\nexport default InputImage;\n","import CryptoJS from \"react-native-crypto-js\";\n\nexport function round2(fl) { \n    var numb = fl;\n    if (typeof numb === 'number')\n     numb = numb.toFixed(2);\n    return numb;\n    //return 0.001;\n }\n\n// x,y,z of mouse inside the 3d world. posterlens has this functions, but it doesnt work if I call it in onmousemove.\nexport function reactGetMouse3Dposition(event, p ) {\n    /* { setEditParams, editParams } */\n    if (!window.pl) return\n    const v = window.pl.viewer;\n    if (!v) { console.warn('Cant retrieve mouse pos, not viewer defined'); return; }\n\n    const intersects = v.raycaster.intersectObject( v.panorama, true );\n    if ( intersects.length <= 0 ) return;\n    let i = 0;\n    while ( i < intersects.length ) {\n        if (intersects[i].object.name === 'invisibleWorld') {\n            const point = intersects[i].point.clone();\n            const world = v.panorama.getWorldPosition( new window.THREE.Vector3() );\n            point.sub( world );\n            const currentMP = [ Math.round(point.x.toFixed(2)/2), Math.round(point.y.toFixed(2)/2), Math.round(point.z.toFixed(2)/2) ];\n            p.setEditParams( Object.assign( {}, p.editParams, { currentMouse3DPosition: currentMP } ) );\n            return currentMP;        \n            \n        }\n        i++;\n    }\n  }\n\n  export function validateCode(code) {\n    return ['8a4a13b6c7ea2066b0aa6d72dd76c8e4'].includes(CryptoJS.MD5(code).toString());\n  }","import React from 'react'\nimport { round2 } from '../helpers'\n\n\n\n/**\n * No render, only functions\n */\n\n\n\n  // updates plOptions (the js object with all the config to load posterlens).\n  // updates the react state and the localstorage (it can be used outside of react). It also uses a callback that can be used outside react.\n  export function SyncPlOptions__LocalStorage(plOptions, setPlOptions) {\n    setPlOptions({ ... plOptions } );\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    localStorage.setItem('pl.o', exportStr);\n    if (window.onSavePlOptionsCallback) window.onSavePlOptionsCallback(plOptions); // this fn is passed from outside react, and it can be useful\n    return exportStr;\n  }\n\n\n /* \n  * WHAT: SYNCs  Object 3D ====> Inputs  !SHABBY WAY!\n  * WHEN: every time we select a new object, either picking it up on the Canvas UI or in the List f hotspots Left Panel\n  * called in AppEditPosterlens.js\n  */\nexport function SyncObject3d__Inputs( p ) {\n\n    /**\n     * currentObject3D\n     * getOptionsByObject3D\n     * setOnClickOption\n     */\n    // grab the options for the current selected object.\n    const options = p.getOptionsByObject3D(p.currentObject3D);\n    \n    const formsSync = document.querySelectorAll('[sync-3d]');\n    \n    // for every input, we grab its data `option` from the plOptions hotspot and update the input value.\n    formsSync.forEach( formEl => {\n      const option = formEl.getAttribute('sync-3d');\n      let value = (typeof options[option] !== 'undefined' )? options[option] : '';\n      \n      // special case. The option is an object (rot.0)\n      if (option.includes('.')) {\n        const fields = option.split('.');\n        value = options[fields[0]]? options[fields[0]][fields[1]] : '' ;\n      }\n      let inputDefault = formEl.getAttribute('sync-default'); // string \"true\" or \"false\"\n      inputDefault = typeof inputDefault === 'undefined' || inputDefault === 'false' ? '' : inputDefault;\n      if (value === '' && inputDefault) value = inputDefault;\n       \n      if (formEl.querySelector('input'))\n        formEl.querySelector('input').value = value;\n      if (formEl.querySelector('select'))\n        formEl.querySelector('select').value = value;\n      if (formEl.querySelector('input[type=\"checkbox\"]'))\n        formEl.querySelector('input[type=\"checkbox\"]').checked = value? true : false ;\n\n      if (option === 'onClickAction' && p.setOnClickOption ) { // special case. InputOnClickOption: This field handles a state that needs to be updated\n        p.setOnClickOption(value);\n      }\n\n      // special case: distance\n      if (option === 'distance')\n        formEl.querySelector('input').value = window.pl.viewer.camera.position.distanceTo(p.currentObject3D.position)\n    });\n}\n\n\n  // Object 3d in viewer (rot or scale) ===> Options in pl.\n  // =======================> Options pl\n  // WHERE: when finishing dragging an object in UI, change its properties with keyboard shortcut, or change properies from InputsRotation\n  export function SyncObject3d__DataHotspot( p ) {\n  \n\n    const object3D = p.object3D;\n    const objectCurrentParams = p.getOptionsByObject3D(object3D); // worldParams.hotspots[objectHotspotIndex];\n    const objectNewParams     = { ...objectCurrentParams };\n\n    if (!objectCurrentParams) { alert('error: no objectCP'); return; }\n    // pos, scale and rot\n    objectNewParams.pos = [ round2(object3D.position.x), round2(object3D.position.y), round2(object3D.position.z) ];\n    objectNewParams.rot = [ round2(object3D.rotation.x), round2(object3D.rotation.y), round2(object3D.rotation.z) ];\n    // if (object3D.name === 'TEST') debugger\n    objectNewParams.scale = round2(object3D.scale.x);  \n\n    const newOptions = p.plOptionsReplaceWorldParamsHotspot(object3D.name, objectNewParams);\n    SyncPlOptions__LocalStorage(newOptions, p.setPlOptions);\n    \n    if (p.regenerate)\n        regenerateObject(object3D, objectNewParams, (obj) => { p.selectObject(obj) } );\n\n    return objectNewParams;\n\n  }\n\n\n  // args (inputs) ===> Options data\n    // given name of object and updated fields in the way { link : \"Hall\" }, we update the p.currentObjectData and the worldOptions\n    // in some cases, sync the 3d model with the new data (in the case of the `name`).\n  export function SyncInputFieldset__DataHotspot( name, fields = {}, regenerate = true, p ) {\n    /*  p.getCurrentPanoramaParams,\n        p.plOptionsReplaceWorldParamsHotspot,\n        p.setPlOptions,\n        p.selectObject,\n        p.setCurrentObject3D \n    */\n\n\n    const currentWorldOptions = p.getCurrentPanoramaParams();\n    let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === name );\n    if (objectHotspotIndex < 0 ) return;\n    // update the field\n    let objectData = currentWorldOptions.hotspots.find( ht => ht.name === name ); // all fields => { name: '', type: '' ... }\n    objectData = Object.assign({}, objectData, fields );\n    Object.keys(objectData).forEach( k =>  (objectData[k] === null)? delete(objectData[k]) : false ); // cleanup\n    const newPlOptions = p.plOptionsReplaceWorldParamsHotspot(name, objectData);\n    SyncPlOptions__LocalStorage(newPlOptions, p.setPlOptions);\n    \n    // regenerate the 3d object (remove and generate)\n    const object = window.pl.getObjectByName(name);\n    if (regenerate) {\n      regenerateObject(object, objectData, (obj) => { p.selectObject(obj) } );\n    } // end regenrate\n\n    // special field: name. TODO: check name is not repeated.\n    if ( object && fields.hasOwnProperty('name') ) {\n      object.name = fields.name;\n      p.setCurrentObject3D(object);\n    }\n\n  }\n\n\n  // helper\n  function regenerateObject(object, objectData = null, callbackFn = null) {\n    if (!object) return false;\n    const name = object.name;\n    // if (!objectData) objectData = p.getOptionsByObject3D(object)\n    if (window.pl.viewer.panorama && objectData ) {\n        window.pl.viewer.panorama.remove( object );\n        objectData.creationCallback = callbackFn;\n        window.pl.createNewObjectFromParams(window.pl.viewer.panorama, objectData); // recreate the 3d in the viewer\n      }\n      else {\n        if (callbackFn)\n            callbackFn(object);\n      }\n  }","import React, { useState } from 'react'\n\nimport Button from 'react-bootstrap/Button';\n\nimport InputImage from './InputImage';\nimport { SyncInputFieldset__DataHotspot } from '../SyncDataAlongApp' // sync input changes into plOptions\nimport { FilePicker } from 'react-file-picker'\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\n\nexport default function InputData(p) {\n\n    const [infoMsg, setInfoMsg] = useState('');\n\n    const syncParams = {  getCurrentPanoramaParams: p.getCurrentPanoramaParams,\n                    plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot,\n                    setPlOptions: p.setPlOptions,\n                    selectObject: p.selectObject,\n                    setCurrentObject3D: p.setCurrentObject3D }\n \n    // udpated fied p.input.option with the value. Some fields have special treatment\n    const wrapperUpdateObjectSingleData = function (value) {\n        let theValue = value === p.input.deleteIfValue ? null : value; // with this we will remove the option from the params.\n        const fieldPair = { [p.input.option] : theValue };\n        // special fields that need special treatment\n        if ( p.input.option === 'background' && theValue === '' ) fieldPair[p.input.option] = 'transparent'; // no bg color => background: 'transparent'\n        if ( p.input.option === 'sprite' && theValue === true ) fieldPair.scale = p.currentObject3D.scale.x * 10; // if we convert into sprite we better scale or it will look tiny\n        if ( p.input.option === 'sprite' && !theValue ) fieldPair.scale = p.currentObject3D.scale.x / 10; // the other way as well.\n        let regenerate = ['name'].includes(p.input.option)? false : true; // regenerate bu default , except in some, like 'name'\n        console.log(syncParams)\n        SyncInputFieldset__DataHotspot( p.currentObject3D.name, fieldPair, regenerate, syncParams);\n        setInfoMsg('Applied!');  setTimeout(()=>setInfoMsg(''), 1000);\n        p.selectObject(window.lastSelectedObj);\n    }\n\n    const viewInput = function() {\n        \n        const currentValue = p.getOptionsByObject3D(p.currentObject3D, p.input.option);\n        // if (p.input.option === 'emissive') debugger\n        switch (p.input.type) {\n            case \"image-pick\":\n                return <InputImage input={p.input} currentObject3D={p.currentObject3D} getOptionsByObject3D={p.getOptionsByObject3D}\n                                    wrapperUpdateObjectSingleData={wrapperUpdateObjectSingleData} />\n            case \"image\": // not in use I think\n                return <InputGroup >\n                    <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FilePicker \n                extensions={['jpg', 'jpeg', 'png', 'gif', 'svg']}\n                dims={{minWidth: 100, maxWidth: 2500, minHeight: 100, maxHeight: 2500}}\n                onChange={base64 => SyncInputFieldset__DataHotspot( p.currentObject3D.name, { [p.input.option]: p.imgPath+base64.name}, true, syncParams ) }\n                onError={ errMsg => alert(errMsg) }\n            >\n                <Button variant='primary'>\n                Select image\n                </Button >\n                </FilePicker>\n                <Button variant='danger' onClick={ (e) => { wrapperUpdateObjectSingleData(null) } }>\n                    Clear\n                </Button >\n                <InputGroup.Append> <InputGroup.Text>{currentValue}</InputGroup.Text></InputGroup.Append>\n                </InputGroup>\n            case \"input\":\n            case \"textarea\":\n                return <form \n                            onSubmit={ (e) => { e.preventDefault(); \n                                    wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                        >\n                    <InputGroup>\n                    {p.input.label ? <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend> : null }\n                        <FormControl as={p.input.type} defaultValue={currentValue} onChange={ e => setInfoMsg('Enter to save') }  placeholder={ p.input.placeholder?? ' '} />\n                        <InputGroup.Append onClick={ (e) => infoMsg ? wrapperUpdateObjectSingleData(e.currentTarget.closest('form').querySelector(p.input.type).value) : false } >\n                            <InputGroup.Text> { infoMsg || currentValue  } </InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </form>             \n            case \"number\":\n                return  <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                             >\n                            <InputGroup>\n                                {p.input.label ? <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend> : null }\n                                <Form.Check type=\"number\" step={ p.input.step?? 1 } placeholder={ p.input.placeholder?? ' '}\n                                    defaultValue={currentValue} min={p.input.min?? 0 } max={p.input.max?? null } \n                                    onChange={ e => setInfoMsg('Enter to save') } />\n                                <InputGroup.Append onClick={ (e) => infoMsg ? wrapperUpdateObjectSingleData(e.currentTarget.closest('form').querySelector('input').value) : false } >\n                                    <InputGroup.Text> { infoMsg || currentValue  } </InputGroup.Text> \n                                </InputGroup.Append>\n                            </InputGroup>\n                        </form>\n            case \"checkbox\":\n                return <Form.Group>\n                <Form.Check type=\"checkbox\" label={p.input.label + `(${currentValue})`}\n                            defaultChecked={currentValue === p.input.checkedValue() || p.input.deleteIfValue === p.input.checkedValue() }\n                                onChange={ (e) => {\n                                    const value = e.currentTarget.checked? p.input.checkedValue(p.currentObject3D) : p.input.uncheckedValue(p.currentObject3D) ;\n                                    wrapperUpdateObjectSingleData(value);                                            \n                                } } />\n                </Form.Group>\n            case \"select\":\n                return <InputGroup>\n                     <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FormControl as='select' defaultValue={currentValue}\n                                        onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) } >\n                                <option key='nothing' value='' >---</option>\n                                {   \n                                    (typeof p.input.options === 'object') ? Object.keys(p.input.options)?.map( option => { \n                                        return <option key={option} value={ p.input.options[option] } >{ option }</option>\n                                    }) : null\n                                }\n                    </FormControl>\n                    <InputGroup.Append><InputGroup.Text> { currentValue } </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n                break;\n            case \"color\":\n                return <InputGroup sync-3d={p.input.option}>\n                        <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                        <input type=\"color\" defaultValue={ currentValue || p.input.deleteIfValue }\n                                onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) }></input>\n                        <InputGroup.Append><InputGroup.Text> {currentValue} </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n            default:\n            break;\n        }\n    }\n\n    return <div className={ p.input.type + '-type ' + (infoMsg? 'editing ' : 'no-editing ') + (p.class?? '') }\n                id={ 'input-' + p.input.option} \n                sync-3d={ ['image'].includes(p.input.type)? '' : p.input.option} sync-default={p.input.deleteIfValue? \"true\" : \"false\"}> { \n                viewInput()\n            }</div>\n}\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport InputData from './InputData';\nimport { SyncInputFieldset__DataHotspot } from '../SyncDataAlongApp' // sync input changes into plOptions\n\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction InputOnClickOption( p ) {\n\n    // using p.onClickOption and p.setOnClickOption. Those states are defined in parent.\n    const selectRef = useRef(null);\n    \n    const syncParams = {  getCurrentPanoramaParams: p.getCurrentPanoramaParams,\n        plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot,\n        setPlOptions: p.setPlOptions,\n        selectObject: p.selectObject,\n        setCurrentObject3D: p.setCurrentObject3D }\n\n    const handleSelectOption = (value) => {\n        if (!p.currentObject3D) return\n        p.setOnClickOption(value);\n        \n        const updatedFields = { onClickAction : value }\n        if ( ['pano', 'url', '' ].includes(value) ) \n            updatedFields.modal = null;\n        if ( ['iframe', 'card', '' ].includes(value) ) \n            updatedFields.link = null;\n        \n        SyncInputFieldset__DataHotspot( p.currentObject3D.name, updatedFields, true, syncParams );\n    }\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n        p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );    \n    \n    let cardList = {};\n    if (window?.cardListCallback) {\n        //        console.log('loading cardList callback', window.cardListCallback());\n        cardList = window.cardListCallback();\n    }\n    \n\n    if (!p.currentObject3D) return null;\n\n    return (\n        <div>\n            <InputGroup sync-3d='onClickAction'>\n                <InputGroup.Prepend> <InputGroup.Text>On click action</InputGroup.Text></InputGroup.Prepend>\n                <FormControl as='select' defaultValue={ p.getOptionsByObject3D(p.currentObject3D, 'onClickAction') }\n                                onChange={ (e) => handleSelectOption(e.target.value) } ref={selectRef} >\n                        <option key='nothing' value='' >---</option>\n                        <option value='pano'> Link to panorama</option>\n                        <option value='url'> Link to URL</option>\n                        <option value='iframe'> iframe popup</option>\n                        <option value='card'> Card</option>\n                </FormControl>\n            </InputGroup>\n            \n            \n            { p.onClickOption? \n                <div>\n                    <div>{ p.onClickOption }</div>\n                    { /** LINK TO PANORAMA */\n                    \n                    p.onClickOption === 'pano' ? \n                        <InputData  input={ { option: 'link', type: 'select', options: panoList, label:'PANORAMA', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D}\n                                    getCurrentPanoramaParams={p.getCurrentPanoramaParams} \n                                    plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot} \n                                    setPlOptions={p.setPlOptions}  selectObject={p.selectObject} \n                                    setCurrentObject3D={p.setCurrentObject3D}\n                                    />\n                                    : null}\n\n                    { /** LINK TO URL */ \n                    p.onClickOption === 'url' ? <div>\n                            <InputData  input={ { option: 'link', type: 'input',  label:'url', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D}\n                                    getCurrentPanoramaParams={p.getCurrentPanoramaParams} \n                                    plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot} \n                                    setPlOptions={p.setPlOptions}  selectObject={p.selectObject} \n                                    setCurrentObject3D={p.setCurrentObject3D} />\n                        </div> : null \n                    }\n\n                    { /** LINK TO IFRAME */ \n                    p.onClickOption === 'iframe' ? <div>\n                    <InputData  input={ { option: 'modal', type: 'input', label:'iframe url', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D}\n                            getCurrentPanoramaParams={p.getCurrentPanoramaParams} \n                                    plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot} \n                                    setPlOptions={p.setPlOptions}  selectObject={p.selectObject} \n                                    setCurrentObject3D={p.setCurrentObject3D} />\n                        </div> : null \n                    }\n\n                    { /** CARD TO OPEN */ \n                    p.onClickOption === 'card' ? <div>\n                    <InputData  input={ { option: 'modal', type: 'select', options: cardList, label:'Modal Card', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D}\n                            getCurrentPanoramaParams={p.getCurrentPanoramaParams} \n                                    plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot} \n                                    setPlOptions={p.setPlOptions}  selectObject={p.selectObject} \n                                    setCurrentObject3D={p.setCurrentObject3D} />\n                        </div> : null \n                    }\n                     \n                </div>        \n            : null }\n        </div>\n    )\n}\n\nexport default InputOnClickOption;\n","import React, { useState, useEffect, useRef } from 'react'\n/**\n * Represent an <input> in sync with props of the current3DObject inside the Canvas, which will also update the data in plOptions.  \n * The difference with InputData is that InputData is in sync only with the datamodel (the plOptions) of the current selected object.\n */\n\nimport { SyncObject3d__DataHotspot } from '../SyncDataAlongApp'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction InputObject3D( { input, props: p } ) {\n    if (!p.currentObject3D) return null;\n\n    /*  prop: 'rotation.x' , returns 0.54 (the value of currentObject3D.rotation.x) */\n    function getCurrentValueFromObject3D(prop) {\n        if (!p.currentObject3D) return null;\n        \n        if (prop === 'distance')  // special field. Distance:\n            return parseInt(window.pl.viewer.camera.position.distanceTo(p.currentObject3D.position))\n        \n        if (prop === 'scale.x')  // special field. Distance:\n            return parseInt(p.currentObject3D.scale.x*100)/100\n\n        const props = prop.split('.');\n        let val = p.currentObject3D;\n        props.forEach( theProp => val = val[theProp] );\n        return val;\n    }\n\n    /*  WHAT: updates property in Threejs UI. If 'prop' contains a `.` then updates the subproperty \n        prop: `rotation.x` */\n    function updatePropObject3D(prop, val) {\n        const dataValue = parseInt(val * 100)/100;\n        if (!p.currentObject3D) return null;\n        const props = prop.split('.');\n        // shabby way, but it accepts two levels of depth in the props\n        if (props.length === 1) \n            p.currentObject3D[props[0]] = dataValue;\n        else \n            p.currentObject3D[props[0]][props[1]] = dataValue; // updates currentobject3d.rotation.x = dataValue\n        // do we need to use setCurrentObject3D? Aparently not.\n    }\n\n \n\n    // preparing placeholders. initial value of the input:\n    const currentValue = (p.currentObject3D)? getCurrentValueFromObject3D(input.prop) : null;\n    \n    return (\n        <InputGroup sync-3d={input.field} className={'input-group ' + p.class?? '' } >\n            <InputGroup.Prepend> <InputGroup.Text>{input.label}</InputGroup.Text></InputGroup.Prepend>\n            <Form.Control type=\"range\" id={input.prop} name={input.prop} className='range-control'\n                min={input.min} max={input.max} defaultValue={currentValue} step={input.step}\n                onChange={ input.onChange?? ( (e) => {\n                    // update the object 3d to see the change\n                    updatePropObject3D(input.prop, e.target.value);\n                }) }\n                onMouseUp ={ input.onMouseUp?? ((e) => {\n                    // update the data only when finishing editing\n                    if (input.onChange) input.onChange(e);\n                    SyncObject3d__DataHotspot( { \n                        object3D: p.currentObject3D,\n                        getOptionsByObject3D: p.getOptionsByObject3D, \n                        setPlOptions: p.setPlOptions,\n                        selectObject: p.selectObject,\n                        plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot,\n                    \n                    } ) ;\n                    \n                    // updateDataObject(input.prop, e.target.value);\n                } ) }\n            /> \n            <InputGroup.Append> <InputGroup.Text>{ getCurrentValueFromObject3D(input.prop) }</InputGroup.Text></InputGroup.Append>\n        </InputGroup>\n    )\n}\n\nexport default InputObject3D\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport InputObject3D from './InputObject3D';\n\n\nfunction InputsRotation( p ) {\n\n    /** reuse of code by holding the props to export into one var. */\n    const props = {\n        getCurrentPanoramaParams: p.getCurrentPanoramaParams,\n        currentObject3D: p.currentObject3D, setCurrentObject3D: p.setCurrentObject3D, selectObject: p.selectObject,\n        getOptionsByObject3D: p.getOptionsByObject3D, \n        setPlOptions: p.setPlOptions,\n        plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot,\n        class: 'col-4 flex-nowrap'\n    }\n\n\n    return (\n        <div className={ p.class?? 'nothing' }>\n            <InputObject3D input={ {\n                                label: 'RotX',\n                                prop: 'rotation.x',\n                                field: 'rot.0',\n                                default: [],\n                                min: - Math.PI,\n                                max: Math.PI,\n                                step: 0.01\n                            } } \n                            props={props}\n                             />\n            \n            <InputObject3D input={ {\n                                label: 'RotY',\n                                prop: 'rotation.y',\n                                field: 'rot.1',\n                                default: [],\n                                min: - Math.PI,\n                                max: Math.PI,\n                                step: 0.01\n                            } }\n                            props={props}\n                            />\n\n            <InputObject3D input={ {\n                            label: 'RotZ',\n                            prop: 'rotation.z',\n                            field: 'rot.2',\n                            default: [],\n                            min: - Math.PI,\n                            max: Math.PI,\n                            step: 0.01\n                        } }\n                        props={props}\n                        />\n            <InputObject3D input={ {\n                            label: 'Dist',\n                            prop: 'distance',\n                            field: 'distance',\n                            default: [],\n                            min: 1,\n                            max: 460,\n                            step: 1,\n                            onChange: ((e) => {\n                                // update the object 3d to see the change\n                                var currentPos = p.currentObject3D.position.clone().normalize();\n                                const newPos = currentPos.multiplyScalar(e.target.value);\n                                window.pl.setObjectPos(p.currentObject3D, [newPos.x, newPos.y, newPos.z]);\n                            })\n                        } }\n                        props={props}\n                        />\n            <InputObject3D input={ {\n                            label: 'Scale',\n                            prop: 'scale.x',\n                            field: 'scale',\n                            default: [],\n                            min: p.currentObject3D.type === 'pl_text-3d'? 0.01 : 1,\n                            max: p.currentObject3D.type === 'pl_text-3d'? 3 : (p.currentObject3D.isSprite? 400 : 100),\n                            step: p.currentObject3D.type === 'pl_text-3d'? 0.01 : 1,\n                            onChange: ((e) => {\n                                // update the object 3d to see the change\n                                p.currentObject3D.scale.x = e.target.value;\n                                p.currentObject3D.scale.y = e.target.value;\n                                p.currentObject3D.scale.z = e.target.value;\n                                // SyncInputFieldset__DataHotspot( p.currentObject3D.name, { 'scale': e.target.value }, true, props);\n                                return false;\n                            }),\n                           // onMouseUp: ( e => { return false; } )\n                        } }\n                        props={props}\n                        />\n            \n        </div>\n    )\n}\nexport default InputsRotation\n","import React, { useEffect } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport {reactGetMouse3Dposition} from '../../helpers';\nimport { SyncObject3d__DataHotspot } from '../SyncDataAlongApp'\n\n\n// move an object closer or farther from the camera.\nexport function z_move(object3D, direction = 'close'){\n  let offset = 1.02;\n  if (direction === 'close') offset = 1/offset;\n              \n  var newPos = object3D.position.clone();\n  newPos.x *= offset; newPos.y *= offset; newPos.z *= offset;\n  const distance = window.pl.viewer.camera.position.distanceTo(newPos);\n  if ( (direction !== 'close' && distance > 500) || (direction === 'close' && distance < 40)) {\n      console.warn('we cant move that limit. Its out of 40 - 500m');\n      return\n  }\n  window.pl.setObjectPos(object3D, [newPos.x, newPos.y, newPos.z]);\n}\n\n\n/**\n * The div placeholder where posterlens.js loads the threejs panolens panorama\n */\nfunction CanvasUI3D( p ) {\n\n  function placeObjectOnMouse(event, theObj){\n      if (!theObj) return;\n      let newPos = reactGetMouse3Dposition(event, { setEditParams: p.setEditParams, editParams: p.editParams })\n      if (!newPos) return;\n      const v = new window.THREE.Vector3(...newPos).normalize().multiplyScalar(theObj.distance);\n      window.pl.setObjectPos(theObj, [v.x, v.y, v.z]);\n  }\n\n  // triggered on load, only once.\n  useEffect(() => { \n    if (!window.pl) return;\n    // console.log('pl updated in edit', window.pl);\n    const v = window.pl.viewer;\n    v.renderer.domElement.addEventListener('mousedown', (event) => { handlerPickupObject(event) });\n\n    \n    // --- move object \n    v.renderer.domElement.addEventListener('mousemove', function (event) {\n      placeObjectOnMouse(event, window.selectedObj)\n    });\n    v.renderer.domElement.addEventListener('mouseup', (event) => { handlerDropObject(event) });\n    // document.addEventListener('keydown', (event) => { handlerScaleRotateObject(event) } );\n    \n    // double click places the last obj where clicked. Useful when we lock objects.\n    v.renderer.domElement.addEventListener('dblclick', function (event) {\n      if (window.lastSelectedObj)\n        placeObjectOnMouse(event, window.lastSelectedObj);\n    });\n\n  }, [p.plOptions] );\n\n  // --- pickup object \n  const handlerPickupObject = (event) => {\n      if ( !p.isEditMode ) return;\n      if (window.pl.shiftIsPressed) return;      \n\n      const v = window.pl.viewer;\n      \n      const intersects = v.raycaster.intersectObject( v.panorama, true );\n      const theObj = intersects[0]? intersects[0].object : null ;\n      if (!theObj || !theObj.type?.startsWith('pl_')) return;\n      if (theObj.isBlocked) return;  // blocked object: that obj can't be selected\n      if (window.objectLocked && window.objectLocked !== theObj) return; // locking an object (ctr+q). Only that object can be selected\n\n      theObj.distance = v.camera.position.distanceTo(theObj.position);\n      window.selectedObj = theObj;\n    // console.log('Edit Object cLicked', window.selectedObj.name);\n      \n      v.OrbitControls.enabled = false;\n      window.selectedObj.originalPos = window.selectedObj.position;                \n      \n      // State: assign lastSelectedObj and update state currentObject3D\n      p.selectObject(theObj);\n  }\n\n  // --- drop object \n  const handlerDropObject = (event) => {  \n      if ( !p.isEditMode || !window.selectedObj) return;\n      if (!window.selectedObj.type.startsWith('pl_')) return;\n      const v = window.pl.viewer;\n      v.OrbitControls.enabled = true;\n      // p.singleObject3DToParams(window.selectedObj);\n      SyncObject3d__DataHotspot( { \n                  object3D: window.selectedObj,\n                  getOptionsByObject3D: p.getOptionsByObject3D, \n                  setPlOptions: p.setPlOptions,\n                  plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot} );\n      window.selectedObj = null;\n  };\n\n    return (\n        <Row>\n          <div className='w-100' onMouseMove={ (e) => reactGetMouse3Dposition(e, { setEditParams: p.setEditParams, editParams: p.editParams } ) }>\n           <div  id={p.editParams.POSTERLENS_CONTAINER_ID} className='posterlens-container'></div>\n          </div>\n        </Row>\n    )\n}\n\nexport default CanvasUI3D\n","import React, {useEffect, useState, createRef} from 'react';\n\n// the <inputs ...\nimport InputData from '../Inputs/InputData';\nimport InputOnClickOption from '../Inputs/InputOnClickOption';\nimport InputsRotation from '../Inputs/InputsRotation';\n\nimport { SyncObject3d__DataHotspot } from '../SyncDataAlongApp'\nimport { reactGetMouse3Dposition } from '../../helpers';\nimport { z_move } from './CanvasUI3D';\n\n// bootstrap 4 elements\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction EditObjectControls_Bottom( p ) {\n\n    const [imgPath, setImgPath] = useState( window.plImgPath?? 'resources/'); // imgs for 3d textures\n    const refImgPathInput = createRef();\n\n    // Important note. Inside a new EventListener, we can't access to updated props. The props will always have the initial value\n    // That's why I use window.selectedObj instead of p.currentObject3D, to access to the lastest Position.\n\n    useEffect(() => { \n        if (!window.pl) return;\n        document.addEventListener('keydown', (event) => { handlerScaleRotateObject(event) } );    \n    }, [] );\n\n    const handlerScaleRotateObject = function(event) {\n        // we cant use the state currentObject3D, because it will not get the latest value. It will be initialzied to the time of creation og this handler\n        if (!window.lastSelectedObj) return;\n        if (event.ctrlKey) {\n            let SCALE_FACTOR    = p.editParams.SCALE_FACTOR * ( event.shiftKey? 2 : 1);\n            let ROTATE_DEG      = p.editParams.ROTATE_DEG * ( event.shiftKey? 2 : 1);     \n            let MOVE            = 0.5 * ( event.shiftKey? 6 : 1);\n            \n            if (window.lastSelectedObj.material.type === \"SpriteMaterial\") {\n                // for a sptrite some actions break it.\n                if (!['4','5','+','-','q'].includes(event.key)) return\n            }\n            switch (event.key) {\n                case '+': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x * SCALE_FACTOR, window.lastSelectedObj.scale.y * SCALE_FACTOR, window.lastSelectedObj.scale.z * SCALE_FACTOR );      break;\n                case '-': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x / SCALE_FACTOR, window.lastSelectedObj.scale.y / SCALE_FACTOR, window.lastSelectedObj.scale.z / SCALE_FACTOR );      break;\n                case 'r': window.lastSelectedObj.rotation.x = parseInt(100*(window.lastSelectedObj.rotation.x + ROTATE_DEG))/100;  break;\n                case 't': window.lastSelectedObj.rotation.x = parseInt(100*(window.lastSelectedObj.rotation.x - ROTATE_DEG))/100;  break;\n                case 'f': window.lastSelectedObj.rotation.y = parseInt(100*(window.lastSelectedObj.rotation.y + ROTATE_DEG))/100;  break;\n                case 'g': window.lastSelectedObj.rotation.y = parseInt(100*(window.lastSelectedObj.rotation.y - ROTATE_DEG))/100;  break;\n                case 'v': window.lastSelectedObj.rotation.z = parseInt(100*(window.lastSelectedObj.rotation.z + ROTATE_DEG))/100;  break;\n                case 'b': window.lastSelectedObj.rotation.z = parseInt(100*(window.lastSelectedObj.rotation.z - ROTATE_DEG))/100;  break;\n                case '4': z_move(window.lastSelectedObj, 'close'); break;\n                case '5': z_move(window.lastSelectedObj, 'far'); break;\n                case 'w': case 'W': window.lastSelectedObj.translateY( MOVE );  break;\n                case 's': case 'S': window.lastSelectedObj.translateY( -MOVE );  break;\n                case 'd': case 'D': window.lastSelectedObj.translateX( MOVE );  break;\n                case 'a': case 'A': window.lastSelectedObj.translateX( -MOVE );  break;\n\n                case 'q': // locking element.\n                const newIsLocked = window.objectLocked? false : true; // swap \n                if (newIsLocked) {\n                    window.lastSelectedObj.originalColor = newIsLocked? window.lastSelectedObj.material.color : null;\n                    window.lastSelectedObj.material.color = { r:1, g:0, b:0};\n                    window.pl.el.classList.add('locked-element');\n                    window.objectLocked = window.lastSelectedObj;\n                } else {\n                    window.objectLocked.material.color = window.objectLocked.originalColor;\n                    window.pl.el.classList.remove('locked-element');\n                    window.objectLocked = null;\n                }                    \n                break;\n                case 'z': // undo displacement\n                    if (window.lastSelectedObj.lastPosition) \n                        window.lastSelectedObj.position.set(... Object.values(window.lastSelectedObj.lastPosition) );\n                    if (window.lastSelectedObj.lastRotation) \n                        window.lastSelectedObj.rotation.set(... Object.values(window.lastSelectedObj.lastRotation) );\n                    \n                    window.lastSelectedObj.lastPosition = window.lastSelectedObj.lastRotation = null;\n                break;\n            }\n            p.setCurrentObject3D(window.lastSelectedObj);\n            if (window.waitSave) \n                clearTimeout(window.waitSave);\n            window.waitSave = setTimeout( () => {\n                SyncObject3d__DataHotspot( { \n                    object3D: window.lastSelectedObj,\n                    getOptionsByObject3D: p.getOptionsByObject3D, \n                    setPlOptions: p.setPlOptions,\n                    plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot} );\n                clearTimeout(window.waitSave);\n            }, 200);\n            \n            \n        }\n    }\n\n\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n        p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );\n    const inputs = [\n        [\n            { option: 'image', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Img', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'alpha', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Alpha', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'text', type: 'input', label:'Text', active: [ 'pl_text-2d', 'pl_text-3d'] },\n            { option: 'emissive', type: 'color', label:'Emissive Color', active: [ 'pl_text-3d'], deleteIfValue:'#ffffff' },\n            { option: 'color', type: 'color', label:'Text Color', active: [ 'pl_text-2d'], deleteIfValue:'#ffffff' },\n            { option: 'background', type: 'color', label:'Background', active: [ 'pl_text-2d'], deleteIfValue:'#000000' },\n            // TODO: we need to give an option for bg transparent \n            { option: 'alwaysLookatCamera', type: 'checkbox', label:'alwaysLookatCamera', checkedValue: () => true, uncheckedValue: () => false, active: [ 'pl_text-2d', 'pl_text-3d', 'pl_poster3d' ], deleteIfValue: true },\n            { option: 'sprite', type: 'checkbox', label:'sprite 2D', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'posterSphere', type: 'checkbox', label:'is sphere', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            //{ option: 'link', type: 'select', options: panoList, label:'Go to pano', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n            //{ option: 'modal', type: 'input', label:'modal', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'], deleteIfValue:'' },\n            { option: 'opacity', type: 'number', step: 0.05, min:0, max:1, label:'Opacity', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '1' },\n        ],\n        [\n        { option: 'animatedMap', type: 'number', label:'frames', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'animatedMapSpeed', type: 'number', label:'speed', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'rotationX', type: 'number', label:'℺ animat', placeholder: 'x', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationY', type: 'number', label:'', placeholder: 'y',  step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationZ', type: 'number', label:'', placeholder: 'z',  step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'animated', type: 'select', label:'Glow animation', options: { 'always' : 'always', 'only on hover' : 'hover' }, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'popupWhenVisible', type: 'number', step: 10, label:'Pops up when in camera', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        ]\n    ];\n    const inputsCol3 = [\n        { option: 'hoverText', type: 'textarea', label:'hoverText', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] },\n        { option: 'hoverTextClass', type: 'select', options: { type1 : 'type1' }, label:'Hover box style', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n    ]\n    return (\n      <Container className=\"edit-panel\">\n        { /* The name of the object */ }\n        {p.currentObject3D? \n        <Row className='no-gutters' style={{ marginTop: '-20px' }}>\n            <InputData   input={ { option: 'name', type: 'input', label:'', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} \n                            getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                            plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot}\n                            setPlOptions={p.setPlOptions}\n                            selectObject={p.selectObject}\n                            setCurrentObject3D={p.setCurrentObject3D}\n                            class=\"col-5 mb-3\"\n                            />\n\n        { /* The inputs in sync with the 3d object */ }\n            <div className='col-7'>\n                <InputsRotation  class=\"row\"\n                            getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                            currentObject3D={p.currentObject3D} setPlOptions={p.setPlOptions}\n                            plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot}\n                            getOptionsByObject3D={p.getOptionsByObject3D}\n                            selectObject={p.selectObject}\n                            setCurrentObject3D={p.setCurrentObject3D} />\n            </div>\n        </Row> : null }        \n\n        { /* The imgs path (not needed anymore) */}\n        { !p.appAsWidget?\n        <InputGroup>\n            <InputGroup.Prepend> <InputGroup.Text>imgs path</InputGroup.Text></InputGroup.Prepend>\n            <FormControl as='input' defaultValue={imgPath} ref={refImgPathInput} \n                        onChange={ (e) => refImgPathInput.current? setImgPath(refImgPathInput.current.value) : null } />\n            <InputGroup.Append><InputGroup.Text> {imgPath} </InputGroup.Text> </InputGroup.Append>\n        </InputGroup> : null }\n\n        <Row>\n            {   /**  */\n                inputs.map( (inputsCol, col_i) => {\n                    return <Col sm='4' className='border bg-light' key={'column-'+col_i}>\n                        <label className='d-block h5'>{ col_i === 0 ? 'Main props' : 'Animation' }</label>\n                        { \n                            inputsCol.map( (input, i) => {\n                                if ( !p.currentObject3D ) return null;\n                                if ( !input.active.includes(p.currentObject3D.type) ) return null;\n                                return <InputData   input={input} imgPath={imgPath} key={'input-'+i}\n                                                    currentObject3D={p.currentObject3D} setCurrentObject3D={p.setCurrentObject3D}\n                                                    getOptionsByObject3D={p.getOptionsByObject3D}\n                                                    getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                                                    plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot}\n                                                    setPlOptions={p.setPlOptions}\n                                                    selectObject={p.selectObject}\n                            />\n                            } )\n                        }\n                    </Col>\n                })\n            }\n            <Col sm=\"4\" className=\"border bg-light\">\n                <label className='d-block h5'>Action</label>\n                <InputOnClickOption key={p.getOptionsByObject3D? p.getOptionsByObject3D.name : 'not'} plOptions={p.plOptions} \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D}\n                                    onClickOption={p.onClickOption} setOnClickOption={p.setOnClickOption} \n                                    getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                                    plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot}\n                                    setPlOptions={p.setPlOptions}\n                                    selectObject={p.selectObject}\n                                    setCurrentObject3D={p.setCurrentObject3D}\n                />\n\n                { inputsCol3.map( (input, i) => <InputData  input={input} key={'input-3rd-column-' + i }\n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D}\n                                    onClickOption={p.onClickOption} setOnClickOption={p.setOnClickOption} \n                                    getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                                    plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot}\n                                    setPlOptions={p.setPlOptions}\n                                    selectObject={p.selectObject}\n                                    setCurrentObject3D={p.setCurrentObject3D} /> ) }\n                \n            </Col>\n        </Row>\n        \n        {/* <img width='50' className='use-me' src={ window.basePath+'resources/arboles.png' } /> */}\n      </Container>        \n  );\n}\n\nexport default EditObjectControls_Bottom;\n","import React, {useState} from 'react'\nimport {round2} from '../../helpers';\n\nexport default function PanelObjectData_Right( p ) {\n\n    // State. We can minimize the panel with onclick\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n    // info in a panel of the object. Gets updated when the currentObject3D updates. It means , when it's clicked for instance.\n    function currentObjectOptions() {\n        if (!p.currentObject3D) return;\n        const worldParams = p.getCurrentPanoramaParams();\n        if (!worldParams) return;\n        let objectOptions = worldParams.hotspots.find( ht => ht.name === p.currentObject3D?.name );\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentObjectOptionsJSX() {\n        const objectOptions = currentObjectOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <h4>{p.currentObject3D?.name}<small> ({p.currentObject3D?.type})</small></h4>\n\n            <div className={ isOpen? 'd-block' : 'd-none' }>\n                \n                Pos: {round2(p.currentObject3D?.position.x)} {round2(p.currentObject3D?.position.y)} {round2(p.currentObject3D?.position.z)}\n                <br/>\n                Rot: x {round2(p.currentObject3D?.rotation.x)} / y {round2(p.currentObject3D?.rotation.y)} / z {round2(p.currentObject3D?.rotation.z)}\n                { currentObjectOptions()?.alwaysLookatCamera? '(alwayslookatcamera)' : null }\n                <br/>\n                Scale: {round2(p.currentObject3D?.scale.x)} {round2(p.currentObject3D?.scale.y)} {round2(p.currentObject3D?.scale.z)}\n            \n            \n                <React.Fragment>\n                <br/>\n                <b>Object Info in options:</b> <br/>\n                {currentObjectOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n\n}\n","import React, {useState, useEffect} from 'react'\n\nimport Col from 'react-bootstrap/Col'\n\n\nexport default function PanelListObjects_Left( p ) {\n\n    // init is the current pano params, where we grab the objects to show (hotspots)\n    const [init, setInit] = useState(null);\n    const [allUnblocked, setAllUnblocked] = useState(false);\n\n    useEffect(() => {\n        console.log('🚴🏼‍♀️Hello from PanelListObjects_Left')\n        setInit(p.getCurrentPanoramaParams());\n    }, [p.plOptions])\n\n    const handleLockUnlockEl = function(el) {                   \n        const theObj = window.pl.getObjectByName(el.name);\n        if (theObj) {\n            el.isBlocked = theObj.isBlocked = !el.isBlocked;\n            theObj.material.blending = el.isBlocked? 3 : 1;\n        }\n    }\n    const handleLockUnlockAll = function(e) {\n        if (  ! init || ! init.hotspots ) return false;\n        const unlockAll = !allUnblocked;\n\n        if (unlockAll) {\n            init.hotspots.forEach((element,i) => {\n                element.isBlockedBackup = element.isBlocked;\n                const theObj = window.pl.getObjectByName(element.name);\n                element.isBlocked = false; \n                if (theObj) {\n                    theObj.isBlocked = false;\n                    theObj.material.blending = 1;\n                }\n            });\n        } else {\n            init.hotspots.forEach((element,i) => {\n                element.isBlocked = element.isBlockedBackup;\n                const theObj = window.pl.getObjectByName(element.name);\n                if (element.isBlocked) {\n                    theObj.material.blending = 3;\n                    theObj.isBlocked = true;\n                }\n            });\n        }\n        setAllUnblocked(unlockAll);\n        return false\n    }\n\n\n    // more info for developers. Option popup when visible for an object.\n    const getObjectsShowWhenVisible = function() {\n        if (!window.pl) return 'not loaded';\n        if (!window.pl.viewer.panorama.objectsToPopupWhenVisible) return 'none';\n        const jsx = <div> {Object.keys(window.pl.viewer.panorama.objectsToPopupWhenVisible).map( k=>{\n            const [min,max] = window.pl.viewer.panorama.objectsToPopupWhenVisible[k];\n            return <p key={k}>{k} : {min}º, {max}º</p>;\n        })} </div>\n        return jsx;\n    }\n    const elementIcon = function(el) {\n        if (el.isBlocked) return <span>🔑</span>;\n        if (el.type === 'text-3d') return <span>𝔸</span>;\n        if (el.type === 'text-2d') return <span>𝐴</span>;\n        return <span>🍞</span>;\n    }\n    return (\n        <Col className={ (allUnblocked? 'all-unblocked ' : '') + 'list-objects' } sm='2'>\n            List Hotposts in Pano Options\n            <button className={ (allUnblocked? 'btn-danger' : 'btn-primary') + ' btn btn-sm' } \n                    onClick={ (e) => { e.preventDefault(); handleLockUnlockAll(e) }  }>\n                {(allUnblocked? 'Activate' : 'Deactivate')} locking objects\n            </button>\n            {init && p.plOptions?.worlds ? \n            <ul className='list-unstyled'>\n                { init.hotspots.map((element,i) => {\n                    return <li key={i} className={element.isBlocked? 'is-blocked' : '' } >\n                        <div onClick={ e => handleLockUnlockEl(element) }\n                             className='float-left mr-3'>{ elementIcon(element) }</div>\n                        <div onClick={ () => {\n                                // get object 3d\n                                const theObj = window.pl.getObjectByName(element.name);\n                                p.selectObject(theObj);\n                                }} \n                                className={ (p.currentObject3D?.name === element.name )? 'object-selected' : '' } \n                        >\n                            {element.name} \n                            <small className='ml-3'>{element.type}</small>\n                        </div>\n                    </li>\n                })}\n            </ul>\n            : null }\n\n           <br/> { /** curiously this works, I dont need to use any State, it works ok with the pl object fn. \n                    *    It is because of the mousemove event in App.js. It makes recalculate this component aparently\n                    */}\n            { p.editParams.isExpertMode? <React.Fragment>\n                Camera: { window.pl? window.pl.getCameraDirection('lookatPoint').join(', ')  : null }\n                <br/>\n                Angle: { window.pl? Math.round(window.pl.getCameraDirection('rad') * 100)/100 : null }\n                    rad :: { window.pl? Math.round(window.pl.getCameraDirection('deg')) : null }º\n                    <br/>\n                    Fov: { window.pl? window.pl.viewer.camera.fov : null }\n                    <br/>\n                    MousePos: { p.editParams.currentMouse3DPosition.join(', ') }\n                    <br/>\n                    <br/>\n                    <i>panorama.objectsToPopupWhenVisible:</i> { init? getObjectsShowWhenVisible() : null }\n            </React.Fragment> : null }\n        </Col>\n    )\n}\n","import React, {useState} from 'react'\n/**\n * WHAT:    Shows a panel with the config data of the current Panorama.\n * WHERE:   Top Right of the screen in absolute position, semiyellow bg panel.\n * WHEN:    Shown when there is no object selected only. \n */\nexport default function PanelPanoramaInfo_Right(p) {\n\n    // State\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n    // info in a panel of the panorama.\n    function currentPanoOptions() {\n        const worldParams = p.getCurrentPanoramaParams();\n        if (!worldParams) return;\n        let objectOptions = {... worldParams }\n        delete(objectOptions.hotspots)\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentPanoOptionsJSX() {\n        const objectOptions = currentPanoOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <div className={ isOpen? 'd-block' : 'd-none' }>            \n                <React.Fragment>\n                    <br/>\n                    <b>Panorama in options:</b> <br/>\n                    {currentPanoOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport CryptoJS from \"react-native-crypto-js\";\n\n/**\n * Panels and Buttons on top of the Canvas3D UI. \n */\n\nimport Row from'react-bootstrap/Row';\nimport Button from'react-bootstrap/Button';\nimport PanelObjectData_Right from './PanelObjectData_Right';\nimport PanelListObjects_Left from './PanelListObjects_Left';\nimport PanelPanoramaInfo_Right from './PanelPanoramaInfo_Right';\n\nimport { SyncPlOptions__LocalStorage } from '../SyncDataAlongApp'\n\nexport default function TopBarButtonsAndPanels( p ) {\n    \n\n    return (\n    <Row className=\"top-buttons\">\n        { p.currentObject3D? \n            <PanelObjectData_Right    currentObject3D={p.currentObject3D} getCurrentPanoramaParams={p.getCurrentPanoramaParams} editParams={p.editParams} /> \n            : \n            <PanelPanoramaInfo_Right  currentObject3D={p.currentObject3D} getCurrentPanoramaParams={p.getCurrentPanoramaParams} editParams={p.editParams} /> \n        }\n        { p.plOptions?\n             <PanelListObjects_Left currentObject3D={p.currentObject3D} plOptions={p.plOptions} selectObject={p.selectObject} editParams={p.editParams}\n                                setCurrentObject3D={p.setCurrentObject3D} getCurrentPanoramaParams={p.getCurrentPanoramaParams} /> : null }\n        \n\n                <Button className=\"btn btn-danger btn-sm\" onClick={ (e) => { localStorage.removeItem('pl.o'); p.restartViewer(); }  }>\n                    Undo changes\n                </Button>\n        { p.plOptions && p.editParams.isExpertMode ? \n            <React.Fragment>\n\n                <Button className=\"btn-sm\" onClick={ e => p.restartViewer() }>\n                    Restart <span className=\"badge\">{p.countRestarts}</span>\n                </Button>        \n                \n            </React.Fragment>\n             : null }\n        { p.editParams.isExpertMode ? \n            <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ () => p.exportToTextarea() }>\n                Export\n            </Button> : null }\n\n        { p.currentObject3D?\n            <React.Fragment>\n                <Button className=\"btn btn-danger btn-sm\" onClick={ p.removeCurrentObject }>\n                    Delete\n                </Button> \n                <Button className=\"btn btn-success btn-sm\" onClick={ p.cloneCurrentObject }>\n                    Clone\n                </Button>\n                <Button className=\"btn btn-warning btn-sm\" onClick={ ()=> { p.setCurrentObject3D(null); window.lastSelectedObj = null; } }>\n                    Unselect\n                </Button>\n            </React.Fragment> \n            : null }\n\n         <Button variant=\"outline-secondary btn-sm ml-3\" onClick={ (e)=> p.setAppMode('demo') }>\n            Demo\n        </Button>\n\n\n\n        {/* Button to set current view a default view of the pano */}\n        <Button variant=\"primary\" className='ml-5 set-camera-view' onClick={ (e)=> {                 \n                const currentPanoParams =  p.getCurrentPanoramaParams();\n                currentPanoParams.initialLookAt = window.pl.getCameraDirection('lookatPoint');\n                currentPanoParams.initialFov = window.pl.viewer.camera.fov;\n                const newOptions = p.plOptionsReplaceWorldParams(currentPanoParams);\n                SyncPlOptions__LocalStorage(newOptions, p.setPlOptions);\n                localStorage.setItem('lastCameraLookat', window.pl.getCameraDirection('lookatPoint'));\n                // alert('Initial View of panorama set to current view 👍🏽');\n            } }>\n            Set camera view\n        </Button>\n    </Row>)\n}\n","import {useEffect, useState} from 'react';\n\n\nfunction Widgets( p ) {\n\n    const msgMaxObjects = `You can't create more elements. Upgrade the plugin for infinite posters.`;\n\n    const v = window.pl?.viewer;\n    if (window.pl?.el) {\n        const widgetsContainer = window.pl.el.querySelector('div:last-child');\n        if (widgetsContainer) widgetsContainer.classList.add('pl-widgets');\n    }\n\n    const [isWidgetsInit, setIsWidgetsInit ] = useState(false);\n    const initWidgets = function() {\n        if (isWidgetsInit) return;\n        setIsWidgetsInit(true);\n        if (typeof window.basePath === 'undefined') window.basePath = './';\n        // Widgets\n        // Create poster buttons. One for every type.\n        Array.from([ /*'link', */\n                    // 'poster-sprite', // type poster3d + sprite = true\n                    'poster3d',\n                    // 'poster3d-sphere', // type poster3d + posterSphere = true\n                    'text-3d', // doesnt work\n                    'text-2d',\n                   // 'text-2d-sprite' // type text-2d + sprite = true \n            ] ).forEach( type => {\n                v.appendControlItem({\n                    id: 'edit-controls',\n                    style: {\n                        backgroundImage: 'url('+window.basePath+'resources/widget-'+type+'.png)',\n                        float: 'left'\n                    },    \n                    onTap: () => { \n                        const numObjects = window.pl.viewer.panorama.children.length;\n                        if (p.editParams.MAX_OBJECTS_PER_PANO <= (numObjects-1) ) {\n                            alert(msgMaxObjects);\n                            return;\n                        }\n                        const { newObj, objectData } = initNewObject( type );\n                        console.log('Created new obj: ', { newObj, objectData })\n                    },\n                    group: 'editmode'\n                });\n                //shabby way to add a class to this btn. (panolens doesnt do it)\n                const justCreatedBtn = window.pl.el? window.pl.el.querySelector('.pl-widgets > span:last-child') : null;\n                if (justCreatedBtn) {\n                    justCreatedBtn.classList.add('widget');\n                    justCreatedBtn.classList.add('widget-btn-'+type);\n                }\n                \n        })\n    }\n    useEffect(() => {\n        console.log('Hellow from widgets');\n        if (window.pl && p.isEditMode) \n            //if (!p.pl.viewer.widget) \n                initWidgets() // TODO: if deactivate and reactivate the editmode, the widgets are created again (duplicated)\n                // we can use pl.viewer.widget.barElement.remove() when deactivated to delete the previous ones. But ideally we could avoid calling this init if they exist.\n    }, [p.countResets]);\n\n\n\n    const initNewObject = function(type = 'poster3d') {\n        // get Scene by name:\n        const params = {\n            name:  window.newName?? `new_${type}_` + Math.floor(Math.random() * 10000),\n            type: type,\n            pos: Object.values(v.camera.getWorldDirection(new window.THREE.Vector3()).multiplyScalar(300)), // this normalizes but not to unitary, but to 300 long\n        }\n        switch (type) {\n            // case 'link': break;\n            case 'poster3d':    // with window.defaultPosterImg we can set up a default img on creation, from outside react.\n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n            break;\n            case 'poster3d-sphere': \n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n                params.type = 'poster3d';\n                params.posterSphere = true;\n            break;\n            //  case 'poster-sprite': \n            //     params.type = 'poster3d';\n            //     params.sprite = true; \n            //     break;\n            case 'text-2d': \n                params.text = \"New text\"; \n                break;\n            // case 'text-2d-sprite': \n            //     params.type = 'text-2d';\n            //     params.sprite = true; \n            //     params.text = \"New text\"; \n            //     break;\n            case 'text-3d': // doesnt work\n                params.type = 'text-3d';\n                params.fontFamily = window.basePath+'resources/fonts/Century_Gothic_Regular.js';\n                params.text = \"New text\";\n                break;\n            default: break;\n        }\n\n        // posterlens fn\n        // update states object 3d in viewer & object params for posterlens\n        params.creationCallback = mesh => p.selectObject(mesh);\n        window.pl.createNewObjectFromParams(v.panorama, params);\n\n        \n        // update the option settings\n        let worldParams = p.getCurrentPanoramaParams();\n        worldParams.hotspots.push(params);\n        const newPlOptions = p.plOptionsReplaceWorldParams(worldParams);\n        p.setPlOptions(newPlOptions);\n        \n        \n        \n        return params;\n    }\n\n  // its all vanilla js, connecting with panolens. No HTML\n  return (\n    null\n  );\n}\n\nexport default Widgets;\n","/** Main container of the Layout. This is where all the real action starts */\n\nimport React, {useState, useEffect, createRef} from 'react';\nimport EditObjectControls_Bottom from './Layout/EditObjectControls_Bottom';\nimport TopBarButtonsAndPanels from './Layout/TopBarButtonsAndPanels';\nimport CanvasUI3D from './Layout/CanvasUI3D';\nimport Widgets from './Widgets';\nimport { validateCode } from '../helpers';\n\nimport { SyncObject3d__Inputs, SyncPlOptions__LocalStorage} from './SyncDataAlongApp'\n\n// Bootstrap 4\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nexport default function AppEditPosterlens( { data, setAppMode, appAsWidget, codeValidation } ) {\n  \n  // React states and refs\n  const [plOptions, setPlOptions] = useState(); // IMPORTANT. The goal of all this app is to generate these options. With them we can call posterlens to createa  tour.\n  const [currentObject3D, setCurrentObject3D] = useState(null); // The current THREEjs selected object. Sometimes we use pl.lastSelectedObj, because there are events outside REACT that can't use the State\n  const [isEditMode, setIsEditMode] = useState(false); // In this app, it's always true\n  const [initialDataBackup, setInitialDataBackup] = useState(false); // Used for the button Undo changes. Set the plOptions to this backuped initial value.\n  \n  const [editParams, setEditParams] = useState( {\n    POSTERLENS_CONTAINER_ID: 'posterlens-container', // the div id where we load posterlens\n    SCALE_FACTOR : 1.01,                              // when using ctrl+ and ctrol- keys to change scale of object.\n    ROTATE_DEG : 0.05,                                // radians. 3.1416 is 180 deg.\n    currentMouse3DPosition: [0,0,0],                  // shown in left panel PanoInfo.js\n    AUTO_START_EDIT_MODE : 1,\n    codeValidated: validateCode(codeValidation),\n    MAX_OBJECTS_PER_PANO: validateCode(codeValidation)? 1000 : 3,                          // To make the plugin PRO later.\n    isExpertMode: (typeof window.expertMode !== 'undefined')? window.expertMode : true  // shows more or less info.\n  } );\n  const [countRestarts, setCountRestarts] = useState(0); // not important\n  \n\n  const [onClickOption, setOnClickOption] = useState(null); // used in InputOnclickOption, but needs to be defined here.\n  \n  \n\n\n\n  // React Life cycle. INIT\n  \n  useEffect(() => {\n    console.log('INIT AppEditPosterlens! React rocks 🤘');\n    // create the interactive 3d viewer with posterlens\n    createViewer();\n    setCountRestarts(1); // small helper\n  }, []);\n  \n  // called on init and restart: WATCH countRestarts\n  useEffect(() => {\n    // initialize this react plugin to make that viewer interactive.\n    if (window.pl)\n      if (editParams.AUTO_START_EDIT_MODE) \n        setIsEditMode(true);\n  }, [countRestarts]);\n\n  /* WATCH currentObject3D: Onchange on currentObject3D selection in the UI.\n  *   we basically update the inputs with the values inside the plOptions for that hotspot \n  */\n  useEffect( () => {    if (!currentObject3D) return;\n\n    localStorage.setItem('lastSelectedObj.name', currentObject3D.name); // never used i think\n    \n    /* Object 3D ====> Inputs  !SHABBY WAY! */\n    SyncObject3d__Inputs( { currentObject3D, getOptionsByObject3D, setOnClickOption } );   \n    const originalBlend = currentObject3D.material.blending;\n    const originalColor = currentObject3D.material.color;\n    currentObject3D.material.blending = 2;\n    if (currentObject3D.type === 'pl_text-3d') currentObject3D.material.wireframe = true;\n    currentObject3D.material.color = { r:0, g:1, b:0};\n    setTimeout(()=> {\n      currentObject3D.material.blending = originalBlend;\n      currentObject3D.material.color = originalColor;\n    }, 800 );\n  }, [currentObject3D])\n  \n   \n  \n  /**\n   *  CALL to posTERLENS\n   */\n  function createViewer() {\n\n    var posterlensConfig = {}\n    if (!data) console.log('data variable not found.')\n    else posterlensConfig = {... data } ; // `data` is loaded with external file tat sets up `var data = {..}`\n    \n    if (!initialDataBackup) { // only when the app is loaded. Fro mhere, if the viewer is reset, we will not enter here.\n      setInitialDataBackup( JSON.stringify(data) );\n    } else posterlensConfig = JSON.parse(initialDataBackup);\n\n    // load from cache by default\n     var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n\n    posterlensConfig = (retrievedOptions?.worlds) ? retrievedOptions : posterlensConfig;\n    if (!posterlensConfig) {\n      console.error('No data loaded. Cant initialize');\n      return;\n    } \n\n    window.plEditMode = true; // this avoid animations while editing the pano\n\n    // CALL POSTERLENS\n    window.pl = document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).posterlens( posterlensConfig );\n    setPlOptions(window.pl.o);\n    window.pl.viewer.panorama.addEventListener('load', () => {\n      // init also selected obj if it was selected before\n      const lso = localStorage.getItem('lastSelectedObj.name');\n      if (lso) {\n        const selObj = window.pl.getObjectByName(lso);\n        if (selObj) {\n          selectObject(selObj)\n        }\n      }\n      // Debug with chrome three inspector.\n      window.scene = window.pl.viewer.getScene();\n      if (isEditMode) window.stopAllAnimations(window.pl.viewer);\n\n      \n    });\n  }\n\n  useEffect( () => { \n    window.pl.viewer.editMode = isEditMode;\n  }, [isEditMode]);\n  \n  function restartViewer() {\n    alert('restarting viewer');\n    console.log('plOptions', plOptions);\n    destroyViewer();\n    setPlOptions(null);\n    setIsEditMode(false);\n    localStorage.setItem('lastCameraLookat', window.pl.getCameraDirection('lookatPoint'));\n    localStorage.setItem('currentPano', window.pl.viewer.panorama.name );\n    delete(window.pl);\n    createViewer();\n    setCountRestarts(countRestarts + 1);\n    // and widgets are rerenderr because its key is associated to countRestarts, so they are loaded ok.\n    // better with ? window.pl.viewer.panorama.addEventListener('load', () => {\n    setTimeout( () => { // we need this just to refresh otherwise the object cant be selected... dont know...\n      const input = document.querySelector('#input-name form');\n        if (input) input.dispatchEvent(new Event(\"submit\"));\n      let lastCameraLookat = localStorage.getItem('lastCameraLookat').split(',')\n      lastCameraLookat = lastCameraLookat.map( i => parseInt(i) ); // needed\n      window.pl.viewer.setControlCenter(new window.THREE.Vector3( ...lastCameraLookat ));\n      localStorage.removeItem(\"lastCameraLookat\"); \n      const lastPanoSelected = localStorage.getItem('currentPano');\n      if (lastPanoSelected) {\n        window.pl.changePano(lastPanoSelected);\n      }\n    }, 500);\n    \n  }\n\n  // helpers\n  function getOptionsByObject3D(object3D, option = null) {\n    const currentWorldOptions = getCurrentPanoramaParams();\n    if (!currentWorldOptions) return;\n    let objectData = currentWorldOptions.hotspots.find( ht => ht.name === object3D?.name );\n    if (objectData && option) return objectData[option];\n    return objectData;\n  }\n  function getCurrentPanoramaParams() {\n    if (!plOptions) return null;\n    return plOptions.worlds.find( w => w.name === window.pl.viewer.panorama.name );\n  }\n  function getCurrentPanoramaParamsIndex() {\n    return plOptions.worlds.findIndex( w => w.name === window.pl.viewer.panorama.name );\n  }\n  // returns all pl with the new worldparmas at the place of the current panorama params\n  function plOptionsReplaceWorldParams(worldParams) {\n    const newOptions = Object.assign({}, plOptions);\n    newOptions.worlds[getCurrentPanoramaParamsIndex()] = {...worldParams};\n    return newOptions;\n  }\n  // returns all pl options replacing the hotspot data in current panorama with that name\n  function plOptionsReplaceWorldParamsHotspot(name, objectData) {\n    const currentWorldParams = getCurrentPanoramaParams();\n    const getHotspotIndex   = currentWorldParams.hotspots.findIndex(ht => ht.name === name);\n    if ( getHotspotIndex < 0 ) return;\n    const newHotspots = [...currentWorldParams.hotspots];\n    newHotspots[getHotspotIndex] = objectData;\n    currentWorldParams.hotspots = newHotspots;\n    return plOptionsReplaceWorldParams(currentWorldParams);\n  }\n \n  // when picking up the object iwth mouse or from list of objects.\n  function selectObject(theObj) {\n    if (!theObj) return false;      // if (currentObject3D) currentObject3D.material.blending = 1;\n    window.lastSelectedObj = theObj;\n    window.lastSelectedObj.lastPosition = window.lastSelectedObj.position.clone();\n    window.lastSelectedObj.lastRotation = window.lastSelectedObj.rotation.clone();\n    setCurrentObject3D( theObj );   // look at the object, I dont know how to do it\n    // now also see the WATCH (useEffect for currentObject3D )\n  }\n\n  // remove from data and in viewer\n  function removeCurrentObject() {\n    if (!currentObject3D) return;\n    const currentWorldOptions = getCurrentPanoramaParams();\n    const currentWorldOptionsIndex = getCurrentPanoramaParamsIndex();\n    let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === currentObject3D.name );\n    let newPlOptionsHotspots = [...currentWorldOptions.hotspots];\n    let hotspotIndex = newPlOptionsHotspots.findIndex( ht => ht.name === currentObject3D.name );\n    newPlOptionsHotspots.splice(hotspotIndex,1); //delte in array\n    const newO = {...plOptions};\n    newO.worlds[currentWorldOptionsIndex].hotspots = newPlOptionsHotspots;\n    SyncPlOptions__LocalStorage(newO, setPlOptions);\n    window.pl.viewer.panorama.remove( currentObject3D );\n    window.pl.viewer.panorama.remove( window.pl.viewer.scene.getChildByName(currentObject3D.name) ); // just in case (somethimes it doesn delete)\n    setCurrentObject3D(null);\n  }\n\n  // clone in data and reload the viewer.\n  function cloneCurrentObject() {\n    if (!currentObject3D) return;\n    const objectCurrentParams = Object.assign({}, getOptionsByObject3D(currentObject3D));\n    const currentWorldParams  = getCurrentPanoramaParams();\n    const newName             = \"cloned_\"+ objectCurrentParams.name;\n    objectCurrentParams.name  = newName;\n    objectCurrentParams.pos = [ parseFloat(objectCurrentParams.pos[0]) + 50, parseFloat(objectCurrentParams.pos[1]) + 50, objectCurrentParams.pos[2]]\n    currentWorldParams.hotspots.push(objectCurrentParams);\n    const newPlOptions = plOptionsReplaceWorldParams(currentWorldParams);\n    \n    SyncPlOptions__LocalStorage(newPlOptions, setPlOptions);\n    // we need to restart the viewer to create it.\n    localStorage.setItem('lastSelectedObj.name', newName);\n    restartViewer();\n\n  }\n\n  // shows modal with all the options\n  function exportToTextarea() {\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    var textA = document.createElement( 'textarea' );\n    textA.textContent = exportStr;\n    textA.style.width = '100%'\n    textA.style.height= '500px';\n    window.pl.Modal('Export JSON', textA);\n  }\n\n\n\n\n\n  // remove all viewer. I should free up memory before...\n  function destroyViewer() {\n    document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).innerHTML = '';\n  }\n\n  \n\n\n\n\n  return (     \n    <Container className={ 'posterlens-wrapper border pt-2' \n                      + ( editParams.codeValidated? ' validated ' : ''  )\n                      + (editParams.isExpertMode? ' expert-mode' : ' no-expert-mode') } >\n      \n      <TopBarButtonsAndPanels data={data} currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} \n                              plOptions={plOptions} setPlOptions={setPlOptions} editParams={editParams} selectObject={selectObject}\n                             plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                             restartViewer={restartViewer} removeCurrentObject={removeCurrentObject} setAppMode={setAppMode} countRestarts={countRestarts} \n                             exportToTextarea={exportToTextarea} cloneCurrentObject={cloneCurrentObject} />\n\n      \n      <CanvasUI3D editParams={editParams} setEditParams={setEditParams} isEditMode={isEditMode}\n                  getOptionsByObject3D={getOptionsByObject3D} selectObject={selectObject}\n                  plOptions={plOptions} setPlOptions={setPlOptions} plOptionsReplaceWorldParamsHotspot={plOptionsReplaceWorldParamsHotspot}\n      />\n      \n      { isEditMode? \n      <Row className=\"no-gutters\" >\n        \n        <EditObjectControls_Bottom plOptions={plOptions} setPlOptions={setPlOptions} isEditMode={isEditMode} \n                    editParams={editParams} setEditParams={setEditParams}\n                    currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} \n                    plOptionsReplaceWorldParamsHotspot={plOptionsReplaceWorldParamsHotspot}\n                    getCurrentPanoramaParams={getCurrentPanoramaParams} selectObject={selectObject} getOptionsByObject3D={getOptionsByObject3D}\n                    appAsWidget={appAsWidget} plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                    onClickOption={onClickOption} setOnClickOption={setOnClickOption} />\n      </Row>\n      : null }\n\n      { isEditMode? <Widgets plOptions={plOptions} isEditMode={isEditMode} setIsEditMode={setIsEditMode}  \n                              setCurrentObject3D={setCurrentObject3D} plOptions={plOptions} \n                              key={countRestarts} restartViewer={restartViewer} selectObject={selectObject}\n                              plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                              getCurrentPanoramaParams={getCurrentPanoramaParams} setPlOptions={setPlOptions}\n                              editParams={editParams}\n                              \n                              /> : null }\n    </Container>)\n\n}\n","// This is the call of the React APP.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\n/* Variables that can be set from the outside:\n  window.appAsWidget = true;\n  window.expertMode = false;\n  window.plImgPath = 'http:// ... ' (not neccessary in appAsWidget mode)\n  window.basePath = 'http://' or 'relative/path/' (needed to show the Widgets imgs, for example) \n  window.onSavePlOptionsCallback = function(plOpts) { ... whatever you want to do }\n*/\nconst containers = document.querySelectorAll('.wrapper-posterlens-edit-container');\ncontainers.forEach( (el,i)=>{\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    el\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}