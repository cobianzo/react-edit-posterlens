{"version":3,"sources":["components/App.js","components/AppDemoPosterlens.js","components/InputImage.js","components/InputData.js","components/InputOnClickOption.js","components/EditObject2.js","components/ListObjects.js","components/Widgets.js","helpers.js","components/ObjectInfo.js","components/PanoInfo.js","components/AppEditPosterlens.js","index.js"],"names":["App","useEffect","console","log","window","PANOLENS","THREE","eval","stopAllAnimations","isAppAsWidget","appAsWidget","isEditModeDefault","location","hash","useState","setAppAsWidget","appMode","setAppMode","data","AppDemoPosterlens","refContainer","createRef","retrievedOptions","JSON","parse","localStorage","getItem","worlds","error","pl","document","querySelector","posterlens","viewer","panorama","addEventListener","panolensPanoInstance","scene","getScene","createViewer","className","onDoubleClick","onClick","id","ref","InputImage","p","infoAttr","setInfoAttr","pickupImageMode","setPickupImageMode","handlePickupImg","e","target","src","value","wrapperUpdateObjectSingleData","removeEventListener","handleCancelPickupImage","setTimeout","event","keyCode","InputGroup","Prepend","Text","input","label","Append","selected_img","tagName","getAttribute","option","Button","variant","getOptionsByObject3D","currentObject3D","Input","theValue","deleteIfValue","fieldPair","scale","x","updateObjectSingleData","name","type","extensions","dims","minWidth","maxWidth","minHeight","maxHeight","onChange","base64","imgPath","onError","errMsg","alert","onSubmit","preventDefault","currentTarget","sync-3d","FormControl","as","defaultValue","Form","Check","step","Group","sync-default","defaultChecked","checkedValue","checked","uncheckedValue","key","options","Object","keys","map","viewInput","InputOnClickOption","selectRef","useRef","panoList","plOptions","forEach","world","cardList","cardListCallback","setOnClickOption","updatedFields","onClickAction","includes","modal","link","handleSelectOption","onClickOption","active","EditObject2","plImgPath","setImgPath","refImgPathInput","v","renderer","domElement","handlerPickupObject","selectedObj","newPos","reactGetMouse3Dposition","Vector3","normalize","multiplyScalar","distance","y","z","setObjectPos","handlerDropObject","handlerScaleRotateObject","isEditMode","shiftIsPressed","intersects","raycaster","intersectObject","theObj","object","startsWith","camera","position","distanceTo","OrbitControls","enabled","originalPos","selectObject","singleObject3DToParams","lastSelectedObj","ctrlKey","set","editParams","SCALE_FACTOR","rotateZ","ROTATE_DEG","rotateY","rotateX","z_move","constructor","setInfo","setCurrentObject3D","waitSave","clearTimeout","object3D","direction","offset","clone","warn","inputs","Container","Row","currentPanoParams","getCurrentPanoramaParams","initialLookAt","getCameraDirection","initialFov","fov","newOptions","plOptionsReplaceWorldParams","syncPlOptionsAndLocalStorage","current","inputsCol","col_i","Col","sm","i","width","basePath","ListObjects","init","setInit","hotspots","element","getObjectByName","isExpertMode","Fragment","join","Math","round","currentMouse3DPosition","objectsToPopupWhenVisible","k","min","max","Widgets","el","classList","add","isWidgetsInit","setIsWidgetsInit","Array","from","appendControlItem","style","backgroundImage","float","onTap","initNewObject","newObj","objectData","group","justCreatedBtn","countResets","params","floor","random","pos","values","getWorldDirection","image","defaultPosterImg","posterSphere","text","fontFamily","callbackFn","mesh","createNewObjectFromParams","worldParams","push","newPlOptions","setPlOptions","round2","fl","numb","toFixed","ObjectInfo","isOpen","setIsOpen","currentObjectOptions","find","ht","rotation","alwaysLookatCamera","objectOptions","lines","stringify","split","jsx","line","currentObjectOptionsJSX","currentPanoOptions","currentPanoOptionsJSX","AppEditPosterlens","setIsEditMode","POSTERLENS_CONTAINER_ID","AUTO_START_EDIT_MODE","expertMode","setEditParams","countRestarts","setCountRestarts","info","refContainerParent","setItem","querySelectorAll","formEl","inputDefault","length","point","getWorldPosition","sub","currentMP","assign","posterlensConfig","o","lso","selObj","restartViewer","innerHTML","currentWorldOptions","w","getCurrentPanoramaParamsIndex","findIndex","plOptionsReplaceWorldParamsHotspot","currentWorldParams","getHotspotIndex","newHotspots","exportStr","onSavePlOptionsCallback","objectCurrentParams","objectNewParams","rot","defaults","mapParams","emissive","transparent","color","obFields","currentField","field","replace","hasOwnProperty","editMode","textA","createElement","textContent","height","Modal","exportToTextarea","currentWorldOptionsIndex","newPlOptionsHotspots","hotspotIndex","splice","newO","remove","getChildByName","onMouseMove","fields","regenerate","objectHotspotIndex","newObject","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.58b3db43.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport AppDemoPosterlens from './AppDemoPosterlens';\nimport AppEditPosterlens from './AppEditPosterlens';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default function App() {\n  \n  /* Retrieving possible variables from outside the App */\n  /* ------------------------ --------------------------- */\n  useEffect( () => {\n    console.log(`THREE and PANOLENS: ${window.PANOLENS}`,window.THREE);\n    window.THREE = eval('THREE');\n    window.PANOLENS = eval('PANOLENS');\n    window.stopAllAnimations = window.stopAllAnimations;\n  }, []);\n\n  const isAppAsWidget       = window.appAsWidget? true : false; // when we use it in Wordpress, in a page, then it's a widget app\n  const isEditModeDefault = window.location.hash === '#edit' || isAppAsWidget;\n  const [appAsWidget, setAppAsWidget] = useState(isAppAsWidget);\n  const [appMode, setAppMode] = useState(isEditModeDefault? 'edit' : 'demo');\n  \n  var data = window.data; // defined outside react, in the html calling this app\n  /* ------------------------ --------------------------- */\n\n  return appMode === 'edit' ?  <AppEditPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} /> : \n                               <AppDemoPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} />;\n  \n}","import React, {useEffect, createRef} from 'react'\n\nfunction AppDemoPosterlens( { data, setAppMode, appAsWidget } ) {\n    \n    var refContainer = createRef();\n\n    useEffect(() => {\n        console.log('hello from useEffect in App');\n        // create the interactive 3d viewer with posterlens\n        createViewer(data);\n      }, []);\n\n    // CALL to posTERLENS\n    function createViewer(data) {\n        var posterlensConfig = {}\n        if (!data) console.log('data variable not found.')\n        else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n            \n        // load from cache by default\n        var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n\n        data = (retrievedOptions?.worlds) ? retrievedOptions : data;\n        if (!data) {\n        console.error('No data loaded. Cant initialize');\n        return;\n        }\n\n        // CALL POSTERLENS\n        window.pl = document.querySelector('#posterlens-container').posterlens( data );\n        window.pl.viewer.panorama.addEventListener('load', (panolensPanoInstance) => {\n            console.log(`🎉🎉🎉🎉🎉🎉🎉🎉`, panolensPanoInstance);\n        });\n        window.scene = window.pl.viewer.getScene();\n    }\n\n\n\n    return (\n        <div className='container'>\n            <h1 onDoubleClick={()=> setAppMode('edit')} >Demo  \n                { appAsWidget? \n                    <button className='btn btn-sm btn-primary' onClick={ ()=> setAppMode('edit') }>Back</button>\n                    : null }\n            </h1> \n            <div className='posterlens-container' id='posterlens-container' ref={refContainer}></div>\n        </div>\n    )\n}\n\nexport default AppDemoPosterlens\n","import React, {useState, useEffect} from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\n/**\n * Input \"Select image\" that sets the option p.input.option to that image.\n * Allows \n * */\nfunction InputImage( p ) {\n\n    // p : the props obj. \n    // @p.input (option, label)\n\n    // Local State\n    const [infoAttr, setInfoAttr] = useState(''); // a little message saying \"updating\", \"saved\" to the user\n    \n    // tool to fillup an image input by selecting an image in the screen.\n    const [pickupImageMode, setPickupImageMode] = useState(false);\n\n    // watch the activation of the mode \"pickup image in screen\"\n    useEffect(() => {\n        if (! pickupImageMode) return;\n        setInfoAttr('Pick up an image in the screen');\n        const handlePickupImg = (e) => {\n            if (e.target?.src) {\n                const value = e.target.src; // I tried using refs but here it doesnt read them\n                p.wrapperUpdateObjectSingleData(value);\n\n                // remove events to normal\n                setPickupImageMode(false);\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n                setInfoAttr(\"Image selected\"); setTimeout( () => setInfoAttr(''), 3000 );\n            }\n        };\n        const handleCancelPickupImage = function(event) {\n            if(event.keyCode === 27){ // clicking ESC\n                setPickupImageMode(false);\n                setInfoAttr(\"Cancelled\"); setTimeout( () => setInfoAttr(''), 3000 );\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n           }\n        };\n        document.addEventListener('click', handlePickupImg, 'pickupImg' );\n        document.addEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );\n        \n    }, [pickupImageMode]);\n    \n\n    function handlePickImage(event) {\n        // optionally we can interact from outside react with tthe selection. If we have set an element with class 'pl_selected_image', we'll grab that img.\n        if (document.querySelector('.pl_selected_image')) {\n            const selected_img = document.querySelector('.pl_selected_image');\n            if (selected_img.tagName === 'IMG') \n                p.wrapperUpdateObjectSingleData( selected_img.getAttribute('src') );\n            else if ( selected_img.getAttribute('data-url') ) // we accept that the element with pl_sel.. class has an attribute with the url.\n                p.wrapperUpdateObjectSingleData( selected_img.getAttribute('data-url') );\n            \n            return;\n        }\n        // or standard behaviour. Any img in the window can be clicked and we use its src field as value.\n        setPickupImageMode(p.input.option) \n    }\n\n  return (\n    \n        <InputGroup>\n\n            <InputGroup.Prepend>\n                <InputGroup.Text>\n                    { p.input.label }\n                </InputGroup.Text>\n            </InputGroup.Prepend>\n            <InputGroup.Append onClick={ handlePickImage  }>\n                <InputGroup.Text>\n                    { pickupImageMode? 'select an image' : <Button variant=\"primary\">Pick image</Button> }\n                </InputGroup.Text>\n            </InputGroup.Append>\n\n                <InputGroup.Append>\n                    <InputGroup.Text>\n                        {p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                    </InputGroup.Text>\n                </InputGroup.Append>\n                <span className=\"text-light bg-dark\">{ infoAttr }</span>\n        </InputGroup>\n\n  );\n}\n\nexport default InputImage;\n","import React from 'react'\n\nimport Button from 'react-bootstrap/Button';\n\nimport InputImage from './InputImage';\nimport { FilePicker } from 'react-file-picker'\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\n\nexport default function Input(p) {\n\n    // udpated fied p.input.option with the value. Some fields have special treatment\n    const wrapperUpdateObjectSingleData = function (value) {\n        let theValue = value === p.input.deleteIfValue ? null : value; // with this we will remove the option from the params.\n        const fieldPair = { [p.input.option] : theValue };\n        // special fields that need special treatment\n        if ( p.input.option === 'background' && theValue === '' ) fieldPair[p.input.option] = 'transparent'; // no bg color => background: 'transparent'\n        if ( p.input.option === 'sprite' && theValue === true ) fieldPair.scale = p.currentObject3D.scale.x * 10; // if we convert into sprite we better scale or it will look tiny\n        if ( p.input.option === 'sprite' && !theValue ) fieldPair.scale = p.currentObject3D.scale.x / 10; // the other way as well.\n        p.updateObjectSingleData( p.currentObject3D.name, fieldPair);\n    }\n\n    const viewInput = function() {\n        switch (p.input.type) {\n            case \"image-pick\":\n                return <InputImage input={p.input} currentObject3D={p.currentObject3D} getOptionsByObject3D={p.getOptionsByObject3D}\n                                    wrapperUpdateObjectSingleData={wrapperUpdateObjectSingleData} />\n            case \"image\": // not in use I think\n                return <InputGroup >\n                    <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FilePicker \n                extensions={['jpg', 'jpeg', 'png', 'gif', 'svg']}\n                dims={{minWidth: 100, maxWidth: 2500, minHeight: 100, maxHeight: 2500}}\n                onChange={base64 => p.updateObjectSingleData( p.currentObject3D.name, { [p.input.option]: p.imgPath+base64.name}) }\n                onError={ errMsg => alert(errMsg) }\n            >\n                <Button variant='primary'>\n                Select image\n                </Button >\n                </FilePicker>\n                <Button variant='danger' onClick={ (e) => { wrapperUpdateObjectSingleData(null) } }>\n                    Clear\n                </Button >\n                <InputGroup.Append> <InputGroup.Text>{p.getOptionsByObject3D(p.currentObject3D, p.input.option)}</InputGroup.Text></InputGroup.Append>\n                </InputGroup>\n            case \"input\":\n                return <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                                sync-3d={p.input.option}\n                        >\n                    <InputGroup>\n                        <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                        <FormControl as='input' defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)}  />\n                        <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                    </InputGroup>\n                </form>\n            case \"number\":\n                return  <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                                sync-3d={p.input.option} >\n                            <InputGroup>\n                                <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                                <Form.Check type=\"number\" step={ p.input.step?? 1 }\n                                    defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)} />\n                                <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                            </InputGroup>\n                        </form>\n            case \"checkbox\":\n                return <Form.Group sync-3d={p.input.option} sync-default={p.input.deleteIfValue? \"true\" : \"false\"} >\n                <Form.Check type=\"checkbox\" label={p.input.label + `(${p.getOptionsByObject3D(p.currentObject3D, p.input.option)})`}\n                            defaultChecked={p.getOptionsByObject3D(p.currentObject3D, p.input.option) === p.input.checkedValue() || p.input.deleteIfValue === p.input.checkedValue() }\n                                onChange={ (e) => {\n                                    const value = e.currentTarget.checked? p.input.checkedValue(p.currentObject3D) : p.input.uncheckedValue(p.currentObject3D) ;\n                                    wrapperUpdateObjectSingleData(value);                                            \n                                } } />\n                </Form.Group>\n            case \"select\":\n                return <InputGroup sync-3d={p.input.option}>\n                     <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FormControl as='select' defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                                        onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) } >\n                                <option key='nothing' value='' >---</option>\n                                {   \n                                    (typeof p.input.options === 'object') ? Object.keys(p.input.options)?.map( option => { \n                                        return <option key={option} value={ p.input.options[option] } >{ option }</option>\n                                    }) : null\n                                }\n                    </FormControl>\n                    <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n                break;\n            case \"color\":\n                return <InputGroup sync-3d={p.input.option}>\n                        <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                        <input type=\"color\" defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                                onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) }></input>\n                    \n                </InputGroup>\n            default:\n            break;\n        }\n    }\n\n    return viewInput();\n}\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport InputData from './InputData';\n\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction InputOnClickOption( p ) {\n\n    // using p.onClickOption and p.setOnClickOption. Those states are defined in parent.\n    const selectRef = useRef(null);\n    \n\n    const handleSelectOption = (value) => {\n        if (!p.currentObject3D) return\n        p.setOnClickOption(value);\n        \n        const updatedFields = { onClickAction : value }\n        if ( ['pano', 'url', '' ].includes(value) ) \n            updatedFields.modal = null;\n        if ( ['iframe', 'card', '' ].includes(value) ) \n            updatedFields.link = null;\n        \n        p.updateObjectSingleData( p.currentObject3D.name, updatedFields );\n    }\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n        p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );    \n    \n    let cardList = {};\n    if (window?.cardListCallback) {\n        //        console.log('loading cardList callback', window.cardListCallback());\n        cardList = window.cardListCallback();\n    }\n    \n\n    if (!p.currentObject3D) return null;\n\n    return (\n        <div>\n            <InputGroup sync-3d='onClickAction'>\n                <InputGroup.Prepend> <InputGroup.Text>On click action</InputGroup.Text></InputGroup.Prepend>\n                <FormControl as='select' defaultValue={ p.getOptionsByObject3D(p.currentObject3D, 'onClickAction') }\n                                onChange={ (e) => handleSelectOption(e.target.value) } ref={selectRef} >\n                        <option key='nothing' value='' >---</option>\n                        <option value='pano'> Link to panorama</option>\n                        <option value='url'> Link to URL</option>\n                        <option value='iframe'> iframe popup</option>\n                        <option value='card'> Card</option>\n                </FormControl>\n            </InputGroup>\n            \n            \n            { p.onClickOption? \n                <div>\n                    <div>{ p.onClickOption }</div>\n                    { /** LINK TO PANORAMA */\n                    \n                    p.onClickOption === 'pano' ? \n                        <InputData  input={ { option: 'link', type: 'select', options: panoList, label:'PANORAMA', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                                    updateObjectSingleData={p.updateObjectSingleData} \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                                    : null}\n\n                    { /** LINK TO URL */ \n                    p.onClickOption === 'url' ? <div>\n                            <InputData  input={ { option: 'link', type: 'input',  label:'url', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                                    updateObjectSingleData={p.updateObjectSingleData} \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                        </div> : null \n                    }\n\n                    { /** LINK TO IFRAME */ \n                    p.onClickOption === 'iframe' ? <div>\n                    <InputData  input={ { option: 'modal', type: 'input', label:'iframe url', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            updateObjectSingleData={p.updateObjectSingleData} \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} />\n                        </div> : null \n                    }\n\n                    { /** CARD TO OPEN */ \n                    p.onClickOption === 'card' ? <div>\n                    <InputData  input={ { option: 'modal', type: 'select', options: cardList, label:'Modal Card', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            updateObjectSingleData={p.updateObjectSingleData} \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} />\n                        </div> : null \n                    }\n                     \n                </div>        \n            : null }\n        </div>\n    )\n}\n\nexport default InputOnClickOption;\n","import React, {useEffect, useState, createRef} from 'react';\n\n// the <inputs ...\nimport InputData from './InputData';\nimport InputOnClickOption from './InputOnClickOption';\n\n// bootstrap 4 elements\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/esm/Button';\n\nfunction EditObject2( p ) {\n\n    const [imgPath, setImgPath] = useState( window.plImgPath?? 'resources/'); // imgs for 3d textures\n    const refImgPathInput = createRef();\n\n    // Important note. Inside a new EventListener, we can't access to updated props. The props will always have the initial value\n    // That's why I use window.selectedObj instead of p.currentObject3D, to access to the lastest Position.\n\n    // triggered on load, only once.\n    useEffect(() => { \n        if (!window.pl) return;\n        // console.log('pl updated in edit', window.pl);\n        const v = window.pl.viewer;\n        v.renderer.domElement.addEventListener('mousedown', (event) => { handlerPickupObject(event) });\n\n        // --- move object \n        v.renderer.domElement.addEventListener('mousemove', function (event) {\n            if (!window.selectedObj) return;\n            let newPos = p.reactGetMouse3Dposition(event, window.pl);\n            if (!newPos) return;\n            const v = new window.THREE.Vector3(...newPos).normalize().multiplyScalar(window.selectedObj.distance);\n            newPos = [v.x, v.y, v.z];\n            window.pl.setObjectPos(window.selectedObj, newPos);\n        });\n        v.renderer.domElement.addEventListener('mouseup', (event) => { handlerDropObject(event) });\n        document.addEventListener('keydown', (event) => { handlerScaleRotateObject(event) } );\n        \n    }, [p.plOptions] );\n\n    // --- pickup object \n    const handlerPickupObject = (event) => {\n        if ( !p.isEditMode ) return;\n        if (window.pl.shiftIsPressed) return;\n\n        const v = window.pl.viewer;\n        \n        const intersects = v.raycaster.intersectObject( v.panorama, true );\n        const theObj = intersects[0]? intersects[0].object : null ;\n        if (!theObj.type?.startsWith('pl_')) return;\n\n        theObj.distance = v.camera.position.distanceTo(theObj.position);\n        window.selectedObj = theObj;\n       // console.log('Edit Object cLicked', window.selectedObj.name);\n        \n        v.OrbitControls.enabled = false;\n        window.selectedObj.originalPos = window.selectedObj.position;                \n        \n        // State: assign lastSelectedObj and update state currentObject3D\n        p.selectObject(theObj);\n    }\n\n    // --- drop object \n    const handlerDropObject = (event) => {  \n        if ( !p.isEditMode || !window.selectedObj) return;\n        if (!window.selectedObj.type.startsWith('pl_')) return;\n        const v = window.pl.viewer;\n        v.OrbitControls.enabled = true;\n        // p.singleObject3DToParams(window.selectedObj);\n        p.singleObject3DToParams(window.selectedObj);\n        window.selectedObj = null;\n    };\n\n    const handlerScaleRotateObject = function(event) {\n        // we cant use the state currentObject3D, because it will not get the latest value. It will be initialzied to the time of creation og this handler\n        if (!window.lastSelectedObj) return;\n        if (event.ctrlKey) {\n            switch (event.key) {\n                case '+': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z * p.editParams.SCALE_FACTOR );      break;\n                case '-': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z / p.editParams.SCALE_FACTOR );      break;\n                case 'r': window.lastSelectedObj.rotateZ(p.editParams.ROTATE_DEG);  break;\n                case 't': window.lastSelectedObj.rotateZ(-p.editParams.ROTATE_DEG);  break;\n                case 'f': window.lastSelectedObj.rotateY(p.editParams.ROTATE_DEG);  break;\n                case 'g': window.lastSelectedObj.rotateY(-p.editParams.ROTATE_DEG);  break;\n                case 'v': window.lastSelectedObj.rotateX(p.editParams.ROTATE_DEG);  break;\n                case 'b': window.lastSelectedObj.rotateX(-p.editParams.ROTATE_DEG);  break;\n                case '4': z_move(window.lastSelectedObj, 'close'); break;\n                case '5': z_move(window.lastSelectedObj, 'far'); break;\n                default:\n                    break;\n            }\n            if (event.key === 'r' || event.key === 't' || event.key === 'f' || event.key === 'g' || event.key === 'v' || event.key === 'b') {\n                if (window.lastSelectedObj.constructor.name === 'Infospot') // deprecated\n                    p.setInfo('Sprite object cannot be rotated'); \n            }\n            p.setCurrentObject3D(window.lastSelectedObj);\n            if (window.waitSave) {\n                clearTimeout(window.waitSave);\n                window.waitSave = setTimeout( () => {\n                    p.singleObject3DToParams(window.lastSelectedObj);\n                    clearTimeout(window.waitSave);\n                    p.setInfo('updated');\n                }, 500);\n            }\n            \n        }\n    }\n\n    // move an object closer or farther from the camera.\n    function z_move(object3D, direction = 'close'){\n        let offset = 1.02;\n        if (direction === 'close') offset = 1/offset;\n                    \n        var newPos = object3D.position.clone();\n        newPos.x *= offset; newPos.y *= offset; newPos.z *= offset;\n        const distance = window.pl.viewer.camera.position.distanceTo(newPos);\n        if ( (direction !== 'close' && distance > 500) || (direction === 'close' && distance < 40)) {\n            console.warn('we cant move that limit. Its out of 40 - 500m');\n            return\n        }\n        window.pl.setObjectPos(object3D, [newPos.x, newPos.y, newPos.z]);\n    }\n\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n    p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );\n    const inputs = [\n        [\n            { option: 'image', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Img', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'alpha', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Alpha', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'text', type: 'input', label:'Text', active: [ 'pl_text-2d', 'pl_text-3d'] },\n            { option: 'emissive', type: 'color', label:'Emissive Color', active: [ 'pl_text-3d'] },\n            { option: 'color', type: 'color', label:'Text Color', active: [ 'pl_text-2d'], deleteIfValue:'#ffffff' },\n            { option: 'background', type: 'color', label:'Background', active: [ 'pl_text-2d'], deleteIfValue:'#000000' },\n            // TODO: we need to give an option for bg transparent \n            { option: 'alwaysLookatCamera', type: 'checkbox', label:'alwaysLookatCamera', checkedValue: () => true, uncheckedValue: () => false, active: [ 'pl_text-2d', 'pl_text-3d', 'pl_poster3d' ], deleteIfValue: true },\n            { option: 'sprite', type: 'checkbox', label:'sprite 2D', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'posterSphere', type: 'checkbox', label:'is sphere', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'link', type: 'select', options: panoList, label:'Go to pano', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n            { option: 'modal', type: 'input', label:'modal', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'], deleteIfValue:'' },\n            { option: 'opacity', type: 'number', step: 0.05, label:'Opacity', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '1' },\n        ],\n        [\n        { option: 'animatedMap', type: 'number', label:'frames animation map', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'animatedMapSpeed', type: 'number', label:'speed', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'rotationX', type: 'number', label:'Rotate anim X', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationY', type: 'number', label:'Rotate anim Y', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationZ', type: 'number', label:'Rotate anim Z', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'animated', type: 'select', label:'Glow animation', options: { 'always' : 'always', 'only on hover' : 'hover' }, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'popupWhenVisible', type: 'number', step: 10, label:'Pops up when in camera', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        ]\n    ];\n    return (\n      <Container className=\"edit-panel\">\n        { /* The name of the object */}\n        {p.currentObject3D? \n        <Row>\n            <InputData   input={ { option: 'name', type: 'input', label:'NAME', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            imgPath={imgPath}\n                            updateObjectSingleData={p.updateObjectSingleData} \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} />\n        </Row> : null }\n\n        <Button variant=\"primary\" className='float-right' onClick={ (e)=> {                 \n            const currentPanoParams =  p.getCurrentPanoramaParams();\n            currentPanoParams.initialLookAt = window.pl.getCameraDirection('lookatPoint');\n            currentPanoParams.initialFov = window.pl.viewer.camera.fov;\n            const newOptions = p.plOptionsReplaceWorldParams(currentPanoParams);\n            p.syncPlOptionsAndLocalStorage(newOptions);\n         } }>Set camera view</Button>\n        \n\n        { /* The imgs path (not needed anymore) */}\n        { !p.appAsWidget?\n        <InputGroup>\n            <InputGroup.Prepend> <InputGroup.Text>imgs path</InputGroup.Text></InputGroup.Prepend>\n            <FormControl as='input' defaultValue={imgPath} ref={refImgPathInput} \n                        onChange={ (e) => refImgPathInput.current? setImgPath(refImgPathInput.current.value) : null } />\n            <InputGroup.Append><InputGroup.Text> {imgPath} </InputGroup.Text> </InputGroup.Append>\n        </InputGroup> : null }\n\n        <Row>\n            {   /**  */\n                inputs.map( (inputsCol, col_i) => {\n                    return <Col sm='4' key={'column-'+col_i}>\n                        { \n                            inputsCol.map( (input, i) => {\n                                if ( !p.currentObject3D ) return null;\n                                if ( !input.active.includes(p.currentObject3D.type) ) return null;\n                                return <InputData   input={input} imgPath={imgPath} key={'input-'+i}\n                                                    updateObjectSingleData={p.updateObjectSingleData} \n                                                    currentObject3D={p.currentObject3D}\n                                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                            } )\n                        }\n                    </Col>\n                })\n            }\n            <Col sm=\"4\">\n                <InputOnClickOption key={p.getOptionsByObject3D? p.getOptionsByObject3D.name : 'not'} plOptions={p.plOptions} updateObjectSingleData={p.updateObjectSingleData} \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D}\n                                    onClickOption={p.onClickOption} setOnClickOption={p.setOnClickOption} \n                />\n            </Col>\n        </Row>\n        \n        <img width='50' className='use-me' src={ window.basePath+'resources/arboles.png' } />\n      </Container>        \n  );\n}\n\nexport default EditObject2;\n","import React, {useState, useEffect} from 'react'\n\nimport Col from 'react-bootstrap/Col'\n\nexport default function ListObjects(p) {\n\n    // init is the current pano params, where we grab the objects to show (hotspots)\n    const [init, setInit] = useState(null);\n    useEffect(() => {\n        console.log('🚴🏼‍♀️Hello from ListObjects')\n        setInit(p.getCurrentPanoramaParams());\n    }, [p.plOptions])\n\n    // more info for developers. Option popup when visible for an object.\n    const getObjectsShowWhenVisible = function() {\n        if (!window.pl) return 'not loaded';\n        if (!window.pl.viewer.panorama.objectsToPopupWhenVisible) return 'none';\n        const jsx = <div> {Object.keys(window.pl.viewer.panorama.objectsToPopupWhenVisible).map( k=>{\n            const [min,max] = window.pl.viewer.panorama.objectsToPopupWhenVisible[k];\n            return <p key={k}>{k} : {min}º, {max}º</p>;\n        })} </div>\n        return jsx;\n    }\n    return (\n        <Col className='list-objects' sm='2'>\n            List Hotposts in Pano Options\n            {init && p.plOptions?.worlds ? \n            <ul>\n                { init.hotspots.map((element,i) => {\n                    return <li key={i} onClick={ () => {\n                        // get object 3d\n                        const theObj = window.pl.getObjectByName(element.name);\n                        p.selectObject(theObj);\n                    }} className={ (p.currentObject3D?.name === element.name )? 'active' : '' }>\n                        {element.name} <small>{element.type}</small>\n                    </li>\n                })}\n            </ul>\n            : null }\n\n           <br/> { /** curiously this works, I dont need to use any State, it works ok with the pl object fn. \n                    *    It is because of the mousemove event in App.js. It makes recalculate this component aparently\n                    */}\n            { p.editParams.isExpertMode? <React.Fragment>\n                Camera: { window.pl? window.pl.getCameraDirection('lookatPoint').join(', ')  : null }\n                <br/>\n                Angle: { window.pl? Math.round(window.pl.getCameraDirection('rad') * 100)/100 : null }\n                    rad :: { window.pl? Math.round(window.pl.getCameraDirection('deg')) : null }º\n                    <br/>\n                    Fov: { window.pl? window.pl.viewer.camera.fov : null }\n                    <br/>\n                    MousePos: { p.editParams.currentMouse3DPosition.join(', ') }\n                    <br/>\n                    <br/>\n                    <i>panorama.objectsToPopupWhenVisible:</i> { init? getObjectsShowWhenVisible() : null }\n            </React.Fragment> : null }\n        </Col>\n    )\n}\n","import {useEffect, useState} from 'react';\n\n\nfunction Widgets( p ) {\n\n    const v = window.pl?.viewer;\n    if (window.pl?.el)\n        window.pl.el.querySelector('div:last-child').classList.add('pl-widgets');\n\n    const [isWidgetsInit, setIsWidgetsInit ] = useState(false);\n    const initWidgets = function() {\n        if (isWidgetsInit) return;\n        setIsWidgetsInit(true);\n        if (typeof window.basePath === 'undefined') window.basePath = './';\n        // Widgets\n        // Create poster buttons. One for every type.\n        Array.from([ /*'link', */\n                    // 'poster-sprite', // type poster3d + sprite = true\n                    'poster3d',\n                    // 'poster3d-sphere', // type poster3d + posterSphere = true\n                    'text-3d', // doesnt work\n                    'text-2d',\n                   // 'text-2d-sprite' // type text-2d + sprite = true \n            ] ).forEach( type => {\n                v.appendControlItem({\n                    id: 'edit-controls',\n                    style: {\n                        backgroundImage: 'url('+window.basePath+'resources/widget-'+type+'.png)',\n                        float: 'left'\n                    },    \n                    onTap: () => { \n                        const { newObj, objectData } = initNewObject( type );\n                        console.log('Created new obj: ', { newObj, objectData })\n                    },\n                    group: 'editmode'\n                });\n                //shabby way to add a class to this btn. (panolens doesnt do it)\n                const justCreatedBtn = window.pl.el? window.pl.el.querySelector('.pl-widgets > span:last-child') : null;\n                if (justCreatedBtn) justCreatedBtn.classList.add('widget-btn-'+type);\n                \n        })\n    }\n    useEffect(() => {\n        console.log('Hellow from widgets');\n        if (window.pl && p.isEditMode) \n            //if (!p.pl.viewer.widget) \n                initWidgets() // TODO: if deactivate and reactivate the editmode, the widgets are created again (duplicated)\n                // we can use pl.viewer.widget.barElement.remove() when deactivated to delete the previous ones. But ideally we could avoid calling this init if they exist.\n    }, [p.countResets]);\n\n\n\n    const initNewObject = function(type = 'poster3d') {\n        // get Scene by name:\n        const params = {\n            name:  `new_${type}_` + Math.floor(Math.random() * 10000),\n            type: type,\n            pos: Object.values(v.camera.getWorldDirection(new window.THREE.Vector3()).multiplyScalar(300)), // this normalizes but not to unitary, but to 300 long\n        }\n        switch (type) {\n            // case 'link': break;\n            case 'poster3d':    // with window.defaultPosterImg we can set up a default img on creation, from outside react.\n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n            break;\n            case 'poster3d-sphere': \n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n                params.type = 'poster3d';\n                params.posterSphere = true;\n            break;\n            //  case 'poster-sprite': \n            //     params.type = 'poster3d';\n            //     params.sprite = true; \n            //     break;\n            case 'text-2d': \n                params.text = \"New text\"; \n                break;\n            // case 'text-2d-sprite': \n            //     params.type = 'text-2d';\n            //     params.sprite = true; \n            //     params.text = \"New text\"; \n            //     break;\n            case 'text-3d': // doesnt work\n                params.type = 'text-3d';\n                params.fontFamily = window.basePath+'resources/fonts/Century_Gothic_Regular.js';\n                params.text = \"New text\";\n                break;\n            default: break;\n        }\n\n        // posterlens fn\n        // update states object 3d in viewer & object params for posterlens\n        params.callbackFn = mesh => p.setCurrentObject3D(mesh);        \n        window.pl.createNewObjectFromParams(v.panorama, params);\n\n        \n        // update the option settings\n        let worldParams = p.getCurrentPanoramaParams();\n        worldParams.hotspots.push(params);\n        const newPlOptions = p.plOptionsReplaceWorldParams(worldParams);\n        p.setPlOptions(newPlOptions);\n        \n        \n        \n        return params;\n    }\n\n  // its all vanilla js, connecting with panolens. No HTML\n  return (\n    null\n  );\n}\n\nexport default Widgets;\n","export function round2(fl) { \n    var numb = fl;\n    if (typeof numb === 'number')\n     numb = numb.toFixed(2);\n    return numb;\n    //return 0.001;\n }\n","import React, {useState} from 'react'\nimport {round2} from '../helpers';\n\nexport default function ObjectInfo(p) {\n\n    // State\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n\n    // info in a panel of the object. Gets updated when the currentObject3D updates. It means , when it's clicked for instance.\n    function currentObjectOptions() {\n        if (!p.currentObject3D) return;\n        const worldParams = p.getCurrentPanoramaParams();\n        let objectOptions = worldParams.hotspots.find( ht => ht.name === p.currentObject3D?.name );\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentObjectOptionsJSX() {\n        const objectOptions = currentObjectOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <h4>{p.currentObject3D?.name}<small> ({p.currentObject3D?.type})</small></h4>\n\n            <div className={ isOpen? 'd-block' : 'd-none' }>\n                \n                Pos: {round2(p.currentObject3D?.position.x)} {round2(p.currentObject3D?.position.y)} {round2(p.currentObject3D?.position.z)}\n                <br/>\n                Rot: x {round2(p.currentObject3D?.rotation.x)} / y {round2(p.currentObject3D?.rotation.y)} / z {round2(p.currentObject3D?.rotation.z)}\n                { currentObjectOptions()?.alwaysLookatCamera? '(alwayslookatcamera)' : null }\n                <br/>\n                Scale: {round2(p.currentObject3D?.scale.x)} {round2(p.currentObject3D?.scale.y)} {round2(p.currentObject3D?.scale.z)}\n            \n            \n                <React.Fragment>\n                <br/>\n                <b>Object Info in options:</b> <br/>\n                {currentObjectOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n}\n","import React, {useState} from 'react'\nimport {round2} from '../helpers';\n\nexport default function ObjectInfo(p) {\n\n    // State\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n\n    // info in a panel of the panorama.\n    function currentPanoOptions() {\n        const worldParams = p.getCurrentPanoramaParams();\n        if (!worldParams) return;\n        let objectOptions = {... worldParams }\n        delete(objectOptions.hotspots)\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentPanoOptionsJSX() {\n        const objectOptions = currentPanoOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <div className={ isOpen? 'd-block' : 'd-none' }>            \n                <React.Fragment>\n                    <br/>\n                    <b>Panorama in options:</b> <br/>\n                    {currentPanoOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n}\n","import React, {useState, useEffect, createRef} from 'react';\nimport EditObject2 from './EditObject2';\nimport ListObjects from './ListObjects';\nimport Widgets from './Widgets';\nimport ObjectInfo from './ObjectInfo';\nimport PanoInfo from './PanoInfo';\nimport {round2} from '../helpers';\n\n// Bootstrap 4\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport default function AppEditPosterlens( { data, setAppMode, appAsWidget } ) {\n  \n  // React states and refs\n  const [plOptions, setPlOptions] = useState(); // IMPORTANT. The goal of all this app is to generate these options. With them we can call posterlens to createa  tour.\n  const [currentObject3D, setCurrentObject3D] = useState(null); // The current THREEjs selected object. Sometimes we use pl.lastSelectedObj, because there are events outside REACT that can't use the State\n  const [isEditMode, setIsEditMode] = useState(false); // In this app, it's always true\n  \n  const [editParams, setEditParams] = useState( {\n    POSTERLENS_CONTAINER_ID: 'posterlens-container',\n    SCALE_FACTOR : 1.01,\n    ROTATE_DEG : 0.05, // radians. 3.1416 is 180 deg.\n    currentMouse3DPosition: [0,0,0],\n    AUTO_START_EDIT_MODE : 1,\n    isExpertMode: (typeof window.expertMode !== 'undefined')? window.expertMode : true\n  } );\n  const [countRestarts, setCountRestarts] = useState(0); // not important\n  const [info, setInfo] = useState('');\n\n  const [onClickOption, setOnClickOption] = useState(null); // used in InputOnclickOption, but needs to be defined here.\n  var refContainer = createRef();\n  var refContainerParent = createRef();\n\n  \n\n\n\n  // React Life cycle. INIT\n  \n  useEffect(() => {\n    console.log('hello from useEffect in App');\n    // create the interactive 3d viewer with posterlens\n    createViewer();\n    setCountRestarts(1); // small helper\n  }, []);\n  \n  // called on init and restart\n  useEffect(() => {\n    // initialize this react plugin to make that viewer interactive.\n    if (window.pl)\n      if (editParams.AUTO_START_EDIT_MODE) \n        setIsEditMode(true);\n  }, [countRestarts]);\n\n  //  a simple msg\n  useEffect( () => {\n    if (info !== '') setTimeout( () => setInfo(''), 2000 );\n  }, [info])\n\n  useEffect( () => {\n    if (!currentObject3D) return;\n    console.log('watch currentObject3D ----------------------')\n    localStorage.setItem('lastSelectedObj.name', currentObject3D.name);\n    \n    // Object 3D ====> Inputs  !SHABBY WAY!\n    const options = getOptionsByObject3D(currentObject3D);\n    const formsSync = document.querySelectorAll('[sync-3d]');\n    formsSync.forEach( formEl => {\n      const option = formEl.getAttribute('sync-3d');\n      let value = (typeof options[option] !== 'undefined' )? options[option] : '';\n      let inputDefault = formEl.getAttribute('sync-default'); // string \"true\" or \"false\"\n      inputDefault = typeof inputDefault === 'undefined' || inputDefault === 'false' ? '' : inputDefault;\n      if (value === '' && inputDefault) value = inputDefault;\n       \n      if (formEl.querySelector('input'))\n        formEl.querySelector('input').value = value;\n      if (formEl.querySelector('select'))\n        formEl.querySelector('select').value = value;\n      if (formEl.querySelector('input[type=\"checkbox\"]'))\n        formEl.querySelector('input[type=\"checkbox\"]').checked = value? true : false ;\n\n      if (option === 'onClickAction') { // special case. InputOnClickOption: This field handles a state that need to be updated\n        setOnClickOption(value);\n      }\n    })\n\n    // currentObject3D.material.blending = 2;\n  }, [currentObject3D])\n  \n  // Methods helpers\n\n  // x,y,z of mouse inside the 3d world. posterlens has this functions, but it doesnt work if I call it in onmousemove.\n  const reactGetMouse3Dposition = function(event) {\n    if (!window.pl) return\n    const v = window.pl.viewer;\n    if (!v) { console.warn('Cant retrieve mouse pos, not viewer defined'); return; }\n\n    const intersects = v.raycaster.intersectObject( v.panorama, true );\n    if ( intersects.length <= 0 ) return;\n    let i = 0;\n    while ( i < intersects.length ) {\n        if (intersects[i].object.name === 'invisibleWorld') {\n            const point = intersects[i].point.clone();\n            const world = v.panorama.getWorldPosition( new window.THREE.Vector3() );\n            point.sub( world );\n            const currentMP = [ Math.round(point.x.toFixed(2)/2), Math.round(point.y.toFixed(2)/2), Math.round(point.z.toFixed(2)/2) ];\n            setEditParams( Object.assign( {}, editParams, { currentMouse3DPosition: currentMP } ) );\n            return currentMP;        \n            \n        }\n        i++;\n    }\n  }\n  \n  \n  // handlers\n\n    // CALL to posTERLENS\n  function createViewer() {\n    var posterlensConfig = {}\n    if (!data) console.log('data variable not found.')\n    else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n    \n    // load from cache by default\n    var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n//    console.log(retrievedOptions.worlds[0].hotspots[7].rot);\n    posterlensConfig = (retrievedOptions?.worlds) ? retrievedOptions : posterlensConfig;\n    if (!posterlensConfig) {\n      console.error('No data loaded. Cant initialize');\n      return;\n    }\n\n    // CALL POSTERLENS\n    window.pl = document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).posterlens( posterlensConfig );\n    setPlOptions(window.pl.o);\n    window.pl.viewer.panorama.addEventListener('load', () => {\n      // init also selected obj if it was selected before\n      const lso = localStorage.getItem('lastSelectedObj.name');\n      if (lso) {\n        const selObj = window.pl.getObjectByName(lso);\n        if (selObj) setCurrentObject3D(selObj);\n      }\n      // Debug with chrome three inspector.\n      window.scene = window.pl.viewer.getScene();\n\n     if (isEditMode) window.stopAllAnimations(window.pl.viewer);\n\n    });\n  }\n\n  useEffect( () => { \n    window.pl.viewer.editMode = isEditMode;\n  }, [isEditMode]);\n  \n  function restartViewer() {\n    destroyViewer();\n    setPlOptions(null);\n    setIsEditMode(false);\n    delete(window.pl);\n    createViewer();\n    setCountRestarts(countRestarts + 1);\n    // and widgets are rerenderr because its key is associated to countRestarts, so they are loaded ok.\n  }\n\n  // helpers\n  function getOptionsByObject3D(object3D, option = null) {\n    const currentWorldOptions = getCurrentPanoramaParams();\n    let objectData = currentWorldOptions.hotspots.find( ht => ht.name === object3D?.name );\n    if (objectData && option) return objectData[option];\n    return objectData;\n  }\n  function getCurrentPanoramaParams() {\n    if (!plOptions) return null;\n    return plOptions.worlds.find( w => w.name === window.pl.viewer.panorama.name );\n  }\n  function getCurrentPanoramaParamsIndex() {\n    return plOptions.worlds.findIndex( w => w.name === window.pl.viewer.panorama.name );\n  }\n  // returns all pl with the new worldparmas at the place of the current panorama params\n  function plOptionsReplaceWorldParams(worldParams) {\n    const newOptions = Object.assign({}, plOptions);\n    newOptions.worlds[getCurrentPanoramaParamsIndex()] = {...worldParams};\n    return newOptions;\n  }\n  // returns all pl options replacing the hotspots in current panorama with that name\n  function plOptionsReplaceWorldParamsHotspot(name, objectData) {\n    const currentWorldParams = getCurrentPanoramaParams();\n    const getHotspotIndex   = currentWorldParams.hotspots.findIndex(ht => ht.name === name);\n    if ( getHotspotIndex < 0 ) return;\n    const newHotspots = [...currentWorldParams.hotspots];\n    newHotspots[getHotspotIndex] = objectData;\n    currentWorldParams.hotspots = newHotspots;\n    return plOptionsReplaceWorldParams(currentWorldParams);\n  }\n\n  // updates plOptions (the js object with all the config to load posterlens).\n  // updates the react state and the localstorage (it can be used outside of react). It also uses a callback that can be used outside react.\n  function syncPlOptionsAndLocalStorage(plOptions) {\n    setPlOptions(plOptions);\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    localStorage.setItem('pl.o', exportStr);\n    if (window.onSavePlOptionsCallback) window.onSavePlOptionsCallback(plOptions); // this fn is passed from outside react, and it can be useful\n    return exportStr;\n  }\n\n  // Object 3d in viewer ===> Options in pl.\n  // =======================> Options pl\n  function singleObject3DToParams(object3D) {\n  \n\n    // const worldParams = getCurrentPanoramaParams();\n    // let objectHotspotIndex = worldParams.hotspots.findIndex( ht => ht.name === object3D?.name );\n    // if (objectHotspotIndex < 0 ) {\n    //   // not found, we create it. This will never happen. And if it did , it would be wront. It should create more than a name.\n    //   worldParams.hotspots.push({ name: object3D.name });\n    //   objectHotspotIndex = worldParams.hotspots.length - 1;\n    //   //return;\n    // }\n\n    const objectCurrentParams = getOptionsByObject3D(object3D); // worldParams.hotspots[objectHotspotIndex];\n    const objectNewParams     = {...objectCurrentParams};\n\n    if (!objectCurrentParams) { alert('error: no objectCP'); return; }\n    // pos, scale and rot\n    objectNewParams.pos = [round2(object3D.position.x), round2(object3D.position.y), round2(object3D.position.z)];\n    objectNewParams.rot = [round2(object3D.rotation.x), round2(object3D.rotation.y), round2(object3D.rotation.z)];\n    // if (object3D.name === 'TEST') debugger\n    objectNewParams.scale = round2(object3D.scale.x);\n    // map params from object into options:\n\n    const defaults = { 'opacity': 1, 'animatedMap': 1 }\n    const mapParams = {\n      'opacity': 'material.opacity',\n      'type' : 'type',\n    }\n    \n    // special params for type\n    switch (object3D.type) {\n      case 'pl_text-3d': \n        mapParams.emissive = 'material.emissive';\n        mapParams.transparent = 'material.transparent';\n        break;\n      case 'pl_text-2d-sprite': \n      case 'pl_text-2d': \n        mapParams.color = 'material.color';\n        break;\n      case 'pl_poster3d': \n        // mapParams.animatedMap = 'material.transparent';\n      default:\n      break;\n    }\n\n    // foreach field in the object 3d we save it as an option param\n    Object.keys(mapParams).forEach( option => {\n      const obFields = mapParams[option].split('.');\n      var currentField = object3D; // currentField has the value in the object 3d. ie, for field opacity, it has 0.5\n      obFields.forEach( field => currentField = currentField[field] ); // currentfield = \"resources/img.jpg\"\n      // fix if it's a color (rgb object): convert into string\n      // if (currentField.hasOwnProperty('r') && currentField.hasOwnProperty('g')) currentField = currentField.getHexString();\n      // fix type. In object has prefix pl_\n      if (option==='type') currentField = currentField.replace('pl_', '');\n      // if (option==='background') currentField = currentField? currentField : 'transparent';\n      \n\n      if (currentField === null && objectNewParams.hasOwnProperty(option)) \n        delete(objectNewParams[option]);\n      else {\n        if (defaults.hasOwnProperty(option)) { // save only if it not default\n          if (defaults[option] != currentField) \n            objectNewParams[option] = currentField; // { \"image\" : \"resources/img.jpg\" }\n        } else\n          objectNewParams[option] = currentField;\n      }\n    } );\n\n    // params only in options and not visible from object 3D (we need a panel and an input to edit it)\n    // image, animatedMap, animatedMapSpeed, alwaysLookatCamera, text, hoverText, link\n    \n\n    // update pl with the new options\n    // const newOptions = Object.assign({}, plOptions);\n    // newOptions.worlds[getCurrentPanoramaParamsIndex()].hotspots[objectHotspotIndex] = objectNewParams;\n    const newOptions = plOptionsReplaceWorldParamsHotspot(object3D.name, objectNewParams);\n    syncPlOptionsAndLocalStorage(newOptions);\n    \n    return objectNewParams;\n\n  }\n\n  // when picking up the object iwth mouse or from list of objects.\n  function selectObject(theObj) {\n    if (!theObj) return false;\n    // if (currentObject3D) currentObject3D.material.blending = 1;\n    window.lastSelectedObj = theObj;\n    setCurrentObject3D( theObj );\n    // look at the object, I dont know how to do it\n  }\n\n  // remove from data and in viewer\n  function removeCurrentObject() {\n    if (!currentObject3D) return;\n    const currentWorldOptions = getCurrentPanoramaParams();\n    const currentWorldOptionsIndex = getCurrentPanoramaParamsIndex();\n    let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === currentObject3D.name );\n    let newPlOptionsHotspots = [...currentWorldOptions.hotspots];\n    let hotspotIndex = newPlOptionsHotspots.findIndex( ht => ht.name === currentObject3D.name );\n    newPlOptionsHotspots.splice(hotspotIndex,1); //delte in array\n    const newO = {...plOptions};\n    newO.worlds[currentWorldOptionsIndex].hotspots = newPlOptionsHotspots;\n    syncPlOptionsAndLocalStorage(newO);\n    window.pl.viewer.panorama.remove( currentObject3D );\n    window.pl.viewer.panorama.remove( window.pl.viewer.scene.getChildByName(currentObject3D.name) ); // just in case (somethimes it doesn delete)\n    setCurrentObject3D(null);\n  }\n\n  // clone in data and reload the viewer.\n  function cloneCurrentObject() {\n    if (!currentObject3D) return;\n    const objectCurrentParams = Object.assign({}, getOptionsByObject3D(currentObject3D));\n    const currentWorldParams  = getCurrentPanoramaParams();\n    objectCurrentParams.name = \"cloned_\"+ objectCurrentParams.name;\n    objectCurrentParams.pos = [ objectCurrentParams.pos[0], objectCurrentParams.pos[1] + 50, objectCurrentParams.pos[2]]\n    currentWorldParams.hotspots.push(objectCurrentParams);\n    const newPlOptions = plOptionsReplaceWorldParams(currentWorldParams);\n    syncPlOptionsAndLocalStorage(newPlOptions);\n    // we need to restart the viewer to create it.\n    restartViewer();\n  }\n\n  // shows modal with all the options\n  function exportToTextarea() {\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    var textA = document.createElement( 'textarea' );\n    textA.textContent = exportStr;\n    textA.style.width = '100%'\n    textA.style.height= '500px';\n    window.pl.Modal('Export JSON', textA);\n  }\n\n    // args (inputs) ===> Options data\n    // given name of object and updated fields in the way { link : \"Hall\" }, we update the p.currentObjectData and the worldOptions\n    // in some cases, sync the 3d model with the new data in the case of the name.\n    const updateObjectSingleData = function( name, fields = {}, regenerate = true ) { \n      \n      const currentWorldOptions = getCurrentPanoramaParams();\n      let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === name );\n      if (objectHotspotIndex < 0 ) return;\n      // update the field\n      let objectData = currentWorldOptions.hotspots.find( ht => ht.name === name ); // all fields => { name: '', type: '' ... }\n      objectData = Object.assign({}, objectData, fields );\n      Object.keys(objectData).forEach( k =>  (objectData[k] === null)? delete(objectData[k]) : false ); // cleanup\n      const newPlOptions = plOptionsReplaceWorldParamsHotspot(name, objectData);\n      syncPlOptionsAndLocalStorage(newPlOptions);\n      \n      // regenerate the 3d object (remove and generate)\n      if (regenerate) {\n        const object = window.pl.getObjectByName(name);\n        if (name && window.pl.viewer.panorama && objectData ) {\n          window.pl.viewer.panorama.remove( object );\n          window.pl.createNewObjectFromParams(window.pl.viewer.panorama, objectData); // recreate the 3d in the viewer\n          const newObject = window.pl.getObjectByName(name);\n          setTimeout(()=>selectObject(newObject), 500);\n          \n        }\n        else {        \n          selectObject(object);\n        }\n      }\n  }\n\n\n\n\n  // remove all viewer. I should free up memory before...\n  function destroyViewer() {\n    document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).innerHTML = '';\n  }\n\n  \n\n\n\n\n  return <React.Fragment>\n    { currentObject3D? \n        <ObjectInfo currentObject3D={currentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} editParams={editParams} /> : \n        <PanoInfo currentObject3D={currentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} editParams={editParams} /> \n    }\n    { plOptions? <ListObjects currentObject3D={currentObject3D} plOptions={plOptions} selectObject={selectObject} editParams={editParams}\n                              setCurrentObject3D={setCurrentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} /> : null }\n    <Container className='wrapper border pt-2' style={{ maxWidth:'1200px' }}>\n\n      { plOptions && editParams.isExpertMode ? \n        <Button className=\"btn-sm\" onClick={ e => restartViewer() }> RESET <span className=\"badge\">{countRestarts}</span> </Button>         : null } \n      { !isEditMode? \n        <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ setIsEditMode(!isEditMode) }>Start Edit Mode</Button> : null } \n      { plOptions && editParams.isExpertMode ? \n        <Button className=\"btn btn-danger btn-sm\" onClick={ (e) => { localStorage.setItem('pl.o', null); restartViewer(); }  }>Clear cache </Button> : null }\n      { editParams.isExpertMode ? \n        <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ () => exportToTextarea() }>Export</Button> : null }\n\n        { currentObject3D? \n        <Button className=\"btn btn-danger btn-sm\" onClick={ removeCurrentObject }>Delete</Button> : null }\n        { currentObject3D? \n        <Button className=\"btn btn-success btn-sm\" onClick={ cloneCurrentObject }>Clone</Button> : null }\n\n        { currentObject3D? \n        <Button className=\"btn btn-warning btn-sm\" onClick={ ()=> { setCurrentObject3D(null); window.lastSelectedObj = null; } }>Unselect</Button> : null }\n\n        <Button variant=\"outline-secondary btn-sm ml-3\" onClick={ (e)=> setAppMode('demo') }>Demo</Button>\n\n      <Row className=\"no-gutters\" >\n        <Col sm={12}>\n          <div onMouseMove={ event => { reactGetMouse3Dposition(event); } } ref={refContainerParent}>\n           <div  id={editParams.POSTERLENS_CONTAINER_ID} className='posterlens-container' ref={refContainer}> </div>\n          </div>\n        </Col>\n        { isEditMode? \n                   <EditObject2 plOptions={plOptions} isEditMode={isEditMode} editParams={editParams} currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} reactGetMouse3Dposition={reactGetMouse3Dposition} \n                                singleObject3DToParams={singleObject3DToParams} setInfo={setInfo} updateObjectSingleData={updateObjectSingleData}\n                                getCurrentPanoramaParams={getCurrentPanoramaParams} selectObject={selectObject} getOptionsByObject3D={getOptionsByObject3D}\n                                appAsWidget={appAsWidget} plOptionsReplaceWorldParams={plOptionsReplaceWorldParams} syncPlOptionsAndLocalStorage={syncPlOptionsAndLocalStorage} \n                                onClickOption={onClickOption} setOnClickOption={setOnClickOption} />\n                : null }\n      </Row>\n\n\n      \n\n      \n      \n      {/* <Button className=\"btn-warning\" onClick={ () => localStorage.setItem('worldOptions', JSON.stringify(worldOptions))  }>Update</Button> */}\n      <div className='info' style={ {color: 'red'} }>{ info }</div>\n\n      \n\n      { isEditMode? <Widgets plOptions={plOptions} isEditMode={isEditMode} setIsEditMode={setIsEditMode}  \n                              setCurrentObject3D={setCurrentObject3D} plOptions={plOptions} singleObject3DToParams={singleObject3DToParams}\n                              refContainer={refContainer}\n                              key={countRestarts} restartViewer={restartViewer} \n                              plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                              getCurrentPanoramaParams={getCurrentPanoramaParams} setPlOptions={setPlOptions}\n                              \n                              \n                              /> : null }\n    </Container>\n    </React.Fragment>\n}\n","// This is the call of the React APP.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\n/* Variables that can be set from the outside:\n  window.appAsWidget = true;\n  window.expertMode = false;\n  window.plImgPath = 'http:// ... ' (not neccessary in appAsWidget mode)\n  window.basePath = 'http://' or 'relative/path/' (needed to show the Widgets imgs, for example) \n  window.onSavePlOptionsCallback = function(plOpts) { ... whatever you want to do }\n*/\nconst containers = document.querySelectorAll('.wrapper-posterlens-edit-container');\ncontainers.forEach( (el,i)=>{\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    el\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}