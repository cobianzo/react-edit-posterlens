{"version":3,"sources":["components/AppEditPosterlens.js","components/ListObjects.js","components/Widgets.js","components/ObjectInfo.js","components/InputData.js","components/EditObject2.js","components/AppDemoPosterlens.js","components/App.js","serviceWorker.js","index.js","helpers.js"],"names":["AppEditPosterlens","data","setAppMode","useState","plOptions","setPlOptions","currentObject3D","setCurrentObject3D","isEditMode","setIsEditMode","POSTERLENS_CONTAINER_ID","SCALE_FACTOR","ROTATE_DEG","currentMouse3DPosition","AUTO_START_EDIT_MODE","editParams","setEditParams","countRestarts","setCountRestarts","info","setInfo","refContainer","createRef","refContainerParent","globalVars","THREE","eval","TWEEN","stopAllAnimations","useEffect","console","log","createViewer","window","pl","setTimeout","localStorage","setItem","name","getMouse3Dposition","event","v","viewer","intersects","raycaster","intersectObject","panorama","length","i","object","point","clone","world","getWorldPosition","Vector3","sub","currentMP","Math","round","x","toFixed","y","z","Object","assign","warn","posterlensConfig","retrievedOptions","JSON","parse","getItem","worlds","document","querySelector","posterlens","o","addEventListener","lso","selObj","getObjectByName","scene","getScene","error","restartViewer","destroyViewer","getOptionsByObject3D","object3D","option","currentWorldOptions","getCurrentPanoramaParams","objectData","hotspots","find","ht","w","getCurrentPanoramaParamsIndex","findIndex","plOptionsReplaceWorldParams","worldParams","newOptions","plOptionsReplaceWorldParamsHotspot","currentWorldParams","getHotspotIndex","newHotspots","syncPlOptionsAndLocalStorage","exportStr","stringify","singleObject3DToParams","objectCurrentParams","objectNewParams","pos","round2","position","rot","rotation","scale","defaults","mapParams","type","emissive","transparent","color","keys","forEach","obFields","split","currentField","field","replace","hasOwnProperty","alert","selectObject","theObj","lastSelectedObj","removeCurrentObject","currentWorldOptionsIndex","newPlOptionsHotspots","hotspotIndex","splice","newO","remove","getChildByName","cloneCurrentObject","push","exportToTextarea","textA","createElement","textContent","style","width","height","Modal","editMode","updateObjectSingleData","fields","regenerate","objectHotspotIndex","k","newPlOptions","createNewObjectFromParams","newObject","innerHTML","Fragment","className","maxWidth","onClick","e","variant","target","sm","onMouseMove","ref","id","ListObjects","p","init","setInit","map","element","key","getCameraDirection","join","camera","fov","objectsToPopupWhenVisible","min","max","Widgets","isWidgetsInit","setIsWidgetsInit","appendControlItem","backgroundImage","float","onTap","updateIsEdit","group","Array","from","initNewObject","newObj","countResets","params","floor","random","values","getWorldDirection","multiplyScalar","image","posterSphere","text","sprite","fontFamily","ObjectInfo","currentObjectOptions","alwaysLookatCamera","objectOptions","lines","jsx","line","currentObjectOptionsJSX","Input","wrapperUpdateObjectSingleData","value","theValue","input","deleteIfValue","fieldPair","InputGroup","Prepend","Text","label","extensions","dims","minWidth","minHeight","maxHeight","onChange","base64","imgPath","onError","errMsg","Button","Append","onSubmit","preventDefault","currentTarget","FormControl","as","defaultValue","Form","Check","step","Group","defaultChecked","checkedValue","checked","uncheckedValue","options","viewInput","EditObject2","setImgPath","refImgPathInput","renderer","domElement","handlerPickupObject","selectedObj","newPos","normalize","distance","setObjectPos","handlerDropObject","handlerScaleRotateObject","shiftIsPressed","startsWith","distanceTo","OrbitControls","enabled","originalPos","ctrlKey","set","z_move","constructor","waitSave","clearTimeout","direction","offset","panoList","inputs","active","Container","marginTop","role","aria-label","current","Row","inputsCol","col_i","Col","includes","AppDemoPosterlens","class","location","hash","App","appMode","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","fl","numb"],"mappings":"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","file":"static/js/main.0cc91b9d.chunk.js","sourcesContent":["import React, {useState, useEffect, createRef} from 'react';\nimport EditObject2 from './EditObject2';\nimport ListObjects from './ListObjects';\nimport Widgets from './Widgets';\nimport ObjectInfo from './ObjectInfo';\nimport {round2} from '../helpers';\n\n// Bootstrap 4\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Badge from 'react-bootstrap/Badge';\n\n\nexport default function AppEditPosterlens( { data, setAppMode } ) {\n\n  // React states and refs\n  const [plOptions, setPlOptions] = useState();\n  const [currentObject3D, setCurrentObject3D] = useState(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [editParams, setEditParams] = useState( {\n    POSTERLENS_CONTAINER_ID: 'posterlens-container',\n    SCALE_FACTOR : 1.01,\n    ROTATE_DEG : 0.05, // radians. 3.1416 is 180 deg.\n    currentMouse3DPosition: [0,0,0],\n    AUTO_START_EDIT_MODE : 1,\n  } );\n  const [countRestarts, setCountRestarts] = useState(0);\n  const [info, setInfo] = useState('');\n\n  var refContainer = createRef();\n  var refContainerParent = createRef();\n\n  const globalVars = {\n    THREE: eval('THREE'),\n    TWEEN: eval('TWEEN'),\n    stopAllAnimations: eval('stopAllAnimations')\n  }\n\n\n\n  // React Life cycle. INIT\n  \n  useEffect(() => {\n    console.log('hello from useEffect in App');\n    // create the interactive 3d viewer with posterlens\n    createViewer();\n    setCountRestarts(1); // small helper\n  }, []);\n  \n  // called on init and restart\n  useEffect(() => {\n    // initialize this react plugin to make that viewer interactive.\n    if (window.pl)\n      if (editParams.AUTO_START_EDIT_MODE) \n        setIsEditMode(true);\n  }, [countRestarts]);\n\n  //  a simple msg\n  useEffect( () => {\n    if (info !== '') setTimeout( () => setInfo(''), 2000 );\n  }, [info])\n\n  useEffect( () => {\n    if (!currentObject3D) return;\n    \n    localStorage.setItem('lastSelectedObj.name', currentObject3D.name);\n    // currentObject3D.material.blending = 2;\n  }, [currentObject3D])\n  \n  // Methods helpers\n\n  // x,y,z of mouse inside the 3d world. posterlens has this functions, but it doesnt work if I call it in onmousemove.\n  const getMouse3Dposition = function(event) {\n    if (!window.pl) return\n    const v = window.pl.viewer;\n    if (!v) { console.warn('Cant retrieve mouse pos, not viewer defined'); return; }\n\n    const intersects = v.raycaster.intersectObject( v.panorama, true );\n    if ( intersects.length <= 0 ) return;\n    let i = 0;\n    while ( i < intersects.length ) {\n        if (intersects[i].object.name === 'invisibleWorld') {\n            const point = intersects[i].point.clone();\n            const world = v.panorama.getWorldPosition( new globalVars.THREE.Vector3() );\n            point.sub( world );\n            const currentMP = [ Math.round(point.x.toFixed(2)/2), Math.round(point.y.toFixed(2)/2), Math.round(point.z.toFixed(2)/2) ];\n            setEditParams( Object.assign( {}, editParams, { currentMouse3DPosition: currentMP } ) );\n            return currentMP;        \n            \n        }\n        i++;\n    }\n  }\n  \n  \n  // handlers\n\n    // CALL to posTERLENS\n  function createViewer() {\n    var posterlensConfig = {}\n    if (!data) console.log('data variable not found.')\n    else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n    \n    // load from cache by default\n    var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n//    console.log(retrievedOptions.worlds[0].hotspots[7].rot);\n    posterlensConfig = (retrievedOptions?.worlds) ? retrievedOptions : posterlensConfig;\n    if (!posterlensConfig) {\n      console.error('No data loaded. Cant initialize');\n      return;\n    }\n\n    // CALL POSTERLENS\n    window.pl = document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).posterlens( posterlensConfig );\n    setPlOptions(window.pl.o);\n    window.pl.viewer.panorama.addEventListener('load', () => {\n      // init also selected obj if it was selected before\n      const lso = localStorage.getItem('lastSelectedObj.name');\n      if (lso) {\n        const selObj = window.pl.getObjectByName(lso);\n        if (selObj) setCurrentObject3D(selObj);\n      }\n      // Debug with chrome three inspector.\n      window.scene = window.pl.viewer.getScene();\n\n      if (isEditMode) globalVars.stopAllAnimations(window.pl.viewer);\n\n    });\n  }\n\n  useEffect( () => { \n    window.pl.viewer.editMode = isEditMode;\n  }, [isEditMode]);\n  \n  function restartViewer() {\n    destroyViewer();\n    setPlOptions(null);\n    setIsEditMode(false);\n    delete(window.pl);\n    createViewer();\n    setCountRestarts(countRestarts + 1);\n    // and widgets are rerenderr because its key is associated to countRestarts, so they are loaded ok.\n  }\n\n  // helpers\n  function getOptionsByObject3D(object3D, option = null) {\n    const currentWorldOptions = getCurrentPanoramaParams();\n    let objectData = currentWorldOptions.hotspots.find( ht => ht.name === object3D?.name );\n    if (objectData && option) return objectData[option];\n    return objectData;\n  }\n  function getCurrentPanoramaParams() {\n    return plOptions.worlds.find( w => w.name === window.pl.viewer.panorama.name );\n  }\n  function getCurrentPanoramaParamsIndex() {\n    return plOptions.worlds.findIndex( w => w.name === window.pl.viewer.panorama.name );\n  }\n  // returns all pl with the new worldparmas at the place of the current panorama params\n  function plOptionsReplaceWorldParams(worldParams) {\n    const newOptions = Object.assign({}, plOptions);\n    newOptions.worlds[getCurrentPanoramaParamsIndex()] = {...worldParams};\n    return newOptions;\n  }\n  // returns all pl options replacing the hotspots in current panorama with that name\n  function plOptionsReplaceWorldParamsHotspot(name, objectData) {\n    const currentWorldParams = getCurrentPanoramaParams();\n    const getHotspotIndex   = currentWorldParams.hotspots.findIndex(ht => ht.name === name);\n    if ( getHotspotIndex < 0 ) return;\n    const newHotspots = [...currentWorldParams.hotspots];\n    newHotspots[getHotspotIndex] = objectData;\n    currentWorldParams.hotspots = newHotspots;\n    return plOptionsReplaceWorldParams(currentWorldParams);\n  }\n\n  function syncPlOptionsAndLocalStorage(plOptions) {\n    setPlOptions(plOptions);\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    localStorage.setItem('pl.o', exportStr);\n    return exportStr;\n  }\n\n  // Object 3d in viewer ===> Options in pl.\n  // =======================> Options pl\n  function singleObject3DToParams(object3D) {\n  \n\n    // const worldParams = getCurrentPanoramaParams();\n    // let objectHotspotIndex = worldParams.hotspots.findIndex( ht => ht.name === object3D?.name );\n    // if (objectHotspotIndex < 0 ) {\n    //   // not found, we create it. This will never happen. And if it did , it would be wront. It should create more than a name.\n    //   worldParams.hotspots.push({ name: object3D.name });\n    //   objectHotspotIndex = worldParams.hotspots.length - 1;\n    //   //return;\n    // }\n\n    const objectCurrentParams = getOptionsByObject3D(object3D); // worldParams.hotspots[objectHotspotIndex];\n    const objectNewParams     = {...objectCurrentParams};\n\n    if (!objectCurrentParams) { alert('error: no objectCP'); return; }\n    // pos, scale and rot\n    objectNewParams.pos = [round2(object3D.position.x), round2(object3D.position.y), round2(object3D.position.z)];\n    objectNewParams.rot = [round2(object3D.rotation.x), round2(object3D.rotation.y), round2(object3D.rotation.z)];\n    // if (object3D.name === 'TEST') debugger\n    objectNewParams.scale = round2(object3D.scale.x);\n    // map params from object into options:\n\n    const defaults = { 'opacity': 1, 'animatedMap': 1 }\n    const mapParams = {\n      'opacity': 'material.opacity',\n      'type' : 'type',\n    }\n    \n    // special params for type\n    switch (object3D.type) {\n      case 'pl_text-3d': \n        mapParams.emissive = 'material.emissive';\n        mapParams.transparent = 'material.transparent';\n        break;\n      case 'pl_text-2d-sprite': \n      case 'pl_text-2d': \n        mapParams.color = 'material.color';\n        break;\n      case 'pl_poster3d': \n        // mapParams.animatedMap = 'material.transparent';\n      default:\n      break;\n    }\n\n    // foreach field in the object 3d we save it as an option param\n    Object.keys(mapParams).forEach( option => {\n      const obFields = mapParams[option].split('.');\n      var currentField = object3D; // currentField has the value in the object 3d. ie, for field opacity, it has 0.5\n      obFields.forEach( field => currentField = currentField[field] ); // currentfield = \"resources/img.jpg\"\n      // fix if it's a color (rgb object): convert into string\n      // if (currentField.hasOwnProperty('r') && currentField.hasOwnProperty('g')) currentField = currentField.getHexString();\n      // fix type. In object has prefix pl_\n      if (option==='type') currentField = currentField.replace('pl_', '');\n      // if (option==='background') currentField = currentField? currentField : 'transparent';\n      \n\n      if (currentField === null && objectNewParams.hasOwnProperty(option)) \n        delete(objectNewParams[option]);\n      else {\n        if (defaults.hasOwnProperty(option)) { // save only if it not default\n          if (defaults[option] != currentField) \n            objectNewParams[option] = currentField; // { \"image\" : \"resources/img.jpg\" }\n        } else\n          objectNewParams[option] = currentField;\n      }\n    } );\n\n    // params only in options and not visible from object 3D (we need a panel and an input to edit it)\n    // image, animatedMap, animatedMapSpeed, alwaysLookatCamera, text, hoverText, link\n    \n\n    // update pl with the new options\n    // const newOptions = Object.assign({}, plOptions);\n    // newOptions.worlds[getCurrentPanoramaParamsIndex()].hotspots[objectHotspotIndex] = objectNewParams;\n    const newOptions = plOptionsReplaceWorldParamsHotspot(object3D.name, objectNewParams);\n    syncPlOptionsAndLocalStorage(newOptions);\n    \n    return objectNewParams;\n\n  }\n\n  // when picking up the object iwth mouse or from list of objects.\n  function selectObject(theObj) {\n    if (!theObj) return false;\n    // if (currentObject3D) currentObject3D.material.blending = 1;\n    window.lastSelectedObj = theObj;\n    setCurrentObject3D( theObj );\n    // look at the object, I dont know how to do it\n  }\n\n  // remove from data and in viewer\n  function removeCurrentObject() {\n    if (!currentObject3D) return;\n    const currentWorldOptions = getCurrentPanoramaParams();\n    const currentWorldOptionsIndex = getCurrentPanoramaParamsIndex();\n    let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === currentObject3D.name );\n    let newPlOptionsHotspots = [...currentWorldOptions.hotspots];\n    let hotspotIndex = newPlOptionsHotspots.findIndex( ht => ht.name === currentObject3D.name );\n    newPlOptionsHotspots.splice(hotspotIndex,1); //delte in array\n    const newO = {...plOptions};\n    newO.worlds[currentWorldOptionsIndex].hotspots = newPlOptionsHotspots;\n    syncPlOptionsAndLocalStorage(newO);\n    window.pl.viewer.panorama.remove( currentObject3D );\n    window.pl.viewer.panorama.remove( window.pl.viewer.scene.getChildByName(currentObject3D.name) ); // just in case (somethimes it doesn delete)\n    setCurrentObject3D(null);\n  }\n\n  // clone in data and reload the viewer.\n  function cloneCurrentObject() {\n    if (!currentObject3D) return;\n    const objectCurrentParams = Object.assign({}, getOptionsByObject3D(currentObject3D));\n    const currentWorldParams  = getCurrentPanoramaParams();\n    objectCurrentParams.name = \"cloned_\"+ objectCurrentParams.name;\n    objectCurrentParams.pos = [ objectCurrentParams.pos[0], objectCurrentParams.pos[1] + 50, objectCurrentParams.pos[2]]\n    currentWorldParams.hotspots.push(objectCurrentParams);\n    const newPlOptions = plOptionsReplaceWorldParams(currentWorldParams);\n    syncPlOptionsAndLocalStorage(newPlOptions);\n    // we need to restart the viewer to create it.\n    restartViewer();\n  }\n\n  // shows modal with all the options\n  function exportToTextarea() {\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    var textA = document.createElement( 'textarea' );\n    textA.textContent = exportStr;\n    textA.style.width = '100%'\n    textA.style.height= '500px';\n    window.pl.Modal('Export JSON', textA);\n  }\n\n    // args (inputs) ===> Options data\n    // given name of object and updated fields in the way { link : \"Hall\" }, we update the p.currentObjectData and the worldOptions\n    // in some cases, sync the 3d model with the new data in the case of the name.\n    const updateObjectSingleData = function( name, fields = {}, regenerate = true ) { \n      \n      const currentWorldOptions = getCurrentPanoramaParams();\n      let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === name );\n      if (objectHotspotIndex < 0 ) return;\n      // update the field\n      let objectData = currentWorldOptions.hotspots.find( ht => ht.name === name ); // all fields => { name: '', type: '' ... }\n      objectData = Object.assign({}, objectData, fields );\n      Object.keys(objectData).forEach( k =>  (objectData[k] === null)? delete(objectData[k]) : false ); // cleanup\n      const newPlOptions = plOptionsReplaceWorldParamsHotspot(name, objectData);\n      syncPlOptionsAndLocalStorage(newPlOptions);\n      \n      // regenerate the 3d object (remove and generate)\n      if (regenerate) {\n        const object = window.pl.getObjectByName(name);\n        if (name && window.pl.viewer.panorama && objectData ) {\n          window.pl.viewer.panorama.remove( object );\n          window.pl.createNewObjectFromParams(window.pl.viewer.panorama, objectData); // recreate the 3d in the viewer\n          const newObject = window.pl.getObjectByName(name);\n          setTimeout(()=>selectObject(newObject), 500);\n          \n        }\n        else {        \n          selectObject(object);\n        }\n      }\n  }\n\n\n\n\n  // remove all viewer. I should free up memory before...\n  function destroyViewer() {\n    document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).innerHTML = '';\n  }\n\n  \n\n\n\n\n  return <React.Fragment>\n    { currentObject3D? <ObjectInfo currentObject3D={currentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} /> : null }\n    { plOptions? <ListObjects currentObject3D={currentObject3D} plOptions={plOptions} selectObject={selectObject} \n                              setCurrentObject3D={setCurrentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} /> : null }\n    <Container className='wrapper border pt-2' style={{ maxWidth:'1200px' }}>\n\n      { plOptions? \n        <Button className=\"btn-sm\" onClick={ e => restartViewer() }> RESET <span className=\"badge\">{countRestarts}</span> </Button>         : null } \n      { !isEditMode? \n        <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ setIsEditMode(!isEditMode) }>Start Edit Mode</Button> : null } \n      { plOptions? \n        <Button className=\"btn btn-danger btn-sm\" onClick={ (e) => { localStorage.setItem('pl.o', null); restartViewer(); }  }>Clear cache </Button> : null }\n\n        <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ () => exportToTextarea() }>Export</Button>\n\n        { currentObject3D? \n        <Button className=\"btn btn-danger btn-sm\" onClick={ removeCurrentObject }>Delete</Button> : null }\n        { currentObject3D? \n        <Button className=\"btn btn-success btn-sm\" onClick={ cloneCurrentObject }>Clone</Button> : null }\n\n        <Button variant=\"outline-primary btn-sm\" onClick={ (e)=> { globalVars.stopAllAnimations(window.pl.viewer); e.target.remove() } }>Stop anim.</Button>\n        <Button variant=\"outline-secondary btn-sm\" onClick={ (e)=> setAppMode('demo') }>Demo</Button>\n\n      <Row className=\"no-gutters\" >\n        <Col sm={12}>\n          <div onMouseMove={ event => { getMouse3Dposition(event); } } ref={refContainerParent}>\n           <div  id={editParams.POSTERLENS_CONTAINER_ID} className='posterlens-container' ref={refContainer}> </div>\n          </div>\n        </Col>\n        { isEditMode? \n                   <EditObject2 plOptions={plOptions} isEditMode={isEditMode} editParams={editParams} globalVars={globalVars} currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} getMouse3Dposition={getMouse3Dposition} \n                                singleObject3DToParams={singleObject3DToParams} setInfo={setInfo} updateObjectSingleData={updateObjectSingleData}\n                                getCurrentPanoramaParams={getCurrentPanoramaParams} selectObject={selectObject} getOptionsByObject3D={getOptionsByObject3D}  />\n                : null }\n      </Row>\n\n\n      \n\n      \n      \n      {/* <Button className=\"btn-warning\" onClick={ () => localStorage.setItem('worldOptions', JSON.stringify(worldOptions))  }>Update</Button> */}\n      <div className='info' style={ {color: 'red'} }>{ info }</div>\n\n      \n\n      { isEditMode? <Widgets plOptions={plOptions} isEditMode={isEditMode} setIsEditMode={setIsEditMode} globalVars={globalVars} \n                              setCurrentObject3D={setCurrentObject3D} plOptions={plOptions} singleObject3DToParams={singleObject3DToParams}\n                              refContainer={refContainer}\n                              key={countRestarts} restartViewer={restartViewer}\n                              plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                              getCurrentPanoramaParams={getCurrentPanoramaParams} setPlOptions={setPlOptions}\n                              \n                              /> : null }\n    </Container>\n    </React.Fragment>\n}\n","import React, {useState, useEffect} from 'react'\n\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\n\nexport default function ListObjects(p) {\n    const [init, setInit] = useState(null);\n    useEffect(() => {\n        console.log('🚴🏼‍♀️Hello from ListObjects')\n        setInit(p.getCurrentPanoramaParams());\n    }, [p.plOptions])\n\n    const getObjectsShowWhenVisible = function() {\n        if (!window.pl) return 'not loaded';\n        if (!window.pl.viewer.panorama.objectsToPopupWhenVisible) return 'none';\n        const jsx = <div> {Object.keys(window.pl.viewer.panorama.objectsToPopupWhenVisible).map( k=>{\n            const [min,max] = window.pl.viewer.panorama.objectsToPopupWhenVisible[k];\n            return <p key={k}>{k} : {min}º, {max}º</p>;\n        })} </div>\n        return jsx;\n    }\n    return (\n        <Col className='list-objects' sm='2'>\n            List Hotposts in Pano Options\n            {init && p.plOptions?.worlds ? \n            <ul>\n                { init.hotspots.map((element,i) => {\n                    return <li key={i} onClick={ () => {\n                        // get object 3d\n                        const theObj = window.pl.getObjectByName(element.name);\n                        p.selectObject(theObj);\n                    }} className={ (p.currentObject3D?.name === element.name )? 'active' : '' }>\n                        {element.name} <small>{element.type}</small>\n                    </li>\n                })}\n            </ul>\n            : null }\n\n           <br/> { /** curiously this works, I dont need to use any State, it works ok with the pl object fn. \n                    *    It is because of the mousemove event in App.js. It makes recalculate this component aparently\n                    */}\n           Camera: { window.pl? window.pl.getCameraDirection('lookatPoint').join(', ')  : null }\n           <br/>\n           Angle: { window.pl? Math.round(window.pl.getCameraDirection('rad') * 100)/100 : null }\n             rad :: { window.pl? Math.round(window.pl.getCameraDirection('deg')) : null }º\n            <br/>\n            Fov: { window.pl? window.pl.viewer.camera.fov : null }\n            <br/>\n            <br/>\n            <i>Show if visible:</i> { init? getObjectsShowWhenVisible() : null }\n        </Col>\n    )\n}\n","import {useEffect, useState} from 'react';\n\n\nfunction Widgets( p ) {\n\n    const v = window.pl?.viewer;\n    const [isWidgetsInit, setIsWidgetsInit ] = useState(false);\n    const initWidgets = function() {\n        if (isWidgetsInit) return;\n        setIsWidgetsInit(true);\n        // Widgets\n        // Buttn to enable/disable Edit Mode: NOT IN USE\n        v.appendControlItem({\n            style: {\n                backgroundImage: 'url(https://images-na.ssl-images-amazon.com/images/I/91ovrqFkzkL._RI_SX200_.jpg)',\n                float: 'left'\n            },    \n            onTap: () => { \n                var updateIsEdit = !p.isEditMode;\n                p.setIsEditMode(updateIsEdit);\n                if (updateIsEdit && typeof p.globalVars.stopAllAnimations !== 'undefined') p.globalVars.stopAllAnimations(v);  \n                // p.exportOptions('input'); // console the new\n            },\n            group: 'editmode'\n        });\n        // Create poster buttons. One for every type.\n        Array.from([ /*'link', */\n                    'poster-sprite',\n                    'poster3d',\n                    'poster3d-sphere',\n                    'text-3d',\n                    'text-2d',\n                    'text-2d-sprite' \n            ] ).forEach( type => {\n                v.appendControlItem({\n                    id: 'edit-controls',\n                    style: {\n                        backgroundImage: 'url(posterlens/assets/widget-'+type+'.png)',\n                        float: 'left'\n                    },    \n                    onTap: () => { \n                        const { newObj, objectData } = initNewObject( type );\n                        console.log('Created new obj: ', { newObj, objectData })\n                    },\n                    group: 'editmode'\n                });\n        })\n    }\n    useEffect(() => {\n        console.log('Hellow from widgets');\n        if (window.pl && p.isEditMode) \n            //if (!p.pl.viewer.widget) \n                initWidgets() // TODO: if deactivate and reactivate the editmode, the widgets are created again (duplicated)\n                // we can use pl.viewer.widget.barElement.remove() when deactivated to delete the previous ones. But ideally we could avoid calling this init if they exist.\n    }, [p.countResets]);\n\n\n\n    const initNewObject = function(type = 'poster3d') {\n        // get Scene by name:\n        const params = {\n            name:  `new_${type}_` + Math.floor(Math.random() * 10000),\n            type: type,\n            pos: Object.values(v.camera.getWorldDirection(new p.globalVars.THREE.Vector3()).multiplyScalar(300)), // this normalizes but not to unitary, but to 300 long\n        }\n        switch (type) {\n            // case 'link': break;\n            case 'poster3d': \n                params.image = 'resources/poster3.jpg';\n            break;\n            case 'poster3d-sphere': \n                params.image = 'resources/poster3.jpg';\n                params.type = 'poster3d';\n                params.posterSphere = true;\n            break;\n             case 'poster-sprite': break;\n                params.sprite = true; \n            case 'text-2d': \n                params.text = \"New text\"; \n                break;\n            case 'text-2d-sprite': \n                params.text = \"New text\"; \n                params.sprite = true; \n                params.type = 'text-2d';\n                break;\n            case 'text-3d':\n                params.fontFamily = 'posterlens/assets/fonts/Century_Gothic_Regular.js';\n                params.text = \"New text\";\n                break;\n            default: break;\n        }\n\n        // posterlens fn\n        window.pl.createNewObjectFromParams(v.panorama, params);\n\n        // update states object 3d in viewer & object params for posterlens\n        const newObj = window.pl.viewer.panorama.getObjectByName(params.name);\n        p.setCurrentObject3D(newObj);\n        // update posterlens option\n        \n        // update the option settings\n        let worldParams = p.getCurrentPanoramaParams();\n        worldParams.hotspots.push(params);\n        const newPlOptions = p.plOptionsReplaceWorldParams(worldParams);\n        p.setPlOptions(newPlOptions);\n        \n        \n        \n        return { newObj, params } ;\n    }\n\n  // its all vanilla js, connecting with panolens. No HTML\n  return (\n    null\n  );\n}\n\nexport default Widgets;\n","import React from 'react'\nimport {round2} from '../helpers';\nexport default function ObjectInfo(p) {\n    // info in a panel of the object. Gets updated when the currentObject3D updates. It means , when it's clicked for instance.\n    function currentObjectOptions() {\n        if (!p.currentObject3D) return;\n        const worldParams = p.getCurrentPanoramaParams();\n        let objectOptions = worldParams.hotspots.find( ht => ht.name === p.currentObject3D?.name );\n        return objectOptions;\n    }\n    function currentObjectOptionsJSX() {\n        const objectOptions = currentObjectOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n    return (\n        <div className='object-info position-absolute'>\n            <h4>{p.currentObject3D?.name}<small> ({p.currentObject3D?.type})</small></h4>\n            Pos: {round2(p.currentObject3D?.position.x)} {round2(p.currentObject3D?.position.y)} {round2(p.currentObject3D?.position.z)}\n            <br/>\n            Rot: x {round2(p.currentObject3D?.rotation.x)} / y {round2(p.currentObject3D?.rotation.y)} / z {round2(p.currentObject3D?.rotation.z)}\n            { currentObjectOptions()?.alwaysLookatCamera? '(alwayslookatcamera)' : null }\n            <br/>\n            Scale: {round2(p.currentObject3D?.scale.x)} {round2(p.currentObject3D?.scale.y)} {round2(p.currentObject3D?.scale.z)}\n            \n            <br/>\n            <b>Object Info in options:</b> <br/>\n            {currentObjectOptionsJSX() }\n        </div>\n    )\n}\n","import React from 'react'\n\nimport Button from 'react-bootstrap/Button';\n\nimport { FilePicker } from 'react-file-picker'\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\n\nexport default function Input(p) {\n\n    const wrapperUpdateObjectSingleData = function (value) {\n        let theValue = value === p.input.deleteIfValue ? null : value; // with this we will remove the option from the params.\n        const fieldPair = { [p.input.option] : theValue };\n        // special fields that need special treatment\n        if ( p.input.option === 'background' && theValue === '' ) fieldPair[p.input.option] = 'transparent'; // no bg color => background: 'transparent'\n        if ( p.input.option === 'sprite' && theValue === true ) fieldPair.scale = p.currentObject3D.scale.x * 10; // if we convert into sprite we better scale or it will look tiny\n        if ( p.input.option === 'sprite' && !theValue ) fieldPair.scale = p.currentObject3D.scale.x / 10; // the other way as well.\n        p.updateObjectSingleData( p.currentObject3D.name, fieldPair);\n    }\n\n    const viewInput = function() {\n        switch (p.input.type) {\n            case \"image\":\n                return <InputGroup >\n                    <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FilePicker \n                extensions={['jpg', 'jpeg', 'png', 'gif', 'svg']}\n                dims={{minWidth: 100, maxWidth: 2500, minHeight: 100, maxHeight: 2500}}\n                onChange={base64 => p.updateObjectSingleData( p.currentObject3D.name, { [p.input.option]: p.imgPath+base64.name}) }\n                onError={ errMsg => alert(errMsg) }\n            >\n                <Button variant='primary'>\n                Select image\n                </Button >\n                </FilePicker>\n                <Button variant='danger' onClick={ (e) => { wrapperUpdateObjectSingleData(null) } }>\n                    Clear\n                </Button >\n                <InputGroup.Append> <InputGroup.Text>{p.getOptionsByObject3D(p.currentObject3D, p.input.option)}</InputGroup.Text></InputGroup.Append>\n                </InputGroup>\n            case \"input\":\n                return <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n>\n                    <InputGroup>\n                        <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                        <FormControl as='input' defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)}  />\n                        <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                    </InputGroup>\n                </form>\n            case \"number\":\n                return  <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                                >\n                            <InputGroup>\n                                <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                                <Form.Check type=\"number\" step={ p.input.step?? 1 }\n                                    defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)} />\n                                <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                            </InputGroup>\n                        </form>\n            case \"checkbox\":\n                return <Form.Group >\n                <Form.Check type=\"checkbox\" label={p.input.label + `(${p.getOptionsByObject3D(p.currentObject3D, p.input.option)})`}\n                            defaultChecked={p.getOptionsByObject3D(p.currentObject3D, p.input.option) === p.input.checkedValue() || p.input.deleteIfValue === p.input.checkedValue() }\n                                onChange={ (e) => {\n                                    const value = e.currentTarget.checked? p.input.checkedValue(p.currentObject3D) : p.input.uncheckedValue(p.currentObject3D) ;\n                                    wrapperUpdateObjectSingleData(value);                                            \n                                } } />\n                </Form.Group>\n            case \"select\":\n                return <InputGroup>\n                     <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FormControl as='select' defaultValue={p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                                        onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) }>\n                                <option key='nothing' value='' >---</option>\n                                {   \n                                    (typeof p.input.options === 'object') ? Object.keys(p.input.options)?.map( option => { \n                                        return <option key={option} value={ p.input.options[option] } >{ option }</option>\n                                    }) : null\n                                }\n                    </FormControl>\n                    <InputGroup.Append><InputGroup.Text> {p.getOptionsByObject3D(p.currentObject3D, p.input.option)} </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n            default:\n            break;\n        }\n    }\n\n    return viewInput();\n}\n","import React, {useEffect, useState, createRef} from 'react';\n// import InputCommand from './InputCommand';\nimport InputData from './InputData';\n\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction EditObject2( p ) {\n\n    const [imgPath, setImgPath] = useState('resources/');\n    const refImgPathInput = createRef();\n\n    // Important note. Inside a new EventListener, we can't access to updated props. The props will always have the initial value\n    // That's why I use window.selectedObj instead of p.currentObject3D, to access to the lastest Position.\n\n    // triggered on load, only once.\n    useEffect(() => { \n        if (!window.pl) return;\n        console.log('pl updated in edit', window.pl);\n        const v = window.pl.viewer;\n        v.renderer.domElement.addEventListener('mousedown', (event) => { handlerPickupObject(event) });\n\n        // --- move object \n        v.renderer.domElement.addEventListener('mousemove', function (event) {\n            if (!window.selectedObj) return;\n            let newPos = p.getMouse3Dposition(event, window.pl);\n            if (!newPos) return;\n            const v = new p.globalVars.THREE.Vector3(...newPos).normalize().multiplyScalar(window.selectedObj.distance);\n            newPos = [v.x, v.y, v.z];\n            window.pl.setObjectPos(window.selectedObj, newPos);\n        });\n        v.renderer.domElement.addEventListener('mouseup', (event) => { handlerDropObject(event) });\n        document.addEventListener('keydown', (event) => { handlerScaleRotateObject(event) } );\n        \n    }, [p.plOptions] );\n\n    // --- pickup object \n    const handlerPickupObject = (event) => {\n        if ( !p.isEditMode ) return;\n        if (window.pl.shiftIsPressed) return;\n\n        const v = window.pl.viewer;\n        \n        const intersects = v.raycaster.intersectObject( v.panorama, true );\n        const theObj = intersects[0]? intersects[0].object : null ;\n        if (!theObj.type?.startsWith('pl_')) return;\n\n        theObj.distance = v.camera.position.distanceTo(theObj.position);\n        window.selectedObj = theObj;\n        console.log('Edit Object cLicked', window.selectedObj.name);\n        \n        v.OrbitControls.enabled = false;\n        window.selectedObj.originalPos = window.selectedObj.position;                \n        \n        // State: assign lastSelectedObj and update state currentObject3D\n        p.selectObject(theObj);\n    }\n\n    // --- drop object \n    const handlerDropObject = (event) => {  \n        if ( !p.isEditMode || !window.selectedObj) return;\n        if (!window.selectedObj.type.startsWith('pl_')) return;\n        const v = window.pl.viewer;\n        v.OrbitControls.enabled = true;\n        // p.singleObject3DToParams(window.selectedObj);\n        p.singleObject3DToParams(window.selectedObj);\n        window.selectedObj = null;\n    };\n\n    const handlerScaleRotateObject = function(event) {\n        // we cant use the state currentObject3D, because it will not get the latest value. It will be initialzied to the time of creation og this handler\n        if (!window.lastSelectedObj) return;\n        if (event.ctrlKey) {\n            switch (event.key) {\n                case '+': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y * p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z * p.editParams.SCALE_FACTOR );      break;\n                case '-': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.y / p.editParams.SCALE_FACTOR, window.lastSelectedObj.scale.z / p.editParams.SCALE_FACTOR );      break;\n                case 'r': window.lastSelectedObj.rotation.z += p.editParams.ROTATE_DEG;  break;\n                case 't': window.lastSelectedObj.rotation.z -= p.editParams.ROTATE_DEG;  break;\n                case 'f': window.lastSelectedObj.rotation.y += p.editParams.ROTATE_DEG;  break;\n                case 'g': window.lastSelectedObj.rotation.y -= p.editParams.ROTATE_DEG;  break;\n                case 'v': window.lastSelectedObj.rotation.x += p.editParams.ROTATE_DEG;  break;\n                case 'b': window.lastSelectedObj.rotation.x -= p.editParams.ROTATE_DEG;  break;\n                case '4': z_move(window.lastSelectedObj, 'close'); break;\n                case '5': z_move(window.lastSelectedObj, 'far'); break;\n                default:\n                    break;\n            }\n            if (event.key === 'r' || event.key === 't' || event.key === 'f' || event.key === 'g' || event.key === 'v' || event.key === 'b') {\n                if (window.lastSelectedObj.constructor.name === 'Infospot')\n                    p.setInfo('Sprite object cannot be rotated'); \n            }\n            p.setCurrentObject3D(window.lastSelectedObj);\n            if (window.waitSave) {\n                clearTimeout(window.waitSave);\n                window.waitSave = setTimeout( () => {\n                    p.singleObject3DToParams(window.lastSelectedObj);\n                    clearTimeout(window.waitSave);\n                    p.setInfo('updated');\n                }, 500);\n            }\n            \n        }\n    }\n\n    function z_move(object3D, direction = 'close'){\n        let offset = 1.02;\n        if (direction === 'close') offset = 1/offset;\n                    \n        var newPos = object3D.position.clone();\n        newPos.x *= offset; newPos.y *= offset; newPos.z *= offset;\n        const distance = window.pl.viewer.camera.position.distanceTo(newPos);\n        if ( (direction !== 'close' && distance > 500) || (direction === 'close' && distance < 40)) {\n            console.warn('we cant move that limit. Its out of 40 - 500m');\n            return\n        }\n        window.pl.setObjectPos(object3D, [newPos.x, newPos.y, newPos.z]);\n    }\n\n    \n    const panoList = {}; // for the `link` option\n    if (p.plOptions)\n    p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );\n    const inputs = [\n        [\n            { option: 'image', type: 'image', label:'Img', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'alpha', type: 'image', label:'Alpha', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'text', type: 'input', label:'Text', active: [ 'pl_text-2d', 'pl_text-3d'] },\n            \n            { option: 'background', type: 'input', label:'bg color (#ffffff)', active: [ 'pl_text-2d' ] },\n            { option: 'alwaysLookatCamera', type: 'checkbox', label:'alwaysLookatCamera', checkedValue: () => true, uncheckedValue: () => false, active: [ 'pl_text-2d', 'pl_text-3d', 'pl_poster3d' ], deleteIfValue: true },\n            { option: 'sprite', type: 'checkbox', label:'sprite', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'link', type: 'select', options: panoList, label:'Go to pano', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n            { option: 'opacity', type: 'number', step: 0.05, label:'Opacity', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '1' },\n        ],\n        [\n        { option: 'animatedMap', type: 'number', label:'frames animation map', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'animatedMapSpeed', type: 'number', label:'speed', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'rotationX', type: 'number', label:'Rotate anim X', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationY', type: 'number', label:'Rotate anim Y', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationZ', type: 'number', label:'Rotate anim Z', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'animated', type: 'select', label:'Glow animation', options: { 'always' : 'always', 'only on hover' : 'hover' }, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'popupWhenVisible', type: 'number', step: 100, label:'Pops up when in camera', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        ]\n    ];\n    return (\n      <Container>\n        {p.currentObject3D? \n        <div className=\"position-absolute\" style={{ marginTop: '-30px'}}>\n            <span role=\"img\" aria-label='c'>⬆️</span>\n            { p.getOptionsByObject3D(p.currentObject3D, 'name') } <small>{p.getOptionsByObject3D(p.currentObject3D, 'type')}</small>\n            <form className='float-left' onSubmit={ (e)=> { \n                e.preventDefault();\n                const value = e.currentTarget.querySelector('input').value;\n                p.updateObjectSingleData( p.currentObject3D.name, { name: value} );\n                }}>\n            <FormControl as='input' defaultValue={ p.getOptionsByObject3D(p.currentObject3D, 'name') } />\n            </form>\n        </div> : null }\n            \n        <InputGroup>\n            <InputGroup.Prepend> <InputGroup.Text>imgs path</InputGroup.Text></InputGroup.Prepend>\n            <FormControl as='input' defaultValue={imgPath} ref={refImgPathInput} \n                        onChange={ (e) => refImgPathInput.current? setImgPath(refImgPathInput.current.value) : null } />\n            <InputGroup.Append><InputGroup.Text> {imgPath} </InputGroup.Text> </InputGroup.Append>\n        </InputGroup>\n        <Row>\n            {\n                inputs.map( (inputsCol, col_i) => {\n                    return <Col sm='6' key={'column-'+col_i}>\n                        { \n                            inputsCol.map( (input, i) => {\n                                if ( !p.currentObject3D ) return null;\n                                if ( !input.active.includes(p.currentObject3D.type) ) return null;\n                                return <InputData   input={input} imgPath={imgPath} key={'input-'+i}\n                                                    updateObjectSingleData={p.updateObjectSingleData} \n                                                    currentObject3D={p.currentObject3D}\n                                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                            } )\n                        }\n                    </Col>\n                })\n            }\n        </Row>\n        \n\n      </Container>        \n  );\n}\n\nexport default EditObject2;\n","import React, {useEffect, createRef} from 'react'\n\nfunction AppDemoPosterlens( { data, setAppMode } ) {\n    \n    var refContainer = createRef();\n\n    useEffect(() => {\n        console.log('hello from useEffect in App');\n        // create the interactive 3d viewer with posterlens\n        createViewer(data);\n      }, []);\n\n    // CALL to posTERLENS\n    function createViewer(data) {\n        \n        var posterlensConfig = {}\n        if (!data) console.log('data variable not found.')\n        else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n            \n        // load from cache by default\n        var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n\n        data = (retrievedOptions?.worlds) ? retrievedOptions : data;\n        if (!data) {\n        console.error('No data loaded. Cant initialize');\n        return;\n        }\n\n        // CALL POSTERLENS\n        window.pl = document.querySelector('#posterlens-container').posterlens( data );\n        window.pl.viewer.panorama.addEventListener('load', () => {\n            console.log(`🎉🎉🎉🎉🎉🎉🎉🎉`, this);\n        });\n    }\n\n\n\n    return (\n        <div class='container'>\n            <h1>Demo  \n                { window.location.hash === '#edit'? \n                    <button className='btn btn-sm btn-primary' onClick={ ()=> setAppMode('edit') }>Back</button>\n                    : null }\n            </h1> \n            <div className='posterlens-container' id='posterlens-container' ref={refContainer}></div>\n        </div>\n    )\n}\n\nexport default AppDemoPosterlens\n","import React, {useState, useLayoutEffect} from 'react'\nimport AppDemoPosterlens from './AppDemoPosterlens';\nimport AppEditPosterlens from './AppEditPosterlens';\n\nimport './App.css';\n\nexport default function App( data ) {\n\n  const [appMode, setAppMode] = useState(window.location.hash === '#edit'? 'edit' : 'demo');\n\n  \n  return appMode === 'edit' ?  <AppEditPosterlens data={data} setAppMode={setAppMode} /> : \n                               <AppDemoPosterlens data={data} setAppMode={setAppMode} />;\n  \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// This is the call of the React APP.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App data={window.data}/>\n  </React.StrictMode>,\n  document.getElementById('edit-posterlens-react-container')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export function round2(fl) { \n    var numb = fl;\n    if (typeof numb === 'number')\n     numb = numb.toFixed(2);\n    return numb;\n    //return 0.001;\n }\n"],"sourceRoot":""}