{"version":3,"sources":["components/App.js","components/AppDemoPosterlens.js","components/Inputs/InputImage.js","helpers.js","components/SyncDataAlongApp.js","components/Inputs/InputData.js","components/Inputs/InputOnClickOption.js","components/Inputs/InputObject3D.js","components/Inputs/InputsRotation.js","components/Layout/CanvasUI3D.js","components/Layout/EditObjectControls_Bottom.js","components/Layout/PanelObjectData_Right.js","components/Layout/PanelListObjects_Left.js","components/Layout/PanelPanoramaInfo_Right.js","components/Layout/TopBarButtonsAndPanels.js","components/Widgets.js","components/AppEditPosterlens.js","index.js"],"names":["App","useEffect","console","log","window","PANOLENS","THREE","eval","stopAllAnimations","isAppAsWidget","appAsWidget","isEditModeDefault","location","hash","useState","setAppAsWidget","appMode","setAppMode","data","AppDemoPosterlens","retrievedOptions","JSON","parse","localStorage","getItem","worlds","error","pl","document","querySelector","posterlens","viewer","panorama","addEventListener","panolensPanoInstance","scene","getScene","createViewer","className","onDoubleClick","onClick","id","InputImage","p","infoAttr","setInfoAttr","pickupImageMode","setPickupImageMode","handlePickupImg","e","target","src","value","wrapperUpdateObjectSingleData","removeEventListener","handleCancelPickupImage","setTimeout","event","keyCode","InputGroup","input","option","Prepend","Text","label","Append","selected_img","tagName","getAttribute","Button","variant","getOptionsByObject3D","currentObject3D","round2","fl","numb","toFixed","reactGetMouse3Dposition","v","intersects","raycaster","intersectObject","length","i","object","name","point","clone","world","getWorldPosition","Vector3","sub","currentMP","Math","round","x","y","z","setEditParams","Object","assign","editParams","currentMouse3DPosition","warn","SyncPlOptions__LocalStorage","plOptions","setPlOptions","exportStr","stringify","setItem","onSavePlOptionsCallback","SyncObject3d__DataHotspot","object3D","objectCurrentParams","objectNewParams","pos","position","rot","rotation","scale","plOptionsReplaceWorldParamsHotspot","alert","SyncInputFieldset__DataHotspot","fields","regenerate","currentWorldOptions","getCurrentPanoramaParams","objectHotspotIndex","hotspots","findIndex","ht","objectData","find","keys","forEach","k","newPlOptions","getObjectByName","remove","createNewObjectFromParams","newObject","selectObject","hasOwnProperty","setCurrentObject3D","InputData","infoMsg","setInfoMsg","syncParams","theValue","deleteIfValue","fieldPair","includes","type","class","sync-3d","sync-default","currentValue","extensions","dims","minWidth","maxWidth","minHeight","maxHeight","onChange","base64","imgPath","onError","errMsg","onSubmit","preventDefault","currentTarget","FormControl","as","defaultValue","placeholder","closest","Form","Check","step","min","max","Group","defaultChecked","checkedValue","checked","uncheckedValue","key","options","map","viewInput","InputOnClickOption","selectRef","useRef","panoList","cardList","cardListCallback","setOnClickOption","updatedFields","onClickAction","modal","link","handleSelectOption","ref","onClickOption","active","InputObject3D","props","getCurrentValueFromObject3D","prop","split","val","theProp","field","Control","dataValue","parseInt","updatePropObject3D","onMouseUp","lastSelectedObj","InputsRotation","default","PI","z_move","direction","offset","newPos","distance","camera","distanceTo","setObjectPos","CanvasUI3D","renderer","domElement","handlerPickupObject","selectedObj","normalize","multiplyScalar","handlerDropObject","isEditMode","shiftIsPressed","theObj","startsWith","OrbitControls","enabled","originalPos","Row","onMouseMove","POSTERLENS_CONTAINER_ID","EditObjectControls_Bottom","plImgPath","setImgPath","refImgPathInput","createRef","handlerScaleRotateObject","ctrlKey","SCALE_FACTOR","shiftKey","ROTATE_DEG","set","rotateZ","rotateY","rotateX","waitSave","clearTimeout","inputs","Container","current","inputsCol","col_i","Col","sm","PanelObjectData_Right","isExpertMode","isOpen","setIsOpen","currentObjectOptions","alwaysLookatCamera","Fragment","objectOptions","lines","jsx","line","push","currentObjectOptionsJSX","PanelListObjects_Left","init","setInit","element","getCameraDirection","join","fov","objectsToPopupWhenVisible","PanelPanoramaInfo_Right","worldParams","currentPanoOptions","currentPanoOptionsJSX","TopBarButtonsAndPanels","restartViewer","countRestarts","exportToTextarea","removeCurrentObject","cloneCurrentObject","currentPanoParams","initialLookAt","initialFov","plOptionsReplaceWorldParams","Widgets","el","classList","add","isWidgetsInit","setIsWidgetsInit","basePath","Array","from","appendControlItem","style","backgroundImage","float","onTap","initNewObject","newObj","group","justCreatedBtn","countResets","params","floor","random","values","getWorldDirection","image","defaultPosterImg","posterSphere","text","fontFamily","callbackFn","mesh","AppEditPosterlens","setIsEditMode","AUTO_START_EDIT_MODE","expertMode","setCountRestarts","posterlensConfig","o","lso","selObj","innerHTML","dispatchEvent","Event","w","getCurrentPanoramaParamsIndex","newOptions","currentWorldParams","getHotspotIndex","newHotspots","querySelectorAll","formEl","inputDefault","SyncObject3d__Inputs","editMode","currentWorldOptionsIndex","newPlOptionsHotspots","hotspotIndex","splice","newO","getChildByName","textA","createElement","textContent","width","height","Modal","newName","parseFloat","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0539d710.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport AppDemoPosterlens from './AppDemoPosterlens';\nimport AppEditPosterlens from './AppEditPosterlens';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default function App() {\n  \n  /* Retrieving possible variables from outside the App */\n  /* ------------------------ --------------------------- */\n  useEffect( () => {\n    console.log(`THREE and PANOLENS: ${window.PANOLENS}`,window.THREE);\n    window.THREE = eval('THREE');\n    window.PANOLENS = eval('PANOLENS');\n    window.stopAllAnimations = window.stopAllAnimations;\n  }, []);\n\n  const isAppAsWidget       = window.appAsWidget? true : false; // when we use it in Wordpress, in a page, then it's a widget app\n  const isEditModeDefault = window.location.hash === '#edit' || isAppAsWidget;\n  const [appAsWidget, setAppAsWidget] = useState(isAppAsWidget);\n  const [appMode, setAppMode] = useState(isEditModeDefault? 'edit' : 'demo');\n  \n  var data = window.data; // defined outside react, in the html calling this app\n  /* ------------------------ --------------------------- */\n\n  return appMode === 'edit' ?  <AppEditPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} /> : \n                               <AppDemoPosterlens data={data} setAppMode={setAppMode} appAsWidget={appAsWidget} />;\n  \n}","import React, {useEffect, createRef} from 'react'\n\nfunction AppDemoPosterlens( { data, setAppMode, appAsWidget } ) {\n    \n    useEffect(() => {\n        console.log('hello from useEffect in App');\n        // create the interactive 3d viewer with posterlens\n        createViewer(data);\n      }, []);\n\n    // CALL to posTERLENS\n    function createViewer(data) {\n        var posterlensConfig = {}\n        if (!data) console.log('data variable not found.')\n        else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n            \n        // load from cache by default\n        var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n\n        data = (retrievedOptions?.worlds) ? retrievedOptions : data;\n        if (!data) {\n        console.error('No data loaded. Cant initialize');\n        return;\n        }\n\n        // CALL POSTERLENS\n        window.pl = document.querySelector('#posterlens-container').posterlens( data );\n        window.pl.viewer.panorama.addEventListener('load', (panolensPanoInstance) => {\n            console.log(`🎉🎉🎉🎉🎉🎉🎉🎉`, panolensPanoInstance);\n        });\n        window.scene = window.pl.viewer.getScene();\n    }\n\n\n\n    return (\n        <div className='container'>\n            <h1 onDoubleClick={()=> setAppMode('edit')} >Demo  \n                { appAsWidget? \n                    <button className='btn btn-sm btn-primary' onClick={ ()=> setAppMode('edit') }>Back</button>\n                    : null }\n            </h1> \n            <div className='posterlens-container' id='posterlens-container'></div>\n        </div>\n    )\n}\n\nexport default AppDemoPosterlens\n","import React, {useState, useEffect} from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\n/**\n * Input \"Select image\" that sets the option p.input.option to that image.\n * Allows \n * */\nfunction InputImage( p ) {\n\n    // p : the props obj. \n    // @p.input (option, label)\n\n    // Local State\n    const [infoAttr, setInfoAttr] = useState(''); // a little message saying \"updating\", \"saved\" to the user\n    \n    // tool to fillup an image input by selecting an image in the screen.\n    const [pickupImageMode, setPickupImageMode] = useState(false);\n\n    // watch the activation of the mode \"pickup image in screen\"\n    useEffect(() => {\n        if (! pickupImageMode) return;\n        setInfoAttr('Pick up an image in the screen');\n        const handlePickupImg = (e) => {\n            if (e.target?.src) {\n                const value = e.target.src; // I tried using refs but here it doesnt read them\n                p.wrapperUpdateObjectSingleData(value);\n\n                // remove events to normal\n                setPickupImageMode(false);\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n                setInfoAttr(\"Image selected\"); setTimeout( () => setInfoAttr(''), 3000 );\n            }\n        };\n        const handleCancelPickupImage = function(event) {\n            if(event.keyCode === 27){ // clicking ESC\n                setPickupImageMode(false);\n                setInfoAttr(\"Cancelled\"); setTimeout( () => setInfoAttr(''), 3000 );\n                document.removeEventListener('click', handlePickupImg, 'pickupImg' );\n                document.removeEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );        \n           }\n        };\n        document.addEventListener('click', handlePickupImg, 'pickupImg' );\n        document.addEventListener(\"keydown\", handleCancelPickupImage, 'cancelPickup' );\n        \n    }, [pickupImageMode]);\n    \n\n    function handlePickImage(event) {\n        // optionally we can interact from outside react with tthe selection. If we have set an element with class 'pl_selected_image', we'll grab that img.\n        if (document.querySelector('.pl_selected_image')) {\n            const selected_img = document.querySelector('.pl_selected_image');\n            if (selected_img.tagName === 'IMG') \n                p.wrapperUpdateObjectSingleData( selected_img.getAttribute('src') );\n            else if ( selected_img.getAttribute('data-url') ) // we accept that the element with pl_sel.. class has an attribute with the url.\n                p.wrapperUpdateObjectSingleData( selected_img.getAttribute('data-url') );\n            \n            return;\n        }\n        // or standard behaviour. Any img in the window can be clicked and we use its src field as value.\n        setPickupImageMode(p.input.option) \n    }\n\n  return (\n    \n        <InputGroup className={ 'input-group-' + p.input.option }>\n\n            <InputGroup.Prepend>\n                <InputGroup.Text>\n                    { p.input.label }\n                </InputGroup.Text>\n            </InputGroup.Prepend>\n            <InputGroup.Append onClick={ handlePickImage  }>\n                <InputGroup.Text>\n                    { pickupImageMode? 'select an image' : <Button variant=\"primary\">Pick image</Button> }\n                </InputGroup.Text>\n            </InputGroup.Append>\n\n                <InputGroup.Append>\n                    <InputGroup.Text>\n                        {p.getOptionsByObject3D(p.currentObject3D, p.input.option)}\n                    </InputGroup.Text>\n                </InputGroup.Append>\n                <span className=\"text-light bg-dark\">{ infoAttr }</span>\n        </InputGroup>\n\n  );\n}\n\nexport default InputImage;\n","export function round2(fl) { \n    var numb = fl;\n    if (typeof numb === 'number')\n     numb = numb.toFixed(2);\n    return numb;\n    //return 0.001;\n }\n\n// x,y,z of mouse inside the 3d world. posterlens has this functions, but it doesnt work if I call it in onmousemove.\nexport function reactGetMouse3Dposition(event, p ) {\n    /* { setEditParams, editParams } */\n    if (!window.pl) return\n    const v = window.pl.viewer;\n    if (!v) { console.warn('Cant retrieve mouse pos, not viewer defined'); return; }\n\n    const intersects = v.raycaster.intersectObject( v.panorama, true );\n    if ( intersects.length <= 0 ) return;\n    let i = 0;\n    while ( i < intersects.length ) {\n        if (intersects[i].object.name === 'invisibleWorld') {\n            const point = intersects[i].point.clone();\n            const world = v.panorama.getWorldPosition( new window.THREE.Vector3() );\n            point.sub( world );\n            const currentMP = [ Math.round(point.x.toFixed(2)/2), Math.round(point.y.toFixed(2)/2), Math.round(point.z.toFixed(2)/2) ];\n            p.setEditParams( Object.assign( {}, p.editParams, { currentMouse3DPosition: currentMP } ) );\n            return currentMP;        \n            \n        }\n        i++;\n    }\n  }\n  ","import React from 'react'\nimport { round2 } from '../helpers'\n\n\n\n/**\n * No render, only functions\n */\n\n\n\n  // updates plOptions (the js object with all the config to load posterlens).\n  // updates the react state and the localstorage (it can be used outside of react). It also uses a callback that can be used outside react.\n  export function SyncPlOptions__LocalStorage(plOptions, setPlOptions) {\n    setPlOptions(plOptions);\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    localStorage.setItem('pl.o', exportStr);\n    if (window.onSavePlOptionsCallback) window.onSavePlOptionsCallback(plOptions); // this fn is passed from outside react, and it can be useful\n    return exportStr;\n  }\n\n\n /* \n  * WHAT: SYNCs  Object 3D ====> Inputs  !SHABBY WAY!\n  * WHEN: every time we select a new object, either picking it up on the Canvas UI or in the List f hotspots Left Panel\n  * called in AppEditPosterlens.js\n  */\nexport function SyncObject3d__Inputs( p ) {\n\n    // grab the options for the current selected object.\n    const options = p.getOptionsByObject3D(p.currentObject3D);\n    \n    const formsSync = document.querySelectorAll('[sync-3d]');\n    \n    // for every input, we grab its data from plOptions and update the input value.\n    formsSync.forEach( formEl => {\n      const option = formEl.getAttribute('sync-3d');\n      let value = (typeof options[option] !== 'undefined' )? options[option] : '';\n      // special case. The option is an object (rot.0)\n      if (option.includes('.')) {\n        const fields = option.split('.');\n        value = options[fields[0]]? options[fields[0]][fields[1]] : '' ;\n      }\n      let inputDefault = formEl.getAttribute('sync-default'); // string \"true\" or \"false\"\n      inputDefault = typeof inputDefault === 'undefined' || inputDefault === 'false' ? '' : inputDefault;\n      if (value === '' && inputDefault) value = inputDefault;\n       \n      if (formEl.querySelector('input'))\n        formEl.querySelector('input').value = value;\n      if (formEl.querySelector('select'))\n        formEl.querySelector('select').value = value;\n      if (formEl.querySelector('input[type=\"checkbox\"]'))\n        formEl.querySelector('input[type=\"checkbox\"]').checked = value? true : false ;\n\n      if (option === 'onClickAction') { // special case. InputOnClickOption: This field handles a state that needs to be updated\n        p.setOnClickOption(value);\n      }\n    });\n}\n\n\n  // Object 3d in viewer (rot or scale) ===> Options in pl.\n  // =======================> Options pl\n  // WHERE: when finishing dragging an object in UI, change its properties with keyboard shortcut, or change properies from InputsRotation\n  export function SyncObject3d__DataHotspot( p ) {\n    const object3D = p.object3D;\n    const objectCurrentParams = p.getOptionsByObject3D(object3D); // worldParams.hotspots[objectHotspotIndex];\n    const objectNewParams     = { ...objectCurrentParams };\n\n    if (!objectCurrentParams) { alert('error: no objectCP'); return; }\n    // pos, scale and rot\n    objectNewParams.pos = [ round2(object3D.position.x), round2(object3D.position.y), round2(object3D.position.z) ];\n    objectNewParams.rot = [ round2(object3D.rotation.x), round2(object3D.rotation.y), round2(object3D.rotation.z) ];\n    // if (object3D.name === 'TEST') debugger\n    objectNewParams.scale = round2(object3D.scale.x);  \n\n    const newOptions = p.plOptionsReplaceWorldParamsHotspot(object3D.name, objectNewParams);\n    SyncPlOptions__LocalStorage(newOptions, p.setPlOptions);\n    \n    return objectNewParams;\n\n  }\n\n\n  // args (inputs) ===> Options data\n    // given name of object and updated fields in the way { link : \"Hall\" }, we update the p.currentObjectData and the worldOptions\n    // in some cases, sync the 3d model with the new data (in the case of the `name`).\n  export function SyncInputFieldset__DataHotspot( name, fields = {}, regenerate = true, p ) {\n    /*  p.getCurrentPanoramaParams,\n        p.plOptionsReplaceWorldParamsHotspot,\n        p.setPlOptions,\n        p.selectObject,\n        p.setCurrentObject3D \n    */\n\n\n    const currentWorldOptions = p.getCurrentPanoramaParams();\n    let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === name );\n    if (objectHotspotIndex < 0 ) return;\n    // update the field\n    let objectData = currentWorldOptions.hotspots.find( ht => ht.name === name ); // all fields => { name: '', type: '' ... }\n    objectData = Object.assign({}, objectData, fields );\n    Object.keys(objectData).forEach( k =>  (objectData[k] === null)? delete(objectData[k]) : false ); // cleanup\n    const newPlOptions = p.plOptionsReplaceWorldParamsHotspot(name, objectData);\n    SyncPlOptions__LocalStorage(newPlOptions, p.setPlOptions);\n    \n    // regenerate the 3d object (remove and generate)\n    const object = window.pl.getObjectByName(name);\n    if (regenerate) {\n      if (name && window.pl.viewer.panorama && objectData ) {\n        window.pl.viewer.panorama.remove( object );\n        window.pl.createNewObjectFromParams(window.pl.viewer.panorama, objectData); // recreate the 3d in the viewer\n        const newObject = window.pl.getObjectByName(name);\n        setTimeout(()=> p.selectObject(newObject), 500);\n        \n      }\n      else {        \n        p.selectObject(object);\n      }\n    } // end regenrate\n\n    // special field: name. TODO: check name is not repeated.\n    if ( object && fields.hasOwnProperty('name') ) {\n      object.name = fields.name;\n      p.setCurrentObject3D(object);\n    }\n\n  }","import React, { useState } from 'react'\n\nimport Button from 'react-bootstrap/Button';\n\nimport InputImage from './InputImage';\nimport { SyncInputFieldset__DataHotspot } from '../SyncDataAlongApp' // sync input changes into plOptions\nimport { FilePicker } from 'react-file-picker'\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\n\nexport default function InputData(p) {\n\n    const [infoMsg, setInfoMsg] = useState('');\n\n    const syncParams = {  getCurrentPanoramaParams: p.getCurrentPanoramaParams,\n                    plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot,\n                    setPlOptions: p.setPlOptions,\n                    selectObject: p.selectObject,\n                    setCurrentObject3D: p.setCurrentObject3D }\n\n    // udpated fied p.input.option with the value. Some fields have special treatment\n    const wrapperUpdateObjectSingleData = function (value) {\n        let theValue = value === p.input.deleteIfValue ? null : value; // with this we will remove the option from the params.\n        const fieldPair = { [p.input.option] : theValue };\n        // special fields that need special treatment\n        if ( p.input.option === 'background' && theValue === '' ) fieldPair[p.input.option] = 'transparent'; // no bg color => background: 'transparent'\n        if ( p.input.option === 'sprite' && theValue === true ) fieldPair.scale = p.currentObject3D.scale.x * 10; // if we convert into sprite we better scale or it will look tiny\n        if ( p.input.option === 'sprite' && !theValue ) fieldPair.scale = p.currentObject3D.scale.x / 10; // the other way as well.\n        let regenerate = ['name'].includes(p.input.option)? false : true; // regenerate bu default , except in some, like 'name'\n        SyncInputFieldset__DataHotspot( p.currentObject3D.name, fieldPair, regenerate, syncParams);\n        setInfoMsg('Applied!');  setTimeout(()=>setInfoMsg(''), 1000);\n\n    }\n\n    const viewInput = function() {\n        \n        const currentValue = p.getOptionsByObject3D(p.currentObject3D, p.input.option);\n        // if (p.input.option === 'emissive') debugger\n        switch (p.input.type) {\n            case \"image-pick\":\n                return <InputImage input={p.input} currentObject3D={p.currentObject3D} getOptionsByObject3D={p.getOptionsByObject3D}\n                                    wrapperUpdateObjectSingleData={wrapperUpdateObjectSingleData} />\n            case \"image\": // not in use I think\n                return <InputGroup >\n                    <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FilePicker \n                extensions={['jpg', 'jpeg', 'png', 'gif', 'svg']}\n                dims={{minWidth: 100, maxWidth: 2500, minHeight: 100, maxHeight: 2500}}\n                onChange={base64 => SyncInputFieldset__DataHotspot( p.currentObject3D.name, { [p.input.option]: p.imgPath+base64.name}, true, syncParams ) }\n                onError={ errMsg => alert(errMsg) }\n            >\n                <Button variant='primary'>\n                Select image\n                </Button >\n                </FilePicker>\n                <Button variant='danger' onClick={ (e) => { wrapperUpdateObjectSingleData(null) } }>\n                    Clear\n                </Button >\n                <InputGroup.Append> <InputGroup.Text>{currentValue}</InputGroup.Text></InputGroup.Append>\n                </InputGroup>\n            case \"input\":\n                return <form \n                            onSubmit={ (e) => { e.preventDefault(); \n                                    wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                        >\n                    <InputGroup>\n                    {p.input.label ? <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend> : null }\n                        <FormControl as='input' defaultValue={currentValue} onChange={ e => setInfoMsg('Enter to save') }  placeholder={ p.input.placeholder?? ' '} />\n                        <InputGroup.Append onClick={ (e) => infoMsg ? wrapperUpdateObjectSingleData(e.currentTarget.closest('form').querySelector('input').value) : false } >\n                            <InputGroup.Text> { infoMsg || currentValue  } </InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </form>\n            case \"number\":\n                return  <form onSubmit={ (e) => { e.preventDefault(); wrapperUpdateObjectSingleData(e.currentTarget.querySelector('input').value) } }\n                             >\n                            <InputGroup>\n                                {p.input.label ? <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend> : null }\n                                <Form.Check type=\"number\" step={ p.input.step?? 1 } placeholder={ p.input.placeholder?? ' '}\n                                    defaultValue={currentValue} min={p.input.min?? 0 } max={p.input.max?? null } \n                                    onChange={ e => setInfoMsg('Enter to save') } />\n                                <InputGroup.Append onClick={ (e) => infoMsg ? wrapperUpdateObjectSingleData(e.currentTarget.closest('form').querySelector('input').value) : false } >\n                                    <InputGroup.Text> { infoMsg || currentValue  } </InputGroup.Text> \n                                </InputGroup.Append>\n                            </InputGroup>\n                        </form>\n            case \"checkbox\":\n                return <Form.Group>\n                <Form.Check type=\"checkbox\" label={p.input.label + `(${currentValue})`}\n                            defaultChecked={currentValue === p.input.checkedValue() || p.input.deleteIfValue === p.input.checkedValue() }\n                                onChange={ (e) => {\n                                    const value = e.currentTarget.checked? p.input.checkedValue(p.currentObject3D) : p.input.uncheckedValue(p.currentObject3D) ;\n                                    wrapperUpdateObjectSingleData(value);                                            \n                                } } />\n                </Form.Group>\n            case \"select\":\n                return <InputGroup>\n                     <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                    <FormControl as='select' defaultValue={currentValue}\n                                        onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) } >\n                                <option key='nothing' value='' >---</option>\n                                {   \n                                    (typeof p.input.options === 'object') ? Object.keys(p.input.options)?.map( option => { \n                                        return <option key={option} value={ p.input.options[option] } >{ option }</option>\n                                    }) : null\n                                }\n                    </FormControl>\n                    <InputGroup.Append><InputGroup.Text> { currentValue } </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n                break;\n            case \"color\":\n                return <InputGroup sync-3d={p.input.option}>\n                        <InputGroup.Prepend> <InputGroup.Text>{p.input.label}</InputGroup.Text></InputGroup.Prepend>\n                        <input type=\"color\" defaultValue={ currentValue || p.input.deleteIfValue }\n                                onChange={ (e) => wrapperUpdateObjectSingleData(e.target.value) }></input>\n                        <InputGroup.Append><InputGroup.Text> {currentValue} </InputGroup.Text> </InputGroup.Append>\n                </InputGroup>\n            default:\n            break;\n        }\n    }\n\n    return <div className={ p.input.type + '-type ' + (infoMsg? 'editing ' : 'no-editing ') + (p.class?? '') }\n                id={ 'input-' + p.input.option} \n                sync-3d={ ['image'].includes(p.input.type)? '' : p.input.option} sync-default={p.input.deleteIfValue? \"true\" : \"false\"}> { \n                viewInput()\n            }</div>\n}\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport InputData from './InputData';\nimport { SyncInputFieldset__DataHotspot } from '../SyncDataAlongApp' // sync input changes into plOptions\n\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction InputOnClickOption( p ) {\n\n    // using p.onClickOption and p.setOnClickOption. Those states are defined in parent.\n    const selectRef = useRef(null);\n    \n    const syncParams = {  getCurrentPanoramaParams: p.getCurrentPanoramaParams,\n        plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot,\n        setPlOptions: p.setPlOptions,\n        selectObject: p.selectObject,\n        setCurrentObject3D: p.setCurrentObject3D }\n\n    const handleSelectOption = (value) => {\n        if (!p.currentObject3D) return\n        p.setOnClickOption(value);\n        \n        const updatedFields = { onClickAction : value }\n        if ( ['pano', 'url', '' ].includes(value) ) \n            updatedFields.modal = null;\n        if ( ['iframe', 'card', '' ].includes(value) ) \n            updatedFields.link = null;\n        \n        SyncInputFieldset__DataHotspot( p.currentObject3D.name, updatedFields, true, syncParams );\n    }\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n        p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );    \n    \n    let cardList = {};\n    if (window?.cardListCallback) {\n        //        console.log('loading cardList callback', window.cardListCallback());\n        cardList = window.cardListCallback();\n    }\n    \n\n    if (!p.currentObject3D) return null;\n\n    return (\n        <div>\n            <InputGroup sync-3d='onClickAction'>\n                <InputGroup.Prepend> <InputGroup.Text>On click action</InputGroup.Text></InputGroup.Prepend>\n                <FormControl as='select' defaultValue={ p.getOptionsByObject3D(p.currentObject3D, 'onClickAction') }\n                                onChange={ (e) => handleSelectOption(e.target.value) } ref={selectRef} >\n                        <option key='nothing' value='' >---</option>\n                        <option value='pano'> Link to panorama</option>\n                        <option value='url'> Link to URL</option>\n                        <option value='iframe'> iframe popup</option>\n                        <option value='card'> Card</option>\n                </FormControl>\n            </InputGroup>\n            \n            \n            { p.onClickOption? \n                <div>\n                    <div>{ p.onClickOption }</div>\n                    { /** LINK TO PANORAMA */\n                    \n                    p.onClickOption === 'pano' ? \n                        <InputData  input={ { option: 'link', type: 'select', options: panoList, label:'PANORAMA', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                                    : null}\n\n                    { /** LINK TO URL */ \n                    p.onClickOption === 'url' ? <div>\n                            <InputData  input={ { option: 'link', type: 'input',  label:'url', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D} />\n                        </div> : null \n                    }\n\n                    { /** LINK TO IFRAME */ \n                    p.onClickOption === 'iframe' ? <div>\n                    <InputData  input={ { option: 'modal', type: 'input', label:'iframe url', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} />\n                        </div> : null \n                    }\n\n                    { /** CARD TO OPEN */ \n                    p.onClickOption === 'card' ? <div>\n                    <InputData  input={ { option: 'modal', type: 'select', options: cardList, label:'Modal Card', deleteIfValue: '', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} />\n                        </div> : null \n                    }\n                     \n                </div>        \n            : null }\n        </div>\n    )\n}\n\nexport default InputOnClickOption;\n","import React, { useState, useEffect, useRef } from 'react'\n/**\n * Represent an <input> in sync with props of the current3DObject inside the Canvas, which will also update the data in plOptions.  \n * The difference with InputData is that InputData is in sync only with the datamodel (the plOptions) of the current selected object.\n */\n\nimport { SyncObject3d__DataHotspot } from '../SyncDataAlongApp'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction InputObject3D( { input, props: p } ) {\n    if (!p.currentObject3D) return null;\n\n    /*  prop: 'rotation.x' , returns 0.54 (the value of currentObject3D.rotation.x) */\n    function getCurrentValueFromObject3D(prop) {\n        if (!p.currentObject3D) return null;\n        const props = prop.split('.');\n        let val = p.currentObject3D;\n        props.forEach( theProp => val = val[theProp] );\n        return val;\n    }\n\n    /*  WHAT: updates property in Threejs UI. If 'prop' contains a `.` then updates the subproperty \n        prop: `rotation.x` */\n    function updatePropObject3D(prop, val) {\n        const dataValue = parseInt(val * 100)/100;\n        if (!p.currentObject3D) return null;\n        const props = prop.split('.');\n        const newObject = p.currentObject3D; \n        // shabby way, but it accepts two levels of depth in the props\n        if (props.length === 1) \n            newObject[props[0]] = dataValue;\n        else \n            newObject[props[0]][props[1]] = dataValue; // updates currentobject3d.rotation.x = dataValue\n        // do we need to use setCurrentObject3D? Aparently not.\n    }\n\n    /*  helper.          Returns the field value, for the selected hotspot in the pl data options. */\n    // TODO: we can use getOptionsByObject3D, which is the same functinoality\n    const getObjectData = function(objectName, dataField, defaultVal) {\n        const currentWorldOptions = p.getCurrentPanoramaParams();\n        let objectHotspotData = currentWorldOptions.hotspots.find( ht => ht.name === objectName );\n        if (!objectHotspotData) return;\n        let data = objectHotspotData[dataField];\n        if (!data) return defaultVal;\n        return data ;\n    }  \n\n    // preparing placeholders. initial value of the input:\n    const currentValue = (p.currentObject3D)? getCurrentValueFromObject3D(input.prop) : null;\n    \n    return (\n        <InputGroup sync-3d={input.field} className={'input-group ' + p.class?? '' } >\n            <InputGroup.Prepend> <InputGroup.Text>{input.label}</InputGroup.Text></InputGroup.Prepend>\n            <Form.Control type=\"range\" id={input.prop} name={input.prop} className='range-control'\n                min={input.min} max={input.max} defaultValue={currentValue} step={input.step}\n                onChange={ (e) => {\n                    // update the object 3d to see the change\n                    updatePropObject3D(input.prop, e.target.value);\n                } }\n                onMouseUp ={ (e) => {\n                    // update the data only when finishing editing\n                    SyncObject3d__DataHotspot( { \n                        object3D: window.lastSelectedObj,\n                        getOptionsByObject3D: p.getOptionsByObject3D, \n                        setPlOptions: p.setPlOptions,\n                        plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot} );\n                    // updateDataObject(input.prop, e.target.value);\n                } }\n            /> \n            <InputGroup.Append> <InputGroup.Text>{ getCurrentValueFromObject3D(input.prop) }</InputGroup.Text></InputGroup.Append>\n        </InputGroup>\n    )\n}\n\nexport default InputObject3D\n","import React, { useState, useEffect, useRef } from 'react'\n\nimport InputObject3D from './InputObject3D';\n\nfunction InputsRotation( p ) {\n\n    /** reuse of code by holding the props to export into one var. */\n    const props = {\n        getCurrentPanoramaParams: p.getCurrentPanoramaParams,\n        currentObject3D: p.currentObject3D,\n        getOptionsByObject3D: p.getOptionsByObject3D, \n        setPlOptions: p.setPlOptions,\n        plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot,\n        class: 'col-4 flex-nowrap'\n    }\n    return (\n        <div className={ p.class?? 'ww' }>\n            <InputObject3D input={ {\n                                label: 'RotX',\n                                prop: 'rotation.x',\n                                field: 'rot.0',\n                                default: [],\n                                min: - Math.PI,\n                                max: Math.PI,\n                                step: 0.01\n                            } } \n                            props={props}\n                             />\n            \n            <InputObject3D input={ {\n                                label: 'RotY',\n                                prop: 'rotation.y',\n                                field: 'rot.1',\n                                default: [],\n                                min: - Math.PI,\n                                max: Math.PI,\n                                step: 0.01\n                            } }\n                            props={props}\n                            />\n\n                <InputObject3D input={ {\n                                label: 'RotZ',\n                                prop: 'rotation.z',\n                                field: 'rot.2',\n                                default: [],\n                                min: - Math.PI,\n                                max: Math.PI,\n                                step: 0.01\n                            } }\n                            props={props}\n                            />\n        </div>\n    )\n}\nexport default InputsRotation\n","import React, { useEffect } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport {reactGetMouse3Dposition} from '../../helpers';\nimport { SyncObject3d__DataHotspot } from '../SyncDataAlongApp'\n\n\n// move an object closer or farther from the camera.\nexport function z_move(object3D, direction = 'close'){\n  let offset = 1.02;\n  if (direction === 'close') offset = 1/offset;\n              \n  var newPos = object3D.position.clone();\n  newPos.x *= offset; newPos.y *= offset; newPos.z *= offset;\n  const distance = window.pl.viewer.camera.position.distanceTo(newPos);\n  if ( (direction !== 'close' && distance > 500) || (direction === 'close' && distance < 40)) {\n      console.warn('we cant move that limit. Its out of 40 - 500m');\n      return\n  }\n  window.pl.setObjectPos(object3D, [newPos.x, newPos.y, newPos.z]);\n}\n\n\n/**\n * The div placeholder where posterlens.js loads the threejs panolens panorama\n */\nfunction CanvasUI3D( p ) {\n\n  // triggered on load, only once.\n  useEffect(() => { \n    if (!window.pl) return;\n    // console.log('pl updated in edit', window.pl);\n    const v = window.pl.viewer;\n    v.renderer.domElement.addEventListener('mousedown', (event) => { handlerPickupObject(event) });\n\n    // --- move object \n    v.renderer.domElement.addEventListener('mousemove', function (event) {\n        if (!window.selectedObj) return;\n        let newPos = reactGetMouse3Dposition(event, { setEditParams: p.setEditParams, editParams: p.editParams })\n        if (!newPos) return;\n        const v = new window.THREE.Vector3(...newPos).normalize().multiplyScalar(window.selectedObj.distance);\n        newPos = [v.x, v.y, v.z];\n        window.pl.setObjectPos(window.selectedObj, newPos);\n    });\n    v.renderer.domElement.addEventListener('mouseup', (event) => { handlerDropObject(event) });\n    // document.addEventListener('keydown', (event) => { handlerScaleRotateObject(event) } );\n      \n  }, [p.plOptions] );\n\n  // --- pickup object \n  const handlerPickupObject = (event) => {\n      if ( !p.isEditMode ) return;\n      if (window.pl.shiftIsPressed) return;\n\n      const v = window.pl.viewer;\n      \n      const intersects = v.raycaster.intersectObject( v.panorama, true );\n      const theObj = intersects[0]? intersects[0].object : null ;\n      if (!theObj || !theObj.type?.startsWith('pl_')) return;\n\n      theObj.distance = v.camera.position.distanceTo(theObj.position);\n      window.selectedObj = theObj;\n    // console.log('Edit Object cLicked', window.selectedObj.name);\n      \n      v.OrbitControls.enabled = false;\n      window.selectedObj.originalPos = window.selectedObj.position;                \n      \n      // State: assign lastSelectedObj and update state currentObject3D\n      p.selectObject(theObj);\n  }\n\n  // --- drop object \n  const handlerDropObject = (event) => {  \n      if ( !p.isEditMode || !window.selectedObj) return;\n      if (!window.selectedObj.type.startsWith('pl_')) return;\n      const v = window.pl.viewer;\n      v.OrbitControls.enabled = true;\n      // p.singleObject3DToParams(window.selectedObj);\n      SyncObject3d__DataHotspot( { \n                  object3D: window.selectedObj,\n                  getOptionsByObject3D: p.getOptionsByObject3D, \n                  setPlOptions: p.setPlOptions,\n                  plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot} );\n      window.selectedObj = null;\n  };\n\n    return (\n        <Row>\n          <div className='w-100' onMouseMove={ (e) => reactGetMouse3Dposition(e, { setEditParams: p.setEditParams, editParams: p.editParams } ) }>\n           <div  id={p.editParams.POSTERLENS_CONTAINER_ID} className='posterlens-container'></div>\n          </div>\n        </Row>\n    )\n}\n\nexport default CanvasUI3D\n","import React, {useEffect, useState, createRef} from 'react';\n\n// the <inputs ...\nimport InputData from '../Inputs/InputData';\nimport InputOnClickOption from '../Inputs/InputOnClickOption';\nimport InputsRotation from '../Inputs/InputsRotation';\n\nimport { SyncObject3d__DataHotspot } from '../SyncDataAlongApp'\nimport { reactGetMouse3Dposition } from '../../helpers';\nimport { z_move } from './CanvasUI3D';\n\n// bootstrap 4 elements\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction EditObjectControls_Bottom( p ) {\n\n    const [imgPath, setImgPath] = useState( window.plImgPath?? 'resources/'); // imgs for 3d textures\n    const refImgPathInput = createRef();\n\n    // Important note. Inside a new EventListener, we can't access to updated props. The props will always have the initial value\n    // That's why I use window.selectedObj instead of p.currentObject3D, to access to the lastest Position.\n\n    useEffect(() => { \n        if (!window.pl) return;\n        document.addEventListener('keydown', (event) => { handlerScaleRotateObject(event) } );    \n    }, [] );\n\n    const handlerScaleRotateObject = function(event) {\n        // we cant use the state currentObject3D, because it will not get the latest value. It will be initialzied to the time of creation og this handler\n        if (!window.lastSelectedObj) return;\n        if (event.ctrlKey) {\n            let SCALE_FACTOR    = p.editParams.SCALE_FACTOR * ( event.shiftKey? 2 : 1);\n            let ROTATE_DEG      = p.editParams.ROTATE_DEG * ( event.shiftKey? 2 : 1);     \n            switch (event.key) {\n                case '+': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x * SCALE_FACTOR, window.lastSelectedObj.scale.y * SCALE_FACTOR, window.lastSelectedObj.scale.z * SCALE_FACTOR );      break;\n                case '-': window.lastSelectedObj.scale.set( window.lastSelectedObj.scale.x / SCALE_FACTOR, window.lastSelectedObj.scale.y / SCALE_FACTOR, window.lastSelectedObj.scale.z / SCALE_FACTOR );      break;\n                case 'r': window.lastSelectedObj.rotateZ(ROTATE_DEG);  break;\n                case 't': window.lastSelectedObj.rotateZ(-ROTATE_DEG);  break;\n                case 'f': window.lastSelectedObj.rotateY(ROTATE_DEG);  break;\n                case 'g': window.lastSelectedObj.rotateY(-ROTATE_DEG);  break;\n                case 'v': window.lastSelectedObj.rotateX(ROTATE_DEG);  break;\n                case 'b': window.lastSelectedObj.rotateX(-ROTATE_DEG);  break;\n                case '4': z_move(window.lastSelectedObj, 'close'); break;\n                case '5': z_move(window.lastSelectedObj, 'far'); break;\n                default:\n                    break;\n            }\n            p.setCurrentObject3D(window.lastSelectedObj);\n            if (window.waitSave) \n                clearTimeout(window.waitSave);\n            window.waitSave = setTimeout( () => {\n                SyncObject3d__DataHotspot( { \n                    object3D: window.lastSelectedObj,\n                    getOptionsByObject3D: p.getOptionsByObject3D, \n                    setPlOptions: p.setPlOptions,\n                    plOptionsReplaceWorldParamsHotspot: p.plOptionsReplaceWorldParamsHotspot} );\n                clearTimeout(window.waitSave);\n            }, 200);\n            \n            \n        }\n    }\n\n\n    \n    const panoList = {}; // for the `link` option below\n    if (p.plOptions)\n        p.plOptions.worlds.forEach( world => panoList[world.name] = world.name  );\n    const inputs = [\n        [\n            { option: 'image', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Img', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'alpha', type: (p.appAsWidget? 'image-pick' : 'image'), label:'Alpha', active: [ 'pl_poster3d' ], deleteIfValue:'' },\n            { option: 'text', type: 'input', label:'Text', active: [ 'pl_text-2d', 'pl_text-3d'] },\n            { option: 'emissive', type: 'color', label:'Emissive Color', active: [ 'pl_text-3d'], deleteIfValue:'#ffffff' },\n            { option: 'color', type: 'color', label:'Text Color', active: [ 'pl_text-2d'], deleteIfValue:'#ffffff' },\n            { option: 'background', type: 'color', label:'Background', active: [ 'pl_text-2d'], deleteIfValue:'#000000' },\n            // TODO: we need to give an option for bg transparent \n            { option: 'alwaysLookatCamera', type: 'checkbox', label:'alwaysLookatCamera', checkedValue: () => true, uncheckedValue: () => false, active: [ 'pl_text-2d', 'pl_text-3d', 'pl_poster3d' ], deleteIfValue: true },\n            { option: 'sprite', type: 'checkbox', label:'sprite 2D', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            { option: 'posterSphere', type: 'checkbox', label:'is sphere', checkedValue: () => true, uncheckedValue: () => null, active: [ 'pl_text-2d', 'pl_poster3d' ], deleteIfValue: false },\n            //{ option: 'link', type: 'select', options: panoList, label:'Go to pano', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n            //{ option: 'modal', type: 'input', label:'modal', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'], deleteIfValue:'' },\n            { option: 'opacity', type: 'number', step: 0.05, min:0, max:1, label:'Opacity', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '1' },\n        ],\n        [\n        { option: 'animatedMap', type: 'number', label:'frames map', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'animatedMapSpeed', type: 'number', label:'speed', active: [ 'pl_poster3d' ], deleteIfValue: '' },\n        { option: 'rotationX', type: 'number', label:'Rotate animat', placeholder: 'x', step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationY', type: 'number', label:'', placeholder: 'y',  step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'rotationZ', type: 'number', label:'', placeholder: 'z',  step: 100, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'animated', type: 'select', label:'Glow animation', options: { 'always' : 'always', 'only on hover' : 'hover' }, active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        { option: 'popupWhenVisible', type: 'number', step: 10, label:'Pops up when in camera', active: [ 'pl_text-2d', 'pl_poster3d', 'pl_text-3d'], deleteIfValue: '' },\n        ]\n    ];\n    return (\n      <Container className=\"edit-panel\">\n        { /* The name of the object */ }\n        {p.currentObject3D? \n        <Row>\n            <InputData   input={ { option: 'name', type: 'input', label:'', active: [ 'pl_poster3d', 'pl_text-2d', 'pl_text-3d'] } } \n                            currentObject3D={p.currentObject3D}\n                            getOptionsByObject3D={p.getOptionsByObject3D} \n                            getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                            plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot}\n                            setPlOptions={p.setPlOptions}\n                            selectObject={p.selectObject}\n                            setCurrentObject3D={p.setCurrentObject3D}\n                            class=\"col-3\"\n                            />\n\n        { /* The inputs in sync with the 3d object */ }\n            <div className='col-9'>\n                <InputsRotation  class=\"row\"\n                            getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                            currentObject3D={p.currentObject3D} setPlOptions={p.setPlOptions}\n                            plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot}\n                            getOptionsByObject3D={p.getOptionsByObject3D}\n                            selectObject={p.selectObject}\n                            setCurrentObject3D={p.setCurrentObject3D} />\n            </div>\n        </Row> : null }        \n\n        { /* The imgs path (not needed anymore) */}\n        { !p.appAsWidget?\n        <InputGroup>\n            <InputGroup.Prepend> <InputGroup.Text>imgs path</InputGroup.Text></InputGroup.Prepend>\n            <FormControl as='input' defaultValue={imgPath} ref={refImgPathInput} \n                        onChange={ (e) => refImgPathInput.current? setImgPath(refImgPathInput.current.value) : null } />\n            <InputGroup.Append><InputGroup.Text> {imgPath} </InputGroup.Text> </InputGroup.Append>\n        </InputGroup> : null }\n\n        <Row>\n            {   /**  */\n                inputs.map( (inputsCol, col_i) => {\n                    return <Col sm='4' className='border bg-light' key={'column-'+col_i}>\n                        <label className='d-block h5'>{ col_i === 0 ? 'Main props' : 'Animation' }</label>\n                        { \n                            inputsCol.map( (input, i) => {\n                                if ( !p.currentObject3D ) return null;\n                                if ( !input.active.includes(p.currentObject3D.type) ) return null;\n                                return <InputData   input={input} imgPath={imgPath} key={'input-'+i}\n                                                    currentObject3D={p.currentObject3D} setCurrentObject3D={p.setCurrentObject3D}\n                                                    getOptionsByObject3D={p.getOptionsByObject3D}\n                                                    getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                                                    plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot}\n                                                    setPlOptions={p.setPlOptions}\n                                                    selectObject={p.selectObject}\n                            />\n                            } )\n                        }\n                    </Col>\n                })\n            }\n            <Col sm=\"4\" className=\"border bg-light\">\n                <label className='d-block h5'>Action</label>\n                <InputOnClickOption key={p.getOptionsByObject3D? p.getOptionsByObject3D.name : 'not'} plOptions={p.plOptions} \n                                    currentObject3D={p.currentObject3D}\n                                    getOptionsByObject3D={p.getOptionsByObject3D}\n                                    onClickOption={p.onClickOption} setOnClickOption={p.setOnClickOption} \n                                    getCurrentPanoramaParams={p.getCurrentPanoramaParams}\n                                    plOptionsReplaceWorldParamsHotspot={p.plOptionsReplaceWorldParamsHotspot}\n                                    setPlOptions={p.setPlOptions}\n                                    selectObject={p.selectObject}\n                                    setCurrentObject3D={p.setCurrentObject3D}\n                />\n            </Col>\n        </Row>\n        \n        {/* <img width='50' className='use-me' src={ window.basePath+'resources/arboles.png' } /> */}\n      </Container>        \n  );\n}\n\nexport default EditObjectControls_Bottom;\n","import React, {useState} from 'react'\nimport {round2} from '../../helpers';\n\nexport default function PanelObjectData_Right( p ) {\n\n    // State. We can minimize the panel with onclick\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n    // info in a panel of the object. Gets updated when the currentObject3D updates. It means , when it's clicked for instance.\n    function currentObjectOptions() {\n        if (!p.currentObject3D) return;\n        const worldParams = p.getCurrentPanoramaParams();\n        let objectOptions = worldParams.hotspots.find( ht => ht.name === p.currentObject3D?.name );\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentObjectOptionsJSX() {\n        const objectOptions = currentObjectOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <h4>{p.currentObject3D?.name}<small> ({p.currentObject3D?.type})</small></h4>\n\n            <div className={ isOpen? 'd-block' : 'd-none' }>\n                \n                Pos: {round2(p.currentObject3D?.position.x)} {round2(p.currentObject3D?.position.y)} {round2(p.currentObject3D?.position.z)}\n                <br/>\n                Rot: x {round2(p.currentObject3D?.rotation.x)} / y {round2(p.currentObject3D?.rotation.y)} / z {round2(p.currentObject3D?.rotation.z)}\n                { currentObjectOptions()?.alwaysLookatCamera? '(alwayslookatcamera)' : null }\n                <br/>\n                Scale: {round2(p.currentObject3D?.scale.x)} {round2(p.currentObject3D?.scale.y)} {round2(p.currentObject3D?.scale.z)}\n            \n            \n                <React.Fragment>\n                <br/>\n                <b>Object Info in options:</b> <br/>\n                {currentObjectOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n\n}\n","import React, {useState, useEffect} from 'react'\n\nimport Col from 'react-bootstrap/Col'\n\n\nexport default function PanelListObjects_Left( p ) {\n\n    // init is the current pano params, where we grab the objects to show (hotspots)\n    const [init, setInit] = useState(null);\n    useEffect(() => {\n        console.log('🚴🏼‍♀️Hello from PanelListObjects_Left')\n        setInit(p.getCurrentPanoramaParams());\n    }, [p.plOptions])\n\n    // more info for developers. Option popup when visible for an object.\n    const getObjectsShowWhenVisible = function() {\n        if (!window.pl) return 'not loaded';\n        if (!window.pl.viewer.panorama.objectsToPopupWhenVisible) return 'none';\n        const jsx = <div> {Object.keys(window.pl.viewer.panorama.objectsToPopupWhenVisible).map( k=>{\n            const [min,max] = window.pl.viewer.panorama.objectsToPopupWhenVisible[k];\n            return <p key={k}>{k} : {min}º, {max}º</p>;\n        })} </div>\n        return jsx;\n    }\n    return (\n        <Col className='list-objects' sm='2'>\n            List Hotposts in Pano Options\n            {init && p.plOptions?.worlds ? \n            <ul>\n                { init.hotspots.map((element,i) => {\n                    return <li key={i} onClick={ () => {\n                        // get object 3d\n                        const theObj = window.pl.getObjectByName(element.name);\n                        p.selectObject(theObj);\n                    }} className={ (p.currentObject3D?.name === element.name )? 'active' : '' }>\n                        {element.name} <small>{element.type}</small>\n                    </li>\n                })}\n            </ul>\n            : null }\n\n           <br/> { /** curiously this works, I dont need to use any State, it works ok with the pl object fn. \n                    *    It is because of the mousemove event in App.js. It makes recalculate this component aparently\n                    */}\n            { p.editParams.isExpertMode? <React.Fragment>\n                Camera: { window.pl? window.pl.getCameraDirection('lookatPoint').join(', ')  : null }\n                <br/>\n                Angle: { window.pl? Math.round(window.pl.getCameraDirection('rad') * 100)/100 : null }\n                    rad :: { window.pl? Math.round(window.pl.getCameraDirection('deg')) : null }º\n                    <br/>\n                    Fov: { window.pl? window.pl.viewer.camera.fov : null }\n                    <br/>\n                    MousePos: { p.editParams.currentMouse3DPosition.join(', ') }\n                    <br/>\n                    <br/>\n                    <i>panorama.objectsToPopupWhenVisible:</i> { init? getObjectsShowWhenVisible() : null }\n            </React.Fragment> : null }\n        </Col>\n    )\n}\n","import React, {useState} from 'react'\n/**\n * WHAT:    Shows a panel with the config data of the current Panorama.\n * WHERE:   Top Right of the screen in absolute position, semiyellow bg panel.\n * WHEN:    Shown when there is no object selected only. \n */\nexport default function PanelPanoramaInfo_Right(p) {\n\n    // State\n    const [isOpen, setIsOpen] = useState(p.editParams.isExpertMode);\n\n    // info in a panel of the panorama.\n    function currentPanoOptions() {\n        const worldParams = p.getCurrentPanoramaParams();\n        if (!worldParams) return;\n        let objectOptions = {... worldParams }\n        delete(objectOptions.hotspots)\n        return objectOptions;\n    }\n    // transform the info in JSX to render it as text.\n    function currentPanoOptionsJSX() {\n        const objectOptions = currentPanoOptions();\n        var exportStr = objectOptions? JSON.stringify(objectOptions, false, 2) : 'no sel';\n        var lines = exportStr.split('\\n');\n        var jsx = [];\n        lines.forEach((line, i)=> { jsx.push(line); jsx.push(<br key={'return-'+i} />); } )\n        return jsx;\n    }\n\n    // THAT's it. Lets render.\n    return (\n        <div className='object-info position-absolute' onClick={ () => setIsOpen(!isOpen) }>\n            <div className={ isOpen? 'd-block' : 'd-none' }>            \n                <React.Fragment>\n                    <br/>\n                    <b>Panorama in options:</b> <br/>\n                    {currentPanoOptionsJSX() }\n                </React.Fragment>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n/**\n * Panels and Buttons on top of the Canvas3D UI. \n */\n\nimport Row from'react-bootstrap/Row';\nimport Button from'react-bootstrap/Button';\nimport PanelObjectData_Right from './PanelObjectData_Right';\nimport PanelListObjects_Left from './PanelListObjects_Left';\nimport PanelPanoramaInfo_Right from './PanelPanoramaInfo_Right';\n\nimport { SyncPlOptions__LocalStorage } from '../SyncDataAlongApp'\n\nexport default function TopBarButtonsAndPanels( p ) {\n    \n    return (\n    <Row className=\"top-buttons\">\n        { p.currentObject3D? \n            <PanelObjectData_Right    currentObject3D={p.currentObject3D} getCurrentPanoramaParams={p.getCurrentPanoramaParams} editParams={p.editParams} /> \n            : \n            <PanelPanoramaInfo_Right  currentObject3D={p.currentObject3D} getCurrentPanoramaParams={p.getCurrentPanoramaParams} editParams={p.editParams} /> \n        }\n        { p.plOptions?\n             <PanelListObjects_Left currentObject3D={p.currentObject3D} plOptions={p.plOptions} selectObject={p.selectObject} editParams={p.editParams}\n                                setCurrentObject3D={p.setCurrentObject3D} getCurrentPanoramaParams={p.getCurrentPanoramaParams} /> : null }\n        \n\n\n        { p.plOptions && p.editParams.isExpertMode ? \n            <React.Fragment>\n                <Button className=\"btn-sm\" onClick={ e => p.restartViewer() }>\n                    RESET <span className=\"badge\">{p.countRestarts}</span>\n                </Button>        \n                <Button className=\"btn btn-danger btn-sm\" onClick={ (e) => { localStorage.setItem('pl.o', null); p.restartViewer(); }  }>\n                    Clear cache\n                </Button>\n            </React.Fragment>\n             : null }\n        { p.editParams.isExpertMode ? \n            <Button className=\"btn-secondary ml-5 btn-sm\" onClick={ () => p.exportToTextarea() }>\n                Export\n            </Button> : null }\n\n        { p.currentObject3D?\n            <React.Fragment>\n                <Button className=\"btn btn-danger btn-sm\" onClick={ p.removeCurrentObject }>\n                    Delete\n                </Button> \n                <Button className=\"btn btn-success btn-sm\" onClick={ p.cloneCurrentObject }>\n                    Clone\n                </Button>\n                <Button className=\"btn btn-warning btn-sm\" onClick={ ()=> { p.setCurrentObject3D(null); window.lastSelectedObj = null; } }>\n                    Unselect\n                </Button>\n            </React.Fragment> \n            : null }\n\n         <Button variant=\"outline-secondary btn-sm ml-3\" onClick={ (e)=> p.setAppMode('demo') }>\n            Demo\n        </Button>\n\n\n\n        {/* Button to set current view a default view of the pano */}\n        <Button variant=\"primary\" className='ml-5' onClick={ (e)=> {                 \n                const currentPanoParams =  p.getCurrentPanoramaParams();\n                currentPanoParams.initialLookAt = window.pl.getCameraDirection('lookatPoint');\n                currentPanoParams.initialFov = window.pl.viewer.camera.fov;\n                const newOptions = p.plOptionsReplaceWorldParams(currentPanoParams);\n                SyncPlOptions__LocalStorage(newOptions, p.setPlOptions);\n            } }>\n            Set camera view\n        </Button>\n\n    </Row>)\n}\n","import {useEffect, useState} from 'react';\n\n\nfunction Widgets( p ) {\n\n    const v = window.pl?.viewer;\n    if (window.pl?.el)\n        window.pl.el.querySelector('div:last-child').classList.add('pl-widgets');\n\n    const [isWidgetsInit, setIsWidgetsInit ] = useState(false);\n    const initWidgets = function() {\n        if (isWidgetsInit) return;\n        setIsWidgetsInit(true);\n        if (typeof window.basePath === 'undefined') window.basePath = './';\n        // Widgets\n        // Create poster buttons. One for every type.\n        Array.from([ /*'link', */\n                    // 'poster-sprite', // type poster3d + sprite = true\n                    'poster3d',\n                    // 'poster3d-sphere', // type poster3d + posterSphere = true\n                    'text-3d', // doesnt work\n                    'text-2d',\n                   // 'text-2d-sprite' // type text-2d + sprite = true \n            ] ).forEach( type => {\n                v.appendControlItem({\n                    id: 'edit-controls',\n                    style: {\n                        backgroundImage: 'url('+window.basePath+'resources/widget-'+type+'.png)',\n                        float: 'left'\n                    },    \n                    onTap: () => { \n                        const { newObj, objectData } = initNewObject( type );\n                        console.log('Created new obj: ', { newObj, objectData })\n                    },\n                    group: 'editmode'\n                });\n                //shabby way to add a class to this btn. (panolens doesnt do it)\n                const justCreatedBtn = window.pl.el? window.pl.el.querySelector('.pl-widgets > span:last-child') : null;\n                if (justCreatedBtn) justCreatedBtn.classList.add('widget-btn-'+type);\n                \n        })\n    }\n    useEffect(() => {\n        console.log('Hellow from widgets');\n        if (window.pl && p.isEditMode) \n            //if (!p.pl.viewer.widget) \n                initWidgets() // TODO: if deactivate and reactivate the editmode, the widgets are created again (duplicated)\n                // we can use pl.viewer.widget.barElement.remove() when deactivated to delete the previous ones. But ideally we could avoid calling this init if they exist.\n    }, [p.countResets]);\n\n\n\n    const initNewObject = function(type = 'poster3d') {\n        // get Scene by name:\n        const params = {\n            name:  `new_${type}_` + Math.floor(Math.random() * 10000),\n            type: type,\n            pos: Object.values(v.camera.getWorldDirection(new window.THREE.Vector3()).multiplyScalar(300)), // this normalizes but not to unitary, but to 300 long\n        }\n        switch (type) {\n            // case 'link': break;\n            case 'poster3d':    // with window.defaultPosterImg we can set up a default img on creation, from outside react.\n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n            break;\n            case 'poster3d-sphere': \n                params.image = window.defaultPosterImg? window.defaultPosterImg : window.basePath+'resources/poster3.jpg';\n                params.type = 'poster3d';\n                params.posterSphere = true;\n            break;\n            //  case 'poster-sprite': \n            //     params.type = 'poster3d';\n            //     params.sprite = true; \n            //     break;\n            case 'text-2d': \n                params.text = \"New text\"; \n                break;\n            // case 'text-2d-sprite': \n            //     params.type = 'text-2d';\n            //     params.sprite = true; \n            //     params.text = \"New text\"; \n            //     break;\n            case 'text-3d': // doesnt work\n                params.type = 'text-3d';\n                params.fontFamily = window.basePath+'resources/fonts/Century_Gothic_Regular.js';\n                params.text = \"New text\";\n                break;\n            default: break;\n        }\n\n        // posterlens fn\n        // update states object 3d in viewer & object params for posterlens\n        params.callbackFn = mesh => p.setCurrentObject3D(mesh);        \n        window.pl.createNewObjectFromParams(v.panorama, params);\n\n        \n        // update the option settings\n        let worldParams = p.getCurrentPanoramaParams();\n        worldParams.hotspots.push(params);\n        const newPlOptions = p.plOptionsReplaceWorldParams(worldParams);\n        p.setPlOptions(newPlOptions);\n        \n        \n        \n        return params;\n    }\n\n  // its all vanilla js, connecting with panolens. No HTML\n  return (\n    null\n  );\n}\n\nexport default Widgets;\n","/** Main container of the Layout. This is where all the real action starts */\n\nimport React, {useState, useEffect, createRef} from 'react';\nimport EditObjectControls_Bottom from './Layout/EditObjectControls_Bottom';\nimport TopBarButtonsAndPanels from './Layout/TopBarButtonsAndPanels';\nimport CanvasUI3D from './Layout/CanvasUI3D';\nimport Widgets from './Widgets';\n\nimport { SyncObject3d__Inputs, SyncPlOptions__LocalStorage} from './SyncDataAlongApp'\nimport { z_move } from './Layout/CanvasUI3D';\n\n// Bootstrap 4\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nexport default function AppEditPosterlens( { data, setAppMode, appAsWidget } ) {\n  \n  // React states and refs\n  const [plOptions, setPlOptions] = useState(); // IMPORTANT. The goal of all this app is to generate these options. With them we can call posterlens to createa  tour.\n  const [currentObject3D, setCurrentObject3D] = useState(null); // The current THREEjs selected object. Sometimes we use pl.lastSelectedObj, because there are events outside REACT that can't use the State\n  const [isEditMode, setIsEditMode] = useState(false); // In this app, it's always true\n  \n  const [editParams, setEditParams] = useState( {\n    POSTERLENS_CONTAINER_ID: 'posterlens-container', // the div id where we load posterlens\n    SCALE_FACTOR : 1.01,                              // when using ctrl+ and ctrol- keys to change scale of object.\n    ROTATE_DEG : 0.05,                                // radians. 3.1416 is 180 deg.\n    currentMouse3DPosition: [0,0,0],                  // shown in left panel PanoInfo.js\n    AUTO_START_EDIT_MODE : 1,\n    isExpertMode: (typeof window.expertMode !== 'undefined')? window.expertMode : true  // shows more or less info.\n  } );\n  const [countRestarts, setCountRestarts] = useState(0); // not important\n  \n\n  const [onClickOption, setOnClickOption] = useState(null); // used in InputOnclickOption, but needs to be defined here.\n  \n  \n\n\n\n  // React Life cycle. INIT\n  \n  useEffect(() => {\n    console.log('INIT AppEditPosterlens! React rocks 🤘');\n    // create the interactive 3d viewer with posterlens\n    createViewer();\n    setCountRestarts(1); // small helper\n  }, []);\n  \n  // called on init and restart\n  useEffect(() => {\n    // initialize this react plugin to make that viewer interactive.\n    if (window.pl)\n      if (editParams.AUTO_START_EDIT_MODE) \n        setIsEditMode(true);\n  }, [countRestarts]);\n\n  /* Watch onchange on currentObject3D selection in the UI.\n  *   we basically update the inputs with the values inside the plOptions for that hotspot \n  */\n  useEffect( () => {    if (!currentObject3D) return;\n\n    localStorage.setItem('lastSelectedObj.name', currentObject3D.name); // never used i think\n    \n    /* Object 3D ====> Inputs  !SHABBY WAY! */\n    SyncObject3d__Inputs( { currentObject3D, getOptionsByObject3D, setOnClickOption } );   \n    // currentObject3D.material.blending = 2;\n  }, [currentObject3D])\n  \n   \n  \n  /**\n   *  CALL to posTERLENS\n   */\n  function createViewer() {\n\n    var posterlensConfig = {}\n    if (!data) console.log('data variable not found.')\n    else posterlensConfig = data; // `data` is loaded with external file tat sets up `var data = {..}`\n    \n    // load from cache by default\n    var retrievedOptions = JSON.parse( localStorage.getItem('pl.o') ); //retrieve the object to load cache\n    posterlensConfig = (retrievedOptions?.worlds) ? retrievedOptions : posterlensConfig;\n    if (!posterlensConfig) {\n      console.error('No data loaded. Cant initialize');\n      return;\n    }\n\n    // CALL POSTERLENS\n    window.pl = document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).posterlens( posterlensConfig );\n    setPlOptions(window.pl.o);\n    window.pl.viewer.panorama.addEventListener('load', () => {\n      // init also selected obj if it was selected before\n      const lso = localStorage.getItem('lastSelectedObj.name');\n      if (lso) {\n        const selObj = window.pl.getObjectByName(lso);\n        if (selObj) {\n          selectObject(selObj)\n        }\n      }\n      // Debug with chrome three inspector.\n      window.scene = window.pl.viewer.getScene();\n      if (isEditMode) window.stopAllAnimations(window.pl.viewer);\n\n      \n    });\n  }\n\n  useEffect( () => { \n    window.pl.viewer.editMode = isEditMode;\n  }, [isEditMode]);\n  \n  function restartViewer() {\n    destroyViewer();\n    setPlOptions(null);\n    setIsEditMode(false);\n    delete(window.pl);\n    createViewer();\n    setCountRestarts(countRestarts + 1);\n    // and widgets are rerenderr because its key is associated to countRestarts, so they are loaded ok.\n    setTimeout( () => { // we need this just to refresh otherwise the object cant be selected... dont know...\n      document.querySelector('#input-name form').dispatchEvent(new Event(\"submit\"));\n    }, 500);\n    \n  }\n\n  // helpers\n  function getOptionsByObject3D(object3D, option = null) {\n    const currentWorldOptions = getCurrentPanoramaParams();\n    let objectData = currentWorldOptions.hotspots.find( ht => ht.name === object3D?.name );\n    if (objectData && option) return objectData[option];\n    return objectData;\n  }\n  function getCurrentPanoramaParams() {\n    if (!plOptions) return null;\n    return plOptions.worlds.find( w => w.name === window.pl.viewer.panorama.name );\n  }\n  function getCurrentPanoramaParamsIndex() {\n    return plOptions.worlds.findIndex( w => w.name === window.pl.viewer.panorama.name );\n  }\n  // returns all pl with the new worldparmas at the place of the current panorama params\n  function plOptionsReplaceWorldParams(worldParams) {\n    const newOptions = Object.assign({}, plOptions);\n    newOptions.worlds[getCurrentPanoramaParamsIndex()] = {...worldParams};\n    return newOptions;\n  }\n  // returns all pl options replacing the hotspot data in current panorama with that name\n  function plOptionsReplaceWorldParamsHotspot(name, objectData) {\n    const currentWorldParams = getCurrentPanoramaParams();\n    const getHotspotIndex   = currentWorldParams.hotspots.findIndex(ht => ht.name === name);\n    if ( getHotspotIndex < 0 ) return;\n    const newHotspots = [...currentWorldParams.hotspots];\n    newHotspots[getHotspotIndex] = objectData;\n    currentWorldParams.hotspots = newHotspots;\n    return plOptionsReplaceWorldParams(currentWorldParams);\n  }\n \n  // when picking up the object iwth mouse or from list of objects.\n  function selectObject(theObj) {\n    if (!theObj) return false;      // if (currentObject3D) currentObject3D.material.blending = 1;\n    window.lastSelectedObj = theObj;\n    setCurrentObject3D( theObj );   // look at the object, I dont know how to do it\n  }\n\n  // remove from data and in viewer\n  function removeCurrentObject() {\n    if (!currentObject3D) return;\n    const currentWorldOptions = getCurrentPanoramaParams();\n    const currentWorldOptionsIndex = getCurrentPanoramaParamsIndex();\n    let objectHotspotIndex = currentWorldOptions.hotspots.findIndex( ht => ht.name === currentObject3D.name );\n    let newPlOptionsHotspots = [...currentWorldOptions.hotspots];\n    let hotspotIndex = newPlOptionsHotspots.findIndex( ht => ht.name === currentObject3D.name );\n    newPlOptionsHotspots.splice(hotspotIndex,1); //delte in array\n    const newO = {...plOptions};\n    newO.worlds[currentWorldOptionsIndex].hotspots = newPlOptionsHotspots;\n    SyncPlOptions__LocalStorage(newO, setPlOptions);\n    window.pl.viewer.panorama.remove( currentObject3D );\n    window.pl.viewer.panorama.remove( window.pl.viewer.scene.getChildByName(currentObject3D.name) ); // just in case (somethimes it doesn delete)\n    setCurrentObject3D(null);\n  }\n\n  // clone in data and reload the viewer.\n  function cloneCurrentObject() {\n    if (!currentObject3D) return;\n    const objectCurrentParams = Object.assign({}, getOptionsByObject3D(currentObject3D));\n    const currentWorldParams  = getCurrentPanoramaParams();\n    const newName             = \"cloned_\"+ objectCurrentParams.name;\n    objectCurrentParams.name  = newName;\n    objectCurrentParams.pos = [ parseFloat(objectCurrentParams.pos[0]) + 50, parseFloat(objectCurrentParams.pos[1]) + 50, objectCurrentParams.pos[2]]\n    currentWorldParams.hotspots.push(objectCurrentParams);\n    const newPlOptions = plOptionsReplaceWorldParams(currentWorldParams);\n    \n    SyncPlOptions__LocalStorage(newPlOptions, setPlOptions);\n    // we need to restart the viewer to create it.\n    localStorage.setItem('lastSelectedObj.name', newName);\n    restartViewer();\n\n  }\n\n  // shows modal with all the options\n  function exportToTextarea() {\n    var exportStr = JSON.stringify(plOptions, false, 2);\n    var textA = document.createElement( 'textarea' );\n    textA.textContent = exportStr;\n    textA.style.width = '100%'\n    textA.style.height= '500px';\n    window.pl.Modal('Export JSON', textA);\n  }\n\n\n\n\n\n  // remove all viewer. I should free up memory before...\n  function destroyViewer() {\n    document.querySelector('#'+editParams.POSTERLENS_CONTAINER_ID).innerHTML = '';\n  }\n\n  \n\n\n\n\n  return (     \n    <Container className={ 'wrapper border pt-2' + (editParams.isExpertMode? ' expert-mode' : ' no-expert-mode') } style={{ maxWidth:'1200px' }}>\n      \n      <TopBarButtonsAndPanels currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} getCurrentPanoramaParams={getCurrentPanoramaParams} \n                              plOptions={plOptions} setPlOptions={setPlOptions} editParams={editParams} selectObject={selectObject}\n                             plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                             restartViewer={restartViewer} removeCurrentObject={removeCurrentObject} setAppMode={setAppMode} countRestarts={countRestarts} \n                             exportToTextarea={exportToTextarea} cloneCurrentObject={cloneCurrentObject} />\n\n      \n      <CanvasUI3D editParams={editParams} setEditParams={setEditParams} isEditMode={isEditMode}\n                  getOptionsByObject3D={getOptionsByObject3D} selectObject={selectObject}\n                  plOptions={plOptions} setPlOptions={setPlOptions} plOptionsReplaceWorldParamsHotspot={plOptionsReplaceWorldParamsHotspot}\n      />\n      \n      { isEditMode? \n      <Row className=\"no-gutters\" >\n        \n        <EditObjectControls_Bottom plOptions={plOptions} setPlOptions={setPlOptions} isEditMode={isEditMode} \n                    editParams={editParams} setEditParams={setEditParams}\n                    currentObject3D={currentObject3D} setCurrentObject3D={setCurrentObject3D} \n                    plOptionsReplaceWorldParamsHotspot={plOptionsReplaceWorldParamsHotspot}\n                    getCurrentPanoramaParams={getCurrentPanoramaParams} selectObject={selectObject} getOptionsByObject3D={getOptionsByObject3D}\n                    appAsWidget={appAsWidget} plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                    onClickOption={onClickOption} setOnClickOption={setOnClickOption} />\n      </Row>\n      : null }\n\n      { isEditMode? <Widgets plOptions={plOptions} isEditMode={isEditMode} setIsEditMode={setIsEditMode}  \n                              setCurrentObject3D={setCurrentObject3D} plOptions={plOptions}\n                              key={countRestarts} restartViewer={restartViewer} \n                              plOptionsReplaceWorldParams={plOptionsReplaceWorldParams}\n                              getCurrentPanoramaParams={getCurrentPanoramaParams} setPlOptions={setPlOptions}\n                              \n                              \n                              /> : null }\n    </Container>)\n\n}\n","// This is the call of the React APP.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\n/* Variables that can be set from the outside:\n  window.appAsWidget = true;\n  window.expertMode = false;\n  window.plImgPath = 'http:// ... ' (not neccessary in appAsWidget mode)\n  window.basePath = 'http://' or 'relative/path/' (needed to show the Widgets imgs, for example) \n  window.onSavePlOptionsCallback = function(plOpts) { ... whatever you want to do }\n*/\nconst containers = document.querySelectorAll('.wrapper-posterlens-edit-container');\ncontainers.forEach( (el,i)=>{\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    el\n  );\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}